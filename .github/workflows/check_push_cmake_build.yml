name: push check

on: 
  push:
    branches:
    - cmake_build
    - cfd-develop
    - dlc-develop
    - cfd-stable-*
    - feature/*
  pull_request:
    branches:
    - cmake_build
    - cfd-develop
    - dlc-develop
    - cfd-stable-*
    - feature/*

jobs:
  cmake-build:
    timeout-minutes: 20
    name: cmake build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, windows-2019, macos-12, macos-11, ubuntu-22.04, ubuntu-20.04]
        generator: ['Unix Makefiles']
        include:
          - os: windows-2022
            generator: 'Visual Studio 17 2022'
          - os: windows-2019
            generator: 'Visual Studio 16 2019'
          - os: windows-2019
            generator: 'MSYS Makefiles'
        exclude:
          - os: windows-2022
            generator: 'Unix Makefiles'
          - os: windows-2019
            generator: 'Unix Makefiles'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: setup python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
        architecture: x64
    - name: cmake-generate
      if: "matrix.generator == 'Unix Makefiles' || matrix.generator == 'MSYS Makefiles'"
      run: |
        cmake -S . -B build -G "${{ matrix.generator }}" -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;\$\${ORIGIN}/;\${ORIGIN}/"
    - name: cmake-generate-vs
      if: "matrix.generator != 'Unix Makefiles' && matrix.generator != 'MSYS Makefiles'"
      run: |
        cmake -S . -B build -G "${{ matrix.generator }}" -A x64 -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;\$\${ORIGIN}/;\${ORIGIN}/"
    - name: cmake-build
      run: |
        cmake --version
        cmake --build build --config Release
    - name: test
      run: |
        cd build
        ctest -C Release --output-on-failure

  cmake-swig-build:
    timeout-minutes: 20
    name: cmake swig build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
#        os: [macos-12, windows-2022, ubuntu-22.04]
        os: [ubuntu-22.04]
        target: [python, java]
        java: ['8.0', '11.0', '17']
        exclude:
          - target: python
            java: '8.0'
          - target: python
            java: '11.0'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: setup python
      if: matrix.target == 'python'
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
        architecture: x64
    - name: setup java
      if: matrix.target == 'java'
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        architecture: x64
        distribution: 'temurin'
    - name: cmake-generate-python-config
      if: matrix.os != 'windows-2022' && matrix.target == 'python'
      run: |
        cmake -S . -B build -G "Unix Makefiles" -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DENABLE_SWIG_PYTHON=on -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;../"
    - name: cmake-generate-windows-python-config
      if: matrix.os == 'windows-2022' && matrix.target == 'python'
      run: |
        cmake -S . -B build -G "Visual Studio 16 2019" -A x64 -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DENABLE_SWIG_PYTHON=on -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;../"
    - name: cmake-generate-java-config
      if: matrix.os != 'windows-2022' && matrix.target == 'java'
      run: |
        cmake -S . -B build -G "Unix Makefiles" -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DENABLE_SWIG_JAVA=on -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;../"
    - name: cmake-generate-windows-java-config
      if: matrix.os == 'windows-2022' && matrix.target == 'java'
      run: |
        cmake -S . -B build -G "Visual Studio 16 2019" -A x64 -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DENABLE_SWIG_JAVA=on -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;../"
    - name: cmake-build
      run: |
        cmake --version
        cmake --build build --config Release
    - name: test
      run: |
        cd build
        ctest -C Release --output-on-failure

  go-test:
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12, ubuntu-22.04]
        go-version: ['~1.15.0']
#        go-version: ['~1.15.0', '~1.16.0']

    steps:
    - name: setup go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: cmake-generate
      if: matrix.os != 'windows-2019'
      run: |
        cmake -S . -B build -G "Unix Makefiles" -DENABLE_SHARED=on -DENABLE_TESTS=off -DENABLE_ELEMENTS=on -DTARGET_RPATH="/usr/local/lib;/usr/local/lib64;./build/Release"
    - name: cmake-generate-windows
      if: matrix.os == 'windows-2019'
      run: |
        cmake -S . -B build -G "MSYS Makefiles" -DENABLE_SHARED=on -DENABLE_TESTS=off -DENABLE_ELEMENTS=on
    - name: cmake-build
      run: |
        cmake --version
        cmake --build build --config Release --parallel 2
        cp ./src/swig_go/*_test.go .
        go mod init github.com/cryptogarageinc/libwally-core
        go build
    - name: add-path-windows
      if: matrix.os == 'windows-2019'
      run: echo "$GITHUB_WORKSPACE/build/Release" >> $GITHUB_PATH
      shell: bash
    - name: go_test-windows
      if: matrix.os == 'windows-2019'
      run: |
        dir
        cp ./src/swig_go/*_test.go .
        go test
      shell: bash
    - name: go_test-mac
      if: matrix.os == 'macos-12'
      run: |
        cd build
        sudo make install
        cd ..
        go mod download
        LD_LIBRARY_PATH=/usr/local/lib go test
    - name: go_test
      if: matrix.os == 'ubuntu-22.04'
      run: |
        go mod download
        LD_LIBRARY_PATH=./build/Release go test
