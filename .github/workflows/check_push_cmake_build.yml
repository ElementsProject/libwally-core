name: push check

on: 
  push:
    branches:
    - cmake_build
    - cfd-develop
    - dlc-develop
    - feature/*
  pull_request:
    branches:
    - cmake_build
    - cfd-develop
    - dlc-develop
    - feature/*

jobs:
  cmake-js-build:
    timeout-minutes: 20
    name: cmake-js build
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 2
      matrix:
        os: [macos-latest, ubuntu-latest]
        node: [12, 14]
        exclude:
          - os: macos-latest
            node: 12

# windows has illegal AES result.
    steps:
    - uses: actions/checkout@v2
    - name: setup-node
      uses: actions/setup-node@v2.1.1
      with:
        node-version: ${{ matrix.node }}
    - name: npm_install
      run: npm install
    - name: test
      run: npm run ctest

  cmake-build:
    timeout-minutes: 20
    name: cmake build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        type: [msvc, msys, apple, ubuntu-20.04, ubuntu-18.04]
        include:
          - type: msvc
            os: windows-latest
            generator: Visual Studio 16 2019
          - type: msys
            os: windows-latest
            generator: MSYS Makefiles
          - type: apple
            os: macos-latest
            generator: Unix Makefiles
          - type: ubuntu-20.04
            os: ubuntu-20.04
            generator: Unix Makefiles
          - type: ubuntu-18.04
            os: ubuntu-18.04
            generator: Unix Makefiles

    steps:
    - uses: actions/checkout@v2
    - name: cmake-generate
      run: |
        cmake -S . -B build -G "${{ matrix.generator }}"
    - name: cmake-config
      run: cmake -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;\$\${ORIGIN}/;\${ORIGIN}/" --build build
    - name: cmake-build
      run: |
        cmake --version
        cmake --build build --config Release
    - name: test
      run: |
        cd build
        ctest -C Release --output-on-failure

  cmake-swig-build:
    timeout-minutes: 20
    name: cmake swig build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        target: [python, java]
        java: [8.0.x, 11.0.x, 13]
        exclude:
          - target: python
            java: 11.0.x
          - target: python
            java: 13
          - os: windows-latest
            target: python
          - os: windows-latest
            target: java
          - os: macos-latest
            target: python
          - os: macos-latest
            target: java

    steps:
    - uses: actions/checkout@v2
    - name: setup python
      if: matrix.target == 'python'
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
        architecture: x64
    - name: setup java
      if: matrix.target == 'java'
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
        architecture: x64
    - name: ubuntu-install-swig
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install swig
    - name: cmake-generate
      if: matrix.os != 'windows-latest'
      run: |
        cmake -S . -B build -G "Unix Makefiles"
    - name: cmake-generate-windows
      if: matrix.os == 'windows-latest'
      run: |
        cmake -S . -B build -G "Visual Studio 16 2019"
    - name: cmake-python-config
      if: matrix.target == 'python'
      run: cmake -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DENABLE_SWIG_PYTHON=on -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;../" --build build
    - name: cmake-java-config
      if: matrix.target == 'java'
      run: cmake -DENABLE_SHARED=on -DENABLE_ELEMENTS=on -DCMAKE_BUILD_PARALLEL_LEVEL=2 -DENABLE_SWIG_JAVA=on -DGENERATE_WALLY=off -DTARGET_RPATH="./wrap_js/build/Release;../" --build build
    - name: cmake-build
      run: |
        cmake --version
        cmake --build build --config Release
    - name: test
      run: |
        cd build
        ctest -C Release --output-on-failure

  go-test:
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        go-version: [1.14.x, 1.15.x]

    steps:
    - name: setup go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/checkout@v2
    - name: cmake-generate
      if: matrix.os != 'windows-latest'
      run: |
        cmake -S . -B build -G "Unix Makefiles"
        cmake -DENABLE_SHARED=on -DENABLE_TESTS=off -DENABLE_ELEMENTS=on -DTARGET_RPATH="/usr/local/lib;/usr/local/lib64;./build/Release" --build build
    - name: cmake-generate-windows
      if: matrix.os == 'windows-latest'
      run: |
        cmake -S . -B build -G "MSYS Makefiles"
        cmake -DENABLE_SHARED=on -DENABLE_TESTS=off -DENABLE_ELEMENTS=on --build build
    - name: cmake-build
      run: |
        cmake --version
        cmake --build build --config Release --parallel 2
        cp ./src/swig_go/*_test.go .
        go mod init github.com/cryptogarageinc/libwally-core
        go build
    - name: go_test-windows
      if: matrix.os == 'windows-latest'
      run: |
        dir
        echo ::add-path::$GITHUB_WORKSPACE/build/Release
        cp ./src/swig_go/*_test.go .
        go test
      shell: bash
    - name: go_test-mac
      if: matrix.os == 'macos-latest'
      run: |
        cd build
        sudo make install
        cd ..
        LD_LIBRARY_PATH=/usr/local/lib go test
    - name: go_test
      if: matrix.os == 'ubuntu-latest'
      run: |
        LD_LIBRARY_PATH=./build/Release go test
