# Support functions for the SWIG python wrapper

def _wrap_bin(fn, length, resize=False):
    """ Wrap functions that take an output buffer to create/return it """
    def wrapped(*args):
        n = length(*args) if callable(length) else length
        buf = bytearray(n)
        ret = fn(*list(args)+[buf])
        if resize:
            # Truncate buf to bytes written if needed. Also assert the
            # wrapper allocated enough space for the returned value to fit.
            assert ret <= n
            return buf[0:ret] if ret != n else buf
        if ret is not None:
            assert ret == n
        return buf
    return wrapped

def _wrap_int_array(fn, length):
    """ Wrap functions that take an output integer array to create/return it """
    def wrapped(*args):
        n = length(*args) if callable(length) else length
        out = [None] * n
        ret = fn(*list(args)+[out])
        assert ret == len(out) # Input list must be of the correct size
        return out
    return wrapped

def _wrap_with_defaults(fn, min_args, max_args, def_value):
    """ Wrap functions that take argument defaults """
    def wrapped(*args):
        args = list(args)
        n = len(args)
        assert n >= min_args
        r = max_args - n
        return fn(*args+[def_value]*r)
    return wrapped

# Length calculation functions TODO: Implement these in the C API
def hex_to_bytes_len(hex_str):
    return len(hex_str) // 2

def hex_n_to_bytes_len(hex_str, n):
    return n // 2

def base58_to_bytes_len(base58, flags):
    return base58_get_length(base58)

def base58_n_to_bytes_len(base58, n, flags):
    return base58_n_get_length(base58, n)

def format_bitcoin_message_len(msg, flags):
    if flags & BITCOIN_MESSAGE_FLAG_HASH:
        return SHA256_LEN
    msg_len = len(msg)
    return 25 + msg_len + (1 if msg_len < 253 else 3)

def script_push_from_bytes_len(data, flags):
    if flags & WALLY_SCRIPT_HASH160:
        return HASH160_LEN + 1
    elif flags & WALLY_SCRIPT_SHA256:
        return SHA256_LEN + 1
    push_len, opcode_len = len(data), 5
    for l, op_len in [(76, 1), (256, 2), (65536, 3)]:
        if push_len < l:
            opcode_len = op_len
            break
    return push_len + opcode_len

def scriptpubkey_csv_2of2_then_1_from_bytes_opt_len(pubkeys, csv_blocks, flags):
    # TODO: If we expose scriptint functions we can calc the real length here
    # instead of hardcoding 4 (largest push for the max csv_blocks of 0xffff)
    return 6 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4

def scriptpubkey_csv_2of2_then_1_from_bytes_len(pubkeys, csv_blocks, flags):
    # TODO: See scriptpubkey_csv_2of2_then_1_from_bytes_opt_len
    return 9 + 2 * (EC_PUBLIC_KEY_LEN + 1) + 4

def scriptpubkey_csv_2of3_then_2_from_bytes_len(pubkeys, csv_blocks, flags):
    # TODO: See scriptpubkey_csv_2of2_then_1_from_bytes_opt_len
    return 13 + 3 * (EC_PUBLIC_KEY_LEN + 1) + 4

def scriptpubkey_multisig_from_bytes_len(pubkeys, threshold, flags):
    return 3 + (len(pubkeys) // EC_PUBLIC_KEY_LEN) * (EC_PUBLIC_KEY_LEN + 1)

def scriptsig_multisig_from_bytes_len(script, sigs, sighashes, flags):
    der_len = (len(sigs) // EC_SIGNATURE_LEN) * (EC_SIGNATURE_DER_MAX_LEN + 2)
    script_len = script_push_from_bytes_len(script, 0)
    return 1 + der_len + script_len

def wif_to_public_key_len(wif, prefix):
    return EC_PUBLIC_KEY_UNCOMPRESSED_LEN if wif_is_uncompressed(wif) else EC_PUBLIC_KEY_LEN

def aes_len(key, src_bytes, flags):
    return len(src_bytes)

def aes_cbc_len(key, iv, src_bytes, flags):
    bytes_len = len(src_bytes)
    return (bytes_len // AES_BLOCK_LEN + 1) * AES_BLOCK_LEN

if is_elements_build():
    def elements_pegout_script_from_bytes_len(bh, mcs, pk, whl, flags):
        return elements_pegout_script_size(len(bh), len(mcs), len(pk), len(whl))

    def elements_pegin_contract_script_from_bytes_len(rs, cs, flags):
        return len(rs)

# Work around SWIG wrapping unisgned constants
# See https://github.com/swig/swig/issues/1287
BIP32_INITIAL_HARDENED_CHILD = 0x80000000
WALLY_PSET_BLIND_ALL = 0xffffffff
WALLY_SATOSHI_MAX = WALLY_BTC_MAX * WALLY_SATOSHI_PER_BTC
WALLY_TX_SEQUENCE_FINAL = 0xffffffff
WALLY_NO_CODESEPARATOR = 0xffffffff

# BEGIN AUTOGENERATED
hex_to_bytes = _wrap_bin(hex_to_bytes, hex_to_bytes_len)
hex_n_to_bytes = _wrap_bin(hex_n_to_bytes, hex_n_to_bytes_len)
base58_to_bytes = _wrap_bin(base58_to_bytes, base58_to_bytes_len, resize=True)
base58_n_to_bytes = _wrap_bin(base58_n_to_bytes, base58_n_to_bytes_len, resize=True)
base64_to_bytes = _wrap_bin(base64_to_bytes, base64_get_maximum_length, resize=True)
aes = _wrap_bin(aes, aes_len)
aes_cbc = _wrap_bin(aes_cbc, aes_cbc_len, resize=True)
sha256 = _wrap_bin(sha256, SHA256_LEN)
sha256_midstate = _wrap_bin(sha256_midstate, SHA256_LEN)
sha256d = _wrap_bin(sha256d, SHA256_LEN)
sha512 = _wrap_bin(sha512, SHA512_LEN)
bip340_tagged_hash = _wrap_bin(bip340_tagged_hash, SHA256_LEN)
ripemd160 = _wrap_bin(ripemd160, RIPEMD160_LEN)
hash160 = _wrap_bin(hash160, HASH160_LEN)
hmac_sha256 = _wrap_bin(hmac_sha256, HMAC_SHA256_LEN)
hmac_sha512 = _wrap_bin(hmac_sha512, HMAC_SHA512_LEN)
pbkdf2_hmac_sha256 = _wrap_bin(pbkdf2_hmac_sha256, PBKDF2_HMAC_SHA256_LEN)
pbkdf2_hmac_sha512 = _wrap_bin(pbkdf2_hmac_sha512, PBKDF2_HMAC_SHA512_LEN)
ec_public_key_from_private_key = _wrap_bin(ec_public_key_from_private_key, EC_PUBLIC_KEY_LEN)
ec_public_key_decompress = _wrap_bin(ec_public_key_decompress, EC_PUBLIC_KEY_UNCOMPRESSED_LEN)
ec_public_key_negate = _wrap_bin(ec_public_key_negate, EC_PUBLIC_KEY_LEN)
ec_sig_from_bytes = _wrap_bin(ec_sig_from_bytes, ec_sig_from_bytes_len)
ec_sig_normalize = _wrap_bin(ec_sig_normalize, EC_SIGNATURE_LEN)
ec_sig_to_der = _wrap_bin(ec_sig_to_der, EC_SIGNATURE_DER_MAX_LEN, resize=True)
ec_sig_from_der = _wrap_bin(ec_sig_from_der, EC_SIGNATURE_LEN)
ec_sig_to_public_key = _wrap_bin(ec_sig_to_public_key, EC_PUBLIC_KEY_LEN)
ec_scalar_add = _wrap_bin(ec_scalar_add, EC_SCALAR_LEN)
ec_scalar_subtract = _wrap_bin(ec_scalar_subtract, EC_SCALAR_LEN)
ec_scalar_multiply = _wrap_bin(ec_scalar_multiply, EC_SCALAR_LEN)
format_bitcoin_message = _wrap_bin(format_bitcoin_message, format_bitcoin_message_len, resize=True)
ecdh = _wrap_bin(ecdh, SHA256_LEN)
addr_segwit_to_bytes = _wrap_bin(addr_segwit_to_bytes, WALLY_SEGWIT_ADDRESS_PUBKEY_MAX_LEN, resize=True)
addr_segwit_n_to_bytes = _wrap_bin(addr_segwit_n_to_bytes, WALLY_SEGWIT_ADDRESS_PUBKEY_MAX_LEN, resize=True)
address_to_scriptpubkey = _wrap_bin(address_to_scriptpubkey, WALLY_ADDRESS_PUBKEY_MAX_LEN, resize=True)
wif_to_bytes = _wrap_bin(wif_to_bytes, EC_PRIVATE_KEY_LEN)
wif_to_public_key = _wrap_bin(wif_to_public_key, wif_to_public_key_len)
bip32_key_init = bip32_key_init_alloc
bip32_key_from_seed_custom = bip32_key_from_seed_custom_alloc
bip32_key_from_seed = bip32_key_from_seed_alloc
bip32_key_serialize = _wrap_bin(bip32_key_serialize, BIP32_SERIALIZED_LEN)
bip32_key_unserialize = bip32_key_unserialize_alloc
bip32_key_from_parent = bip32_key_from_parent_alloc
bip32_key_from_parent_path = bip32_key_from_parent_path_alloc
bip32_key_from_parent_path_str = bip32_key_from_parent_path_str_alloc
bip32_key_from_parent_path_str_n = bip32_key_from_parent_path_str_n_alloc
bip32_key_from_base58 = bip32_key_from_base58_alloc
bip32_key_from_base58_n = bip32_key_from_base58_n_alloc
bip32_key_get_fingerprint = _wrap_bin(bip32_key_get_fingerprint, BIP32_KEY_FINGERPRINT_LEN)
bip38_raw_from_private_key = _wrap_bin(bip38_raw_from_private_key, BIP38_SERIALIZED_LEN)
bip38_raw_to_private_key = _wrap_bin(bip38_raw_to_private_key, EC_PRIVATE_KEY_LEN)
bip38_to_private_key = _wrap_bin(bip38_to_private_key, EC_PRIVATE_KEY_LEN)
bip39_mnemonic_to_bytes = _wrap_bin(bip39_mnemonic_to_bytes, BIP39_ENTROPY_MAX_LEN, resize=True)
bip39_mnemonic_to_seed512 = _wrap_bin(bip39_mnemonic_to_seed512, BIP39_SEED_LEN_512)
map_init = map_init_alloc
map_get_item_key = _wrap_bin(map_get_item_key, map_get_item_key_length)
map_get_item = _wrap_bin(map_get_item, map_get_item_length)
map_keypath_get_bip32_key_from = map_keypath_get_bip32_key_from_alloc
map_keypath_bip32_init = map_keypath_bip32_init_alloc
map_keypath_public_key_init = map_keypath_public_key_init_alloc
keypath_get_fingerprint = _wrap_bin(keypath_get_fingerprint, BIP32_KEY_FINGERPRINT_LEN)
map_keypath_get_item_fingerprint = _wrap_bin(map_keypath_get_item_fingerprint, BIP32_KEY_FINGERPRINT_LEN)
keypath_get_path = _wrap_int_array(keypath_get_path, keypath_get_path_len)
map_keypath_get_item_path = _wrap_int_array(map_keypath_get_item_path, map_keypath_get_item_path_len)
map_preimage_init = map_preimage_init_alloc
scriptpubkey_p2pkh_from_bytes = _wrap_bin(scriptpubkey_p2pkh_from_bytes, WALLY_SCRIPTPUBKEY_P2PKH_LEN, resize=True)
scriptsig_p2pkh_from_sig = _wrap_bin(scriptsig_p2pkh_from_sig, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)
scriptsig_p2pkh_from_der = _wrap_bin(scriptsig_p2pkh_from_der, WALLY_SCRIPTSIG_P2PKH_MAX_LEN, resize=True)
scriptpubkey_op_return_from_bytes = _wrap_bin(scriptpubkey_op_return_from_bytes, WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN, resize=True)
scriptpubkey_p2sh_from_bytes = _wrap_bin(scriptpubkey_p2sh_from_bytes, WALLY_SCRIPTPUBKEY_P2SH_LEN, resize=True)
scriptpubkey_multisig_from_bytes = _wrap_bin(scriptpubkey_multisig_from_bytes, scriptpubkey_multisig_from_bytes_len, resize=True)
scriptsig_multisig_from_bytes = _wrap_bin(scriptsig_multisig_from_bytes, scriptsig_multisig_from_bytes_len, resize=True)
scriptpubkey_csv_2of2_then_1_from_bytes = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes, scriptpubkey_csv_2of2_then_1_from_bytes_len, resize=True)
scriptpubkey_csv_2of2_then_1_from_bytes_opt = _wrap_bin(scriptpubkey_csv_2of2_then_1_from_bytes_opt, scriptpubkey_csv_2of2_then_1_from_bytes_opt_len, resize=True)
scriptpubkey_csv_2of3_then_2_from_bytes = _wrap_bin(scriptpubkey_csv_2of3_then_2_from_bytes, scriptpubkey_csv_2of3_then_2_from_bytes_len, resize=True)
script_push_from_bytes = _wrap_bin(script_push_from_bytes, script_push_from_bytes_len, resize=True)
varint_to_bytes = _wrap_bin(varint_to_bytes, varint_get_length)
varbuff_to_bytes = _wrap_bin(varbuff_to_bytes, varbuff_get_length)
witness_program_from_bytes = _wrap_bin(witness_program_from_bytes, WALLY_WITNESSSCRIPT_MAX_LEN, resize=True)
witness_program_from_bytes_and_version = _wrap_bin(witness_program_from_bytes_and_version, WALLY_WITNESSSCRIPT_MAX_LEN, resize=True)
psbt_init = psbt_init_alloc
psbt_get_id = _wrap_bin(psbt_get_id, WALLY_TXHASH_LEN)
psbt_get_input_bip32_key_from = psbt_get_input_bip32_key_from_alloc
psbt_get_input_signing_script = _wrap_bin(psbt_get_input_signing_script, psbt_get_input_signing_script_len)
psbt_get_input_scriptcode = _wrap_bin(psbt_get_input_scriptcode, psbt_get_input_scriptcode_len)
psbt_get_input_signature_hash = _wrap_bin(psbt_get_input_signature_hash, SHA256_LEN)
psbt_to_bytes = _wrap_bin(psbt_to_bytes, psbt_get_length)
psbt_clone = psbt_clone_alloc
psbt_blind = psbt_blind_alloc
descriptor_to_script = _wrap_bin(descriptor_to_script, descriptor_to_script_get_maximum_length, resize=True)
symmetric_key_from_seed = _wrap_bin(symmetric_key_from_seed, HMAC_SHA512_LEN)
symmetric_key_from_parent = _wrap_bin(symmetric_key_from_parent, HMAC_SHA512_LEN)
tx_witness_stack_init = tx_witness_stack_init_alloc
tx_witness_stack_clone = tx_witness_stack_clone_alloc
tx_input_init = tx_input_init_alloc
tx_output_init = tx_output_init_alloc
tx_output_clone = tx_output_clone_alloc
tx_init = tx_init_alloc
tx_clone = tx_clone_alloc
tx_get_txid = _wrap_bin(tx_get_txid, WALLY_TXHASH_LEN)
tx_to_bytes = _wrap_bin(tx_to_bytes, tx_get_length)
tx_get_btc_signature_hash = _wrap_bin(tx_get_btc_signature_hash, SHA256_LEN)
tx_get_btc_taproot_signature_hash = _wrap_bin(tx_get_btc_taproot_signature_hash, SHA256_LEN)
tx_get_signature_hash = _wrap_bin(tx_get_signature_hash, SHA256_LEN)
ae_host_commit_from_bytes = _wrap_bin(ae_host_commit_from_bytes, WALLY_HOST_COMMITMENT_LEN)
ae_signer_commit_from_bytes = _wrap_bin(ae_signer_commit_from_bytes, WALLY_S2C_OPENING_LEN)
ae_sig_from_bytes = _wrap_bin(ae_sig_from_bytes, EC_SIGNATURE_LEN)
bip32_key_get_chain_code = _wrap_bin(bip32_key_get_chain_code, WALLY_BIP32_CHAIN_CODE_LEN)
bip32_key_get_parent160 = _wrap_bin(bip32_key_get_parent160, HASH160_LEN)
bip32_key_get_priv_key = _wrap_bin(bip32_key_get_priv_key, EC_PRIVATE_KEY_LEN)
bip32_key_get_hash160 = _wrap_bin(bip32_key_get_hash160, HASH160_LEN)
bip32_key_get_pub_key = _wrap_bin(bip32_key_get_pub_key, EC_PUBLIC_KEY_LEN)
tx_input_get_txhash = _wrap_bin(tx_input_get_txhash, WALLY_TXHASH_LEN)
tx_input_get_script = _wrap_bin(tx_input_get_script, tx_input_get_script_len)
tx_input_get_witness = _wrap_bin(tx_input_get_witness, tx_input_get_witness_len)
tx_output_get_script = _wrap_bin(tx_output_get_script, tx_output_get_script_len)
tx_get_input_txhash = _wrap_bin(tx_get_input_txhash, WALLY_TXHASH_LEN)
tx_get_input_script = _wrap_bin(tx_get_input_script, tx_get_input_script_len)
tx_get_input_witness = _wrap_bin(tx_get_input_witness, tx_get_input_witness_len)
tx_get_output_script = _wrap_bin(tx_get_output_script, tx_get_output_script_len)
psbt_get_global_tx = psbt_get_global_tx_alloc
psbt_get_input_utxo = psbt_get_input_utxo_alloc
psbt_get_input_witness_utxo = psbt_get_input_witness_utxo_alloc
psbt_get_input_best_utxo = psbt_get_input_best_utxo_alloc
psbt_get_input_redeem_script = _wrap_bin(psbt_get_input_redeem_script, psbt_get_input_redeem_script_len)
psbt_get_input_witness_script = _wrap_bin(psbt_get_input_witness_script, psbt_get_input_witness_script_len)
psbt_get_input_final_scriptsig = _wrap_bin(psbt_get_input_final_scriptsig, psbt_get_input_final_scriptsig_len)
psbt_get_input_final_witness = psbt_get_input_final_witness_alloc
psbt_get_input_keypath = _wrap_bin(psbt_get_input_keypath, psbt_get_input_keypath_len)
psbt_get_input_signature = _wrap_bin(psbt_get_input_signature, psbt_get_input_signature_len)
psbt_get_input_unknown = _wrap_bin(psbt_get_input_unknown, psbt_get_input_unknown_len)
psbt_get_input_previous_txid = _wrap_bin(psbt_get_input_previous_txid, WALLY_TXHASH_LEN)
psbt_get_output_redeem_script = _wrap_bin(psbt_get_output_redeem_script, psbt_get_output_redeem_script_len)
psbt_get_output_witness_script = _wrap_bin(psbt_get_output_witness_script, psbt_get_output_witness_script_len)
psbt_get_output_keypath = _wrap_bin(psbt_get_output_keypath, psbt_get_output_keypath_len)
psbt_get_output_unknown = _wrap_bin(psbt_get_output_unknown, psbt_get_output_unknown_len)
psbt_get_output_script = _wrap_bin(psbt_get_output_script, psbt_get_output_script_len)
if is_elements_build():
    confidential_addr_to_ec_public_key = _wrap_bin(confidential_addr_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    confidential_addr_segwit_to_ec_public_key = _wrap_bin(confidential_addr_segwit_to_ec_public_key, EC_PUBLIC_KEY_LEN)
    bip32_key_with_tweak_from_parent_path = bip32_key_with_tweak_from_parent_path_alloc
    elements_pegout_script_from_bytes = _wrap_bin(elements_pegout_script_from_bytes, elements_pegout_script_from_bytes_len, resize=True)
    elements_pegin_contract_script_from_bytes = _wrap_bin(elements_pegin_contract_script_from_bytes, elements_pegin_contract_script_from_bytes_len, resize=True)
    psbt_input_get_amount_rangeproof = _wrap_bin(psbt_input_get_amount_rangeproof, psbt_input_get_amount_rangeproof_len)
    psbt_input_get_asset = _wrap_bin(psbt_input_get_asset, psbt_input_get_asset_len)
    psbt_input_get_asset_surjectionproof = _wrap_bin(psbt_input_get_asset_surjectionproof, psbt_input_get_asset_surjectionproof_len)
    psbt_input_get_pegin_txout_proof = _wrap_bin(psbt_input_get_pegin_txout_proof, psbt_input_get_pegin_txout_proof_len)
    psbt_input_get_pegin_genesis_blockhash = _wrap_bin(psbt_input_get_pegin_genesis_blockhash, psbt_input_get_pegin_genesis_blockhash_len)
    psbt_input_get_pegin_claim_script = _wrap_bin(psbt_input_get_pegin_claim_script, psbt_input_get_pegin_claim_script_len)
    psbt_input_get_issuance_amount_commitment = _wrap_bin(psbt_input_get_issuance_amount_commitment, psbt_input_get_issuance_amount_commitment_len)
    psbt_input_get_issuance_amount_rangeproof = _wrap_bin(psbt_input_get_issuance_amount_rangeproof, psbt_input_get_issuance_amount_rangeproof_len)
    psbt_input_get_issuance_blinding_nonce = _wrap_bin(psbt_input_get_issuance_blinding_nonce, psbt_input_get_issuance_blinding_nonce_len)
    psbt_input_get_issuance_asset_entropy = _wrap_bin(psbt_input_get_issuance_asset_entropy, psbt_input_get_issuance_asset_entropy_len)
    psbt_input_get_issuance_amount_blinding_rangeproof = _wrap_bin(psbt_input_get_issuance_amount_blinding_rangeproof, psbt_input_get_issuance_amount_blinding_rangeproof_len)
    psbt_input_get_inflation_keys_commitment = _wrap_bin(psbt_input_get_inflation_keys_commitment, psbt_input_get_inflation_keys_commitment_len)
    psbt_input_get_inflation_keys_rangeproof = _wrap_bin(psbt_input_get_inflation_keys_rangeproof, psbt_input_get_inflation_keys_rangeproof_len)
    psbt_input_get_inflation_keys_blinding_rangeproof = _wrap_bin(psbt_input_get_inflation_keys_blinding_rangeproof, psbt_input_get_inflation_keys_blinding_rangeproof_len)
    psbt_input_get_utxo_rangeproof = _wrap_bin(psbt_input_get_utxo_rangeproof, psbt_input_get_utxo_rangeproof_len)
    psbt_output_get_value_commitment = _wrap_bin(psbt_output_get_value_commitment, psbt_output_get_value_commitment_len)
    psbt_output_get_asset = _wrap_bin(psbt_output_get_asset, psbt_output_get_asset_len)
    psbt_output_get_asset_commitment = _wrap_bin(psbt_output_get_asset_commitment, psbt_output_get_asset_commitment_len)
    psbt_output_get_value_rangeproof = _wrap_bin(psbt_output_get_value_rangeproof, psbt_output_get_value_rangeproof_len)
    psbt_output_get_asset_surjectionproof = _wrap_bin(psbt_output_get_asset_surjectionproof, psbt_output_get_asset_surjectionproof_len)
    psbt_output_get_blinding_public_key = _wrap_bin(psbt_output_get_blinding_public_key, psbt_output_get_blinding_public_key_len)
    psbt_output_get_ecdh_public_key = _wrap_bin(psbt_output_get_ecdh_public_key, psbt_output_get_ecdh_public_key_len)
    psbt_output_get_value_blinding_rangeproof = _wrap_bin(psbt_output_get_value_blinding_rangeproof, psbt_output_get_value_blinding_rangeproof_len)
    psbt_output_get_asset_blinding_surjectionproof = _wrap_bin(psbt_output_get_asset_blinding_surjectionproof, psbt_output_get_asset_blinding_surjectionproof_len)
    tx_elements_input_init = tx_elements_input_init_alloc
    tx_elements_output_init = tx_elements_output_init_alloc
    tx_confidential_value_from_satoshi = _wrap_bin(tx_confidential_value_from_satoshi, WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN)
    tx_get_elements_signature_hash = _wrap_bin(tx_get_elements_signature_hash, SHA256_LEN)
    tx_elements_issuance_generate_entropy = _wrap_bin(tx_elements_issuance_generate_entropy, SHA256_LEN)
    tx_elements_issuance_calculate_asset = _wrap_bin(tx_elements_issuance_calculate_asset, SHA256_LEN)
    tx_elements_issuance_calculate_reissuance_token = _wrap_bin(tx_elements_issuance_calculate_reissuance_token, SHA256_LEN)
    asset_generator_from_bytes = _wrap_bin(asset_generator_from_bytes, ASSET_GENERATOR_LEN)
    ecdh_nonce_hash = _wrap_bin(ecdh_nonce_hash, SHA256_LEN)
    asset_final_vbf = _wrap_bin(asset_final_vbf, BLINDING_FACTOR_LEN)
    asset_scalar_offset = _wrap_bin(asset_scalar_offset, EC_SCALAR_LEN)
    asset_value_commitment = _wrap_bin(asset_value_commitment, ASSET_COMMITMENT_LEN)
    asset_rangeproof_with_nonce = _wrap_bin(asset_rangeproof_with_nonce, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    asset_rangeproof = _wrap_bin(asset_rangeproof, ASSET_RANGEPROOF_MAX_LEN, resize=True)
    explicit_rangeproof = _wrap_bin(explicit_rangeproof, ASSET_EXPLICIT_RANGEPROOF_MAX_LEN, resize=True)
    asset_surjectionproof = _wrap_bin(asset_surjectionproof, asset_surjectionproof_len)
    explicit_surjectionproof = _wrap_bin(explicit_surjectionproof, ASSET_EXPLICIT_SURJECTIONPROOF_LEN)
    asset_blinding_key_from_seed = _wrap_bin(asset_blinding_key_from_seed, HMAC_SHA512_LEN)
    asset_blinding_key_to_ec_private_key = _wrap_bin(asset_blinding_key_to_ec_private_key, EC_PRIVATE_KEY_LEN)
    asset_pak_whitelistproof = _wrap_bin(asset_pak_whitelistproof, asset_pak_whitelistproof_len)
    bip32_key_get_pub_key_tweak_sum = _wrap_bin(bip32_key_get_pub_key_tweak_sum, WALLY_BIP32_TWEAK_SUM_LEN)
    tx_input_get_blinding_nonce = _wrap_bin(tx_input_get_blinding_nonce, SHA256_LEN)
    tx_input_get_entropy = _wrap_bin(tx_input_get_entropy, SHA256_LEN)
    tx_input_get_issuance_amount = _wrap_bin(tx_input_get_issuance_amount, tx_input_get_issuance_amount_len)
    tx_input_get_inflation_keys = _wrap_bin(tx_input_get_inflation_keys, tx_input_get_inflation_keys_len)
    tx_input_get_issuance_amount_rangeproof = _wrap_bin(tx_input_get_issuance_amount_rangeproof, tx_input_get_issuance_amount_rangeproof_len)
    tx_input_get_inflation_keys_rangeproof = _wrap_bin(tx_input_get_inflation_keys_rangeproof, tx_input_get_inflation_keys_rangeproof_len)
    tx_output_get_asset = _wrap_bin(tx_output_get_asset, tx_output_get_asset_len)
    tx_output_get_value = _wrap_bin(tx_output_get_value, tx_output_get_value_len)
    tx_output_get_nonce = _wrap_bin(tx_output_get_nonce, tx_output_get_nonce_len)
    tx_output_get_surjectionproof = _wrap_bin(tx_output_get_surjectionproof, tx_output_get_surjectionproof_len)
    tx_output_get_rangeproof = _wrap_bin(tx_output_get_rangeproof, tx_output_get_rangeproof_len)
    tx_get_input_blinding_nonce = _wrap_bin(tx_get_input_blinding_nonce, SHA256_LEN)
    tx_get_input_entropy = _wrap_bin(tx_get_input_entropy, SHA256_LEN)
    tx_get_input_issuance_amount = _wrap_bin(tx_get_input_issuance_amount, tx_get_input_issuance_amount_len)
    tx_get_input_inflation_keys = _wrap_bin(tx_get_input_inflation_keys, tx_get_input_inflation_keys_len)
    tx_get_input_issuance_amount_rangeproof = _wrap_bin(tx_get_input_issuance_amount_rangeproof, tx_get_input_issuance_amount_rangeproof_len)
    tx_get_input_inflation_keys_rangeproof = _wrap_bin(tx_get_input_inflation_keys_rangeproof, tx_get_input_inflation_keys_rangeproof_len)
    tx_get_output_asset = _wrap_bin(tx_get_output_asset, WALLY_TX_ASSET_CT_ASSET_LEN)
    tx_get_output_value = _wrap_bin(tx_get_output_value, tx_get_output_value_len)
    tx_get_output_nonce = _wrap_bin(tx_get_output_nonce, WALLY_TX_ASSET_CT_NONCE_LEN)
    tx_get_output_surjectionproof = _wrap_bin(tx_get_output_surjectionproof, tx_get_output_surjectionproof_len)
    tx_get_output_rangeproof = _wrap_bin(tx_get_output_rangeproof, tx_get_output_rangeproof_len)
    psbt_get_global_scalar = _wrap_bin(psbt_get_global_scalar, WALLY_SCALAR_OFFSET_LEN)
    psbt_get_input_amount_rangeproof = _wrap_bin(psbt_get_input_amount_rangeproof, psbt_get_input_amount_rangeproof_len)
    psbt_get_input_asset = _wrap_bin(psbt_get_input_asset, psbt_get_input_asset_len)
    psbt_get_input_asset_surjectionproof = _wrap_bin(psbt_get_input_asset_surjectionproof, psbt_get_input_asset_surjectionproof_len)
    psbt_get_input_pegin_txout_proof = _wrap_bin(psbt_get_input_pegin_txout_proof, psbt_get_input_pegin_txout_proof_len)
    psbt_get_input_pegin_genesis_blockhash = _wrap_bin(psbt_get_input_pegin_genesis_blockhash, psbt_get_input_pegin_genesis_blockhash_len)
    psbt_get_input_pegin_claim_script = _wrap_bin(psbt_get_input_pegin_claim_script, psbt_get_input_pegin_claim_script_len)
    psbt_get_input_issuance_amount_commitment = _wrap_bin(psbt_get_input_issuance_amount_commitment, psbt_get_input_issuance_amount_commitment_len)
    psbt_get_input_issuance_amount_rangeproof = _wrap_bin(psbt_get_input_issuance_amount_rangeproof, psbt_get_input_issuance_amount_rangeproof_len)
    psbt_get_input_issuance_blinding_nonce = _wrap_bin(psbt_get_input_issuance_blinding_nonce, psbt_get_input_issuance_blinding_nonce_len)
    psbt_get_input_issuance_asset_entropy = _wrap_bin(psbt_get_input_issuance_asset_entropy, psbt_get_input_issuance_asset_entropy_len)
    psbt_get_input_issuance_amount_blinding_rangeproof = _wrap_bin(psbt_get_input_issuance_amount_blinding_rangeproof, psbt_get_input_issuance_amount_blinding_rangeproof_len)
    psbt_get_input_inflation_keys_commitment = _wrap_bin(psbt_get_input_inflation_keys_commitment, psbt_get_input_inflation_keys_commitment_len)
    psbt_get_input_inflation_keys_rangeproof = _wrap_bin(psbt_get_input_inflation_keys_rangeproof, psbt_get_input_inflation_keys_rangeproof_len)
    psbt_get_input_inflation_keys_blinding_rangeproof = _wrap_bin(psbt_get_input_inflation_keys_blinding_rangeproof, psbt_get_input_inflation_keys_blinding_rangeproof_len)
    psbt_get_input_utxo_rangeproof = _wrap_bin(psbt_get_input_utxo_rangeproof, psbt_get_input_utxo_rangeproof_len)
    psbt_get_output_value_commitment = _wrap_bin(psbt_get_output_value_commitment, psbt_get_output_value_commitment_len)
    psbt_get_output_asset = _wrap_bin(psbt_get_output_asset, psbt_get_output_asset_len)
    psbt_get_output_asset_commitment = _wrap_bin(psbt_get_output_asset_commitment, psbt_get_output_asset_commitment_len)
    psbt_get_output_value_rangeproof = _wrap_bin(psbt_get_output_value_rangeproof, psbt_get_output_value_rangeproof_len)
    psbt_get_output_asset_surjectionproof = _wrap_bin(psbt_get_output_asset_surjectionproof, psbt_get_output_asset_surjectionproof_len)
    psbt_get_output_blinding_public_key = _wrap_bin(psbt_get_output_blinding_public_key, psbt_get_output_blinding_public_key_len)
    psbt_get_output_ecdh_public_key = _wrap_bin(psbt_get_output_ecdh_public_key, psbt_get_output_ecdh_public_key_len)
    psbt_get_output_value_blinding_rangeproof = _wrap_bin(psbt_get_output_value_blinding_rangeproof, psbt_get_output_value_blinding_rangeproof_len)
    psbt_get_output_asset_blinding_surjectionproof = _wrap_bin(psbt_get_output_asset_blinding_surjectionproof, psbt_get_output_asset_blinding_surjectionproof_len)
# END AUTOGENERATED

# Manual wrappers for multi-valued buffer returns
def _s2c_sig_from_bytes_fn(fn):
    def wrapped(*args):
        buffers = [bytearray(WALLY_S2C_OPENING_LEN), bytearray(EC_SIGNATURE_LEN)]
        fn(*list(args) + buffers)
        return buffers[0], buffers[1]
    return wrapped
s2c_sig_from_bytes = _s2c_sig_from_bytes_fn(s2c_sig_from_bytes)

if is_elements_build():
    tx_elements_input_init = _wrap_with_defaults(tx_elements_input_init, 4, 12, None)
    tx_elements_output_init = _wrap_with_defaults(tx_elements_output_init, 3, 6, None)

    def _asset_unblind_fn(fn):
        def wrapped(*args):
            buffers = [bytearray(ASSET_TAG_LEN) for _ in range(3)]
            ret = fn(*list(args) + buffers)
            return ret, buffers[0], buffers[1], buffers[2]
        return wrapped
    asset_unblind_with_nonce = _asset_unblind_fn(asset_unblind_with_nonce)
    asset_unblind = _asset_unblind_fn(asset_unblind)

# Convenience helpers
def base58check_from_bytes(buf):
    return base58_from_bytes(buf, BASE58_FLAG_CHECKSUM)

def base58check_to_bytes(base58):
    return base58_to_bytes(base58, BASE58_FLAG_CHECKSUM)

def tx_witness_stack_create(witnesses):
    """ Create a witness stack from a list of witness programs """
    witness_stack = tx_witness_stack_init(len(witnesses))
    for witness_script in witnesses:
        tx_witness_stack_add(witness_stack, witness_script)
    return witness_stack

def map_to_dict(m):
    """ Create a Python dict from a wally_map """
    ret, i, n = dict(), 0, map_get_num_items(m)
    while i < n:
        key_len = map_get_item_key_length(m, i)
        if key_len:
            key = bytes(map_get_item_key(m, i))
        else:
            key = map_get_item_integer_key(m, i)
        ret[key] = map_get_item(m, i)
        i += 1
    return ret

def map_from_dict(d):
    """ Create a wally_map from a Python dict """
    ret = map_init(len(d), None)
    for k, v in d.items():
        fn = map_add_integer if type(k) is int else map_add
        fn(ret, k, v)
    return ret

# Backwards compatibility for ABI changes
psbt_from_bytes = _wrap_with_defaults(psbt_from_bytes, 1, 2, 0)
psbt_from_base64 = _wrap_with_defaults(psbt_from_base64, 1, 2, 0)
psbt_extract = _wrap_with_defaults(psbt_extract, 1, 2, 0)
