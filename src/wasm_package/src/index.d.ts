export * from './const'
export * from './core'

// Private opaque types used for TS functions signatures. These are not
// actually constructable in the JS runtime.
declare const OPAQUE_TAG: unique symbol;
type OpaqueRef<S> = number & { readonly [OPAQUE_TAG]: S};

export type Ref = OpaqueRef<'unknown'> | null;
export type Ref_words = OpaqueRef<'words'> | null;
export type Ref_ext_key = OpaqueRef<'ext_key'> | null; // TODO check whether this is nullable anywhere in the C interface
export type Ref_wally_map = OpaqueRef<'wally_map'> | null;
export type Ref_wally_psbt = OpaqueRef<'wally_psbt'>;
export type Ref_wally_psbt_input = OpaqueRef<'wally_psbt_input'>;
export type Ref_wally_psbt_output = OpaqueRef<'wally_psbt_output'>;
export type Ref_wally_tx = OpaqueRef<'wally_tx'>;
export type Ref_wally_tx_input = OpaqueRef<'wally_tx_input'>;
export type Ref_wally_tx_output = OpaqueRef<'wally_tx_output'>;
export type Ref_wally_tx_witness_stack = OpaqueRef<'wally_tx_witness_stack'> | null;
export type Ref_wally_operations = OpaqueRef<'operations'>;

// BEGIN AUTOGENERATED
export function addr_segwit_from_bytes(bytes: Buffer|Uint8Array, addr_family: string, flags: number): string;
export function addr_segwit_get_version(addr: string, addr_family: string, flags: number): number;
export function addr_segwit_n_get_version(addr: string, addr_len: number, addr_family: string, addr_family_len: number, flags: number): number;
export function addr_segwit_n_to_bytes(addr: string, addr_len: number, addr_family: string, addr_family_len: number, flags: number): Buffer;
export function addr_segwit_to_bytes(addr: string, addr_family: string, flags: number): Buffer;
export function address_to_scriptpubkey(addr: string, network: number): Buffer;
export function ae_host_commit_from_bytes(entropy: Buffer|Uint8Array, flags: number): Buffer;
export function ae_sig_from_bytes(priv_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, entropy: Buffer|Uint8Array, flags: number): Buffer;
export function ae_signer_commit_from_bytes(priv_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, commitment: Buffer|Uint8Array, flags: number): Buffer;
export function ae_verify(pub_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, entropy: Buffer|Uint8Array, s2c_opening: Buffer|Uint8Array, flags: number, sig: Buffer|Uint8Array): void;
export function aes(key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, flags: number): Buffer;
export function aes_cbc(key: Buffer|Uint8Array, iv: Buffer|Uint8Array, bytes: Buffer|Uint8Array, flags: number): Buffer;
export function asset_blinding_key_from_seed(bytes: Buffer|Uint8Array): Buffer;
export function asset_blinding_key_to_abf(bytes: Buffer|Uint8Array, hash_prevouts: Buffer|Uint8Array, output_index: number): Buffer;
export function asset_blinding_key_to_abf_vbf(bytes: Buffer|Uint8Array, hash_prevouts: Buffer|Uint8Array, output_index: number): Buffer;
export function asset_blinding_key_to_ec_private_key(bytes: Buffer|Uint8Array, script: Buffer|Uint8Array): Buffer;
export function asset_blinding_key_to_vbf(bytes: Buffer|Uint8Array, hash_prevouts: Buffer|Uint8Array, output_index: number): Buffer;
export function asset_final_vbf(values: BigUint64Array|Array<bigint>, num_inputs: number, abf: Buffer|Uint8Array, vbf: Buffer|Uint8Array): Buffer;
export function asset_generator_from_bytes(asset: Buffer|Uint8Array, abf: Buffer|Uint8Array): Buffer;
export function asset_pak_whitelistproof_len(online_keys: Buffer|Uint8Array, offline_keys: Buffer|Uint8Array, key_index: number, sub_pubkey: Buffer|Uint8Array, online_priv_key: Buffer|Uint8Array, summed_key: Buffer|Uint8Array): number;
export function asset_pak_whitelistproof_size(num_keys: number): number;
export function asset_rangeproof(value: bigint, pub_key: Buffer|Uint8Array, priv_key: Buffer|Uint8Array, asset: Buffer|Uint8Array, abf: Buffer|Uint8Array, vbf: Buffer|Uint8Array, commitment: Buffer|Uint8Array, extra: Buffer|Uint8Array, generator: Buffer|Uint8Array, min_value: bigint, exp: number, min_bits: number): Buffer;
export function asset_rangeproof_get_maximum_len(value: bigint, min_bits: number): number;
export function asset_rangeproof_with_nonce(value: bigint, nonce_hash: Buffer|Uint8Array, asset: Buffer|Uint8Array, abf: Buffer|Uint8Array, vbf: Buffer|Uint8Array, commitment: Buffer|Uint8Array, extra: Buffer|Uint8Array, generator: Buffer|Uint8Array, min_value: bigint, exp: number, min_bits: number): Buffer;
export function asset_scalar_offset(value: bigint, abf: Buffer|Uint8Array, vbf: Buffer|Uint8Array): Buffer;
export function asset_surjectionproof_len(output_asset: Buffer|Uint8Array, output_abf: Buffer|Uint8Array, output_generator: Buffer|Uint8Array, bytes: Buffer|Uint8Array, asset: Buffer|Uint8Array, abf: Buffer|Uint8Array, generator: Buffer|Uint8Array): number;
export function asset_surjectionproof_size(num_inputs: number): number;
export function asset_unblind(pub_key: Buffer|Uint8Array, priv_key: Buffer|Uint8Array, proof: Buffer|Uint8Array, commitment: Buffer|Uint8Array, extra: Buffer|Uint8Array, generator: Buffer|Uint8Array): [asset_out: Buffer, abf_out: Buffer, vbf_out: Buffer, value_out: bigint];
export function asset_unblind_with_nonce(nonce_hash: Buffer|Uint8Array, proof: Buffer|Uint8Array, commitment: Buffer|Uint8Array, extra: Buffer|Uint8Array, generator: Buffer|Uint8Array): [asset_out: Buffer, abf_out: Buffer, vbf_out: Buffer, value_out: bigint];
export function asset_value_commitment(value: bigint, vbf: Buffer|Uint8Array, generator: Buffer|Uint8Array): Buffer;
export function base58_from_bytes(bytes: Buffer|Uint8Array, flags: number): string;
export function base58_get_length(str_in: string): number;
export function base58_n_get_length(str_in: string, str_len: number): number;
export function base64_from_bytes(bytes: Buffer|Uint8Array, flags: number): string;
export function base64_get_maximum_length(str_in: string, flags: number): number;
export function bip32_key_free(hdkey: Ref_ext_key): void;
export function bip32_key_from_base58(base58: string): Ref_ext_key;
export function bip32_key_from_base58_n(base58: string, base58_len: number): Ref_ext_key;
export function bip32_key_from_base58_n_noalloc(base58: string, base58_len: number, output: Ref_ext_key): void;
export function bip32_key_from_base58_noalloc(base58: string, output: Ref_ext_key): void;
export function bip32_key_from_parent(hdkey: Ref_ext_key, child_num: number, flags: number): Ref_ext_key;
export function bip32_key_from_parent_noalloc(hdkey: Ref_ext_key, child_num: number, flags: number, output: Ref_ext_key): void;
export function bip32_key_from_parent_path(hdkey: Ref_ext_key, child_path: Uint32Array|number[], flags: number): Ref_ext_key;
export function bip32_key_from_parent_path_noalloc(hdkey: Ref_ext_key, child_path: Uint32Array|number[], flags: number, output: Ref_ext_key): void;
export function bip32_key_from_parent_path_str(hdkey: Ref_ext_key, path_str: string, child_num: number, flags: number): Ref_ext_key;
export function bip32_key_from_parent_path_str_n(hdkey: Ref_ext_key, path_str: string, path_str_len: number, child_num: number, flags: number): Ref_ext_key;
export function bip32_key_from_parent_path_str_n_noalloc(hdkey: Ref_ext_key, path_str: string, path_str_len: number, child_num: number, flags: number, output: Ref_ext_key): void;
export function bip32_key_from_parent_path_str_noalloc(hdkey: Ref_ext_key, path_str: string, child_num: number, flags: number, output: Ref_ext_key): void;
export function bip32_key_from_seed(bytes: Buffer|Uint8Array, version: number, flags: number): Ref_ext_key;
export function bip32_key_from_seed_custom(bytes: Buffer|Uint8Array, version: number, hmac_key: Buffer|Uint8Array, flags: number): Ref_ext_key;
export function bip32_key_from_seed_custom_noalloc(bytes: Buffer|Uint8Array, version: number, hmac_key: Buffer|Uint8Array, flags: number, output: Ref_ext_key): void;
export function bip32_key_from_seed_noalloc(bytes: Buffer|Uint8Array, version: number, flags: number, output: Ref_ext_key): void;
export function bip32_key_get_chain_code(hdkey: Ref_ext_key): Buffer;
export function bip32_key_get_child_num(hdkey: Ref_ext_key): number;
export function bip32_key_get_depth(hdkey: Ref_ext_key): number;
export function bip32_key_get_fingerprint(hdkey: Ref_ext_key): Buffer;
export function bip32_key_get_hash160(hdkey: Ref_ext_key): Buffer;
export function bip32_key_get_parent160(hdkey: Ref_ext_key): Buffer;
export function bip32_key_get_priv_key(hdkey: Ref_ext_key): Buffer;
export function bip32_key_get_pub_key(hdkey: Ref_ext_key): Buffer;
export function bip32_key_get_pub_key_tweak_sum(hdkey: Ref_ext_key): Buffer;
export function bip32_key_get_version(hdkey: Ref_ext_key): number;
export function bip32_key_init(version: number, depth: number, child_num: number, chain_code: Buffer|Uint8Array, pub_key: Buffer|Uint8Array, priv_key: Buffer|Uint8Array, hash160: Buffer|Uint8Array, parent160: Buffer|Uint8Array): Ref_ext_key;
export function bip32_key_init_noalloc(version: number, depth: number, child_num: number, chain_code: Buffer|Uint8Array, pub_key: Buffer|Uint8Array, priv_key: Buffer|Uint8Array, hash160: Buffer|Uint8Array, parent160: Buffer|Uint8Array, output: Ref_ext_key): void;
export function bip32_key_serialize(hdkey: Ref_ext_key, flags: number): Buffer;
export function bip32_key_strip_private_key(hdkey: Ref_ext_key): void;
export function bip32_key_to_addr_segwit(hdkey: Ref_ext_key, addr_family: string, flags: number): string;
export function bip32_key_to_address(hdkey: Ref_ext_key, flags: number, version: number): string;
export function bip32_key_to_base58(hdkey: Ref_ext_key, flags: number): string;
export function bip32_key_unserialize(bytes: Buffer|Uint8Array): Ref_ext_key;
export function bip32_key_unserialize_noalloc(bytes: Buffer|Uint8Array, output: Ref_ext_key): void;
export function bip32_key_with_tweak_from_parent_path(hdkey: Ref_ext_key, child_path: Uint32Array|number[], flags: number): Ref_ext_key;
export function bip32_key_with_tweak_from_parent_path_noalloc(hdkey: Ref_ext_key, child_path: Uint32Array|number[], flags: number, output: Ref_ext_key): void;
export function bip32_path_from_str(path_str: string, child_num: number, multi_index: number, flags: number, child_path_out_len: number): [child_path_out: number, written: number];
export function bip32_path_from_str_n(path_str: string, path_str_len: number, child_num: number, multi_index: number, flags: number, child_path_out_len: number): [child_path_out: number, written: number];
export function bip32_path_str_get_features(path_str: string): number;
export function bip32_path_str_n_get_features(path_str: string, path_str_len: number): number;
export function bip340_tagged_hash(bytes: Buffer|Uint8Array, tag: string): Buffer;
export function bip38_get_flags(bip38: string): number;
export function bip38_raw_get_flags(bytes: Buffer|Uint8Array): number;
export function bip39_get_languages(): string;
export function bip39_get_word(w: Ref_words, index: number): string;
export function bip39_get_wordlist(lang: string): Ref_words;
export function bip39_mnemonic_from_bytes(w: Ref_words, bytes: Buffer|Uint8Array): string;
export function bip39_mnemonic_to_bytes(w: Ref_words, mnemonic: string): Buffer;
export function bip39_mnemonic_to_seed512(mnemonic: string, passphrase: string): Buffer;
export function bip39_mnemonic_validate(w: Ref_words, mnemonic: string): void;
export function bip85_get_bip39_entropy(hdkey: Ref_ext_key, lang: string, num_words: number, index: number): Buffer;
export function bip85_get_languages(): string;
export function bzero(bytes: Ref, bytes_len: number): void;
export function cleanup(flags: number): void;
export function coinselect_assets(values: BigUint64Array|Array<bigint>, target: bigint, attempts: bigint, io_ratio: number): Uint32Array;
export function confidential_addr_from_addr(address: string, prefix: number, pub_key: Buffer|Uint8Array): string;
export function confidential_addr_from_addr_segwit(address: string, addr_family: string, confidential_addr_family: string, pub_key: Buffer|Uint8Array): string;
export function confidential_addr_segwit_to_ec_public_key(address: string, confidential_addr_family: string): Buffer;
export function confidential_addr_to_addr(address: string, prefix: number): string;
export function confidential_addr_to_addr_segwit(address: string, confidential_addr_family: string, addr_family: string): string;
export function confidential_addr_to_ec_public_key(address: string, prefix: number): Buffer;
export function descriptor_canonicalize(descriptor: Ref_wally_descriptor, flags: number): string;
export function descriptor_free(descriptor: Ref_wally_descriptor): void;
export function descriptor_get_checksum(descriptor: Ref_wally_descriptor, flags: number): string;
export function descriptor_get_depth(descriptor: Ref_wally_descriptor): number;
export function descriptor_get_features(descriptor: Ref_wally_descriptor): number;
export function descriptor_get_network(descriptor: Ref_wally_descriptor): number;
export function descriptor_get_num_paths(descriptor: Ref_wally_descriptor): number;
export function descriptor_get_num_variants(descriptor: Ref_wally_descriptor): number;
export function descriptor_parse(descriptor: string, vars_in: Ref_wally_map, network: number, flags: number): Ref_wally_descriptor;
export function descriptor_set_network(descriptor: Ref_wally_descriptor, network: number): void;
export function descriptor_to_address(descriptor: Ref_wally_descriptor, variant: number, multi_index: number, child_num: number, flags: number): string;
export function descriptor_to_addresses(descriptor: Ref_wally_descriptor, variant: number, multi_index: number, child_num: number, flags: number, out_len: number): string;
export function descriptor_to_script_get_maximum_length(descriptor: Ref_wally_descriptor, depth: number, index: number, variant: number, multi_index: number, child_num: number, flags: number): number;
export function ec_private_key_bip341_tweak(priv_key: Buffer|Uint8Array, merkle_root: Buffer|Uint8Array, flags: number): Buffer;
export function ec_private_key_verify(priv_key: Buffer|Uint8Array): void;
export function ec_public_key_bip341_tweak(pub_key: Buffer|Uint8Array, merkle_root: Buffer|Uint8Array, flags: number): Buffer;
export function ec_public_key_decompress(pub_key: Buffer|Uint8Array): Buffer;
export function ec_public_key_from_private_key(priv_key: Buffer|Uint8Array): Buffer;
export function ec_public_key_negate(pub_key: Buffer|Uint8Array): Buffer;
export function ec_public_key_verify(pub_key: Buffer|Uint8Array): void;
export function ec_scalar_add(scalar: Buffer|Uint8Array, operand: Buffer|Uint8Array): Buffer;
export function ec_scalar_multiply(scalar: Buffer|Uint8Array, operand: Buffer|Uint8Array): Buffer;
export function ec_scalar_subtract(scalar: Buffer|Uint8Array, operand: Buffer|Uint8Array): Buffer;
export function ec_scalar_verify(scalar: Buffer|Uint8Array): void;
export function ec_sig_from_bytes_aux_len(priv_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, aux_rand: Buffer|Uint8Array, flags: number): number;
export function ec_sig_from_bytes_len(priv_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, flags: number): number;
export function ec_sig_from_der(bytes: Buffer|Uint8Array): Buffer;
export function ec_sig_normalize(sig: Buffer|Uint8Array): Buffer;
export function ec_sig_to_der(sig: Buffer|Uint8Array): Buffer;
export function ec_sig_to_public_key(bytes: Buffer|Uint8Array, sig: Buffer|Uint8Array): Buffer;
export function ec_sig_verify(pub_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, flags: number, sig: Buffer|Uint8Array): void;
export function ec_xonly_public_key_verify(pub_key: Buffer|Uint8Array): void;
export function ecdh(pub_key: Buffer|Uint8Array, priv_key: Buffer|Uint8Array): Buffer;
export function ecdh_nonce_hash(pub_key: Buffer|Uint8Array, priv_key: Buffer|Uint8Array): Buffer;
export function elements_pegin_contract_script_from_bytes(redeem_script: Buffer|Uint8Array, script: Buffer|Uint8Array, flags: number): Buffer;
export function elements_pegout_script_from_bytes(genesis_blockhash: Buffer|Uint8Array, mainchain_script: Buffer|Uint8Array, sub_pubkey: Buffer|Uint8Array, whitelistproof: Buffer|Uint8Array, flags: number): Buffer;
export function elements_pegout_script_size(genesis_blockhash_len: number, mainchain_script_len: number, sub_pubkey_len: number, whitelistproof_len: number): number;
export function explicit_rangeproof(value: bigint, nonce: Buffer|Uint8Array, vbf: Buffer|Uint8Array, commitment: Buffer|Uint8Array, generator: Buffer|Uint8Array): Buffer;
export function explicit_rangeproof_verify(rangeproof: Buffer|Uint8Array, value: bigint, commitment: Buffer|Uint8Array, generator: Buffer|Uint8Array): void;
export function explicit_surjectionproof(output_asset: Buffer|Uint8Array, output_abf: Buffer|Uint8Array, output_generator: Buffer|Uint8Array): Buffer;
export function explicit_surjectionproof_verify(surjectionproof: Buffer|Uint8Array, output_asset: Buffer|Uint8Array, output_generator: Buffer|Uint8Array): void;
export function format_bitcoin_message(bytes: Buffer|Uint8Array, flags: number): Buffer;
export function free_string(str: Ref): void;
export function get_hash_prevouts(txhashes: Buffer|Uint8Array, utxo_indices: Uint32Array|number[]): Buffer;
export function get_operations(output: Ref_wally_operations): void;
export function hash160(bytes: Buffer|Uint8Array): Buffer;
export function hex_from_bytes(bytes: Buffer|Uint8Array): string;
export function hex_n_to_bytes(hex: string, hex_len: number): Buffer;
export function hex_n_verify(hex: string, hex_len: number): void;
export function hex_to_bytes(hex: string): Buffer;
export function hex_verify(hex: string): void;
export function hmac_sha256(key: Buffer|Uint8Array, bytes: Buffer|Uint8Array): Buffer;
export function hmac_sha512(key: Buffer|Uint8Array, bytes: Buffer|Uint8Array): Buffer;
export function init(flags: number): void;
export function is_elements_build(): number;
export function keypath_bip32_verify(key: Buffer|Uint8Array, val: Buffer|Uint8Array): void;
export function keypath_get_fingerprint(val: Buffer|Uint8Array): Buffer;
export function keypath_get_path_len(val: Buffer|Uint8Array): number;
export function keypath_public_key_verify(key: Buffer|Uint8Array, val: Buffer|Uint8Array): void;
export function keypath_xonly_public_key_verify(key: Buffer|Uint8Array, val: Buffer|Uint8Array): void;
export function map_add(map_in: Ref_wally_map, key: Buffer|Uint8Array, value: Buffer|Uint8Array): void;
export function map_add_integer(map_in: Ref_wally_map, key: number, value: Buffer|Uint8Array): void;
export function map_assign(map_in: Ref_wally_map, source: Ref_wally_map): void;
export function map_clear(map_in: Ref_wally_map): void;
export function map_combine(map_in: Ref_wally_map, source: Ref_wally_map): void;
export function map_find(map_in: Ref_wally_map, key: Buffer|Uint8Array): number;
export function map_find_bip32_public_key_from(map_in: Ref_wally_map, index: number, hdkey: Ref_ext_key): number;
export function map_find_from(map_in: Ref_wally_map, index: number, key: Buffer|Uint8Array): number;
export function map_find_integer(map_in: Ref_wally_map, key: number): number;
export function map_free(map_in: Ref_wally_map): void;
export function map_get_item_integer_key(map_in: Ref_wally_map, index: number): number;
export function map_get_item_key_length(map_in: Ref_wally_map, index: number): number;
export function map_get_item_length(map_in: Ref_wally_map, index: number): number;
export function map_get_num_items(map_in: Ref_wally_map): number;
export function map_hash_preimage_verify(key: Buffer|Uint8Array, val: Buffer|Uint8Array): void;
export function map_init(allocation_len: number, verify_fn: Ref): Ref_wally_map;
export function map_init_noalloc(allocation_len: number, verify_fn: Ref, output: Ref_wally_map): void;
export function map_keypath_add(map_in: Ref_wally_map, pub_key: Buffer|Uint8Array, fingerprint: Buffer|Uint8Array, child_path: Uint32Array|number[]): void;
export function map_keypath_bip32_init(allocation_len: number): Ref_wally_map;
export function map_keypath_get_bip32_key_from(map_in: Ref_wally_map, index: number, hdkey: Ref_ext_key): Ref_ext_key;
export function map_keypath_get_item_fingerprint(map_in: Ref_wally_map, index: number): Buffer;
export function map_keypath_get_item_path_len(map_in: Ref_wally_map, index: number): number;
export function map_keypath_public_key_init(allocation_len: number): Ref_wally_map;
export function map_merkle_path_add(map_in: Ref_wally_map, pub_key: Buffer|Uint8Array, merkle_hashes: Buffer|Uint8Array): void;
export function map_preimage_hash160_add(map_in: Ref_wally_map, value: Buffer|Uint8Array): void;
export function map_preimage_init(allocation_len: number): Ref_wally_map;
export function map_preimage_ripemd160_add(map_in: Ref_wally_map, value: Buffer|Uint8Array): void;
export function map_preimage_sha256_add(map_in: Ref_wally_map, value: Buffer|Uint8Array): void;
export function map_preimage_sha256d_add(map_in: Ref_wally_map, value: Buffer|Uint8Array): void;
export function map_remove(map_in: Ref_wally_map, key: Buffer|Uint8Array): void;
export function map_remove_integer(map_in: Ref_wally_map, key: number): void;
export function map_replace(map_in: Ref_wally_map, key: Buffer|Uint8Array, value: Buffer|Uint8Array): void;
export function map_replace_integer(map_in: Ref_wally_map, key: number, value: Buffer|Uint8Array): void;
export function map_sort(map_in: Ref_wally_map, flags: number): void;
export function merkle_path_xonly_public_key_verify(key: Buffer|Uint8Array, val: Buffer|Uint8Array): void;
export function pbkdf2_hmac_sha256(pass: Buffer|Uint8Array, salt: Buffer|Uint8Array, flags: number, cost: number): Buffer;
export function pbkdf2_hmac_sha512(pass: Buffer|Uint8Array, salt: Buffer|Uint8Array, flags: number, cost: number): Buffer;
export function psbt_add_global_scalar(psbt: Ref_wally_psbt, scalar: Buffer|Uint8Array): void;
export function psbt_add_input_signature(psbt: Ref_wally_psbt, index: number, pub_key: Buffer|Uint8Array, sig: Buffer|Uint8Array): void;
export function psbt_add_input_taproot_keypath(psbt: Ref_wally_psbt, index: number, flags: number, pub_key: Buffer|Uint8Array, tapleaf_hashes: Buffer|Uint8Array, fingerprint: Buffer|Uint8Array, child_path: Uint32Array|number[]): void;
export function psbt_add_output_taproot_keypath(psbt: Ref_wally_psbt, index: number, flags: number, pub_key: Buffer|Uint8Array, tapleaf_hashes: Buffer|Uint8Array, fingerprint: Buffer|Uint8Array, child_path: Uint32Array|number[]): void;
export function psbt_add_tx_input_at(psbt: Ref_wally_psbt, index: number, flags: number, input: Ref_wally_tx_input): void;
export function psbt_add_tx_output_at(psbt: Ref_wally_psbt, index: number, flags: number, output: Ref_wally_tx_output): void;
export function psbt_blind(psbt: Ref_wally_psbt, values: Ref_wally_map, vbfs: Ref_wally_map, assets: Ref_wally_map, abfs: Ref_wally_map, entropy: Buffer|Uint8Array, output_index: number, flags: number): Ref_wally_map;
export function psbt_blind_noalloc(psbt: Ref_wally_psbt, values: Ref_wally_map, vbfs: Ref_wally_map, assets: Ref_wally_map, abfs: Ref_wally_map, entropy: Buffer|Uint8Array, output_index: number, flags: number, output: Ref_wally_map): void;
export function psbt_clear_fallback_locktime(psbt: Ref_wally_psbt): void;
export function psbt_clear_input_amount(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_amount_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_asset(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_asset_surjectionproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_inflation_keys_blinding_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_inflation_keys_commitment(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_inflation_keys_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_issuance_amount_blinding_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_issuance_amount_commitment(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_issuance_amount_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_issuance_asset_entropy(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_issuance_blinding_nonce(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_pegin_claim_script(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_pegin_genesis_blockhash(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_pegin_txout_proof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_required_lockheight(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_required_locktime(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_sequence(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_input_utxo_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_amount(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_asset(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_asset_blinding_surjectionproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_asset_commitment(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_asset_surjectionproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_blinder_index(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_blinding_public_key(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_ecdh_public_key(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_value_blinding_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_value_commitment(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clear_output_value_rangeproof(psbt: Ref_wally_psbt, index: number): void;
export function psbt_clone(psbt: Ref_wally_psbt, flags: number): Ref_wally_psbt;
export function psbt_combine(psbt: Ref_wally_psbt, source: Ref_wally_psbt): void;
export function psbt_extract(psbt: Ref_wally_psbt, flags: number): Ref_wally_tx;
export function psbt_finalize(psbt: Ref_wally_psbt, flags: number): void;
export function psbt_finalize_input(psbt: Ref_wally_psbt, index: number, flags: number): void;
export function psbt_find_global_scalar(psbt: Ref_wally_psbt, scalar: Buffer|Uint8Array): number;
export function psbt_find_input_keypath(psbt: Ref_wally_psbt, index: number, key: Buffer|Uint8Array): number;
export function psbt_find_input_signature(psbt: Ref_wally_psbt, index: number, pub_key: Buffer|Uint8Array): number;
export function psbt_find_input_unknown(psbt: Ref_wally_psbt, index: number, key: Buffer|Uint8Array): number;
export function psbt_find_output_keypath(psbt: Ref_wally_psbt, index: number, key: Buffer|Uint8Array): number;
export function psbt_find_output_unknown(psbt: Ref_wally_psbt, index: number, key: Buffer|Uint8Array): number;
export function psbt_free(psbt: Ref_wally_psbt): void;
export function psbt_from_base64(base64: string, flags: number): Ref_wally_psbt;
export function psbt_from_bytes(bytes: Buffer|Uint8Array, flags: number): Ref_wally_psbt;
export function psbt_generate_input_explicit_proofs(psbt: Ref_wally_psbt, index: number, satoshi: bigint, asset: Buffer|Uint8Array, abf: Buffer|Uint8Array, vbf: Buffer|Uint8Array, entropy: Buffer|Uint8Array): void;
export function psbt_get_fallback_locktime(psbt: Ref_wally_psbt): number;
export function psbt_get_global_scalar(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_global_scalars_size(psbt: Ref_wally_psbt): number;
export function psbt_get_global_tx(psbt: Ref_wally_psbt): Ref_wally_tx;
export function psbt_get_id(psbt: Ref_wally_psbt, flags: number): Buffer;
export function psbt_get_input_amount(psbt: Ref_wally_psbt, index: number): bigint;
export function psbt_get_input_amount_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_asset_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_asset_surjectionproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_best_utxo(psbt: Ref_wally_psbt, index: number): Ref_wally_tx_output;
export function psbt_get_input_bip32_key_from(psbt: Ref_wally_psbt, index: number, subindex: number, flags: number, hdkey: Ref_ext_key): Ref_ext_key;
export function psbt_get_input_final_scriptsig_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_final_witness(psbt: Ref_wally_psbt, index: number): Ref_wally_tx_witness_stack;
export function psbt_get_input_inflation_keys(psbt: Ref_wally_psbt, index: number): bigint;
export function psbt_get_input_inflation_keys_blinding_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_inflation_keys_commitment_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_inflation_keys_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_issuance_amount(psbt: Ref_wally_psbt, index: number): bigint;
export function psbt_get_input_issuance_amount_blinding_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_issuance_amount_commitment_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_issuance_amount_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_issuance_asset_entropy_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_issuance_blinding_nonce_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_keypath_len(psbt: Ref_wally_psbt, index: number, subindex: number): number;
export function psbt_get_input_keypaths_size(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_output_index(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_pegin_amount(psbt: Ref_wally_psbt, index: number): bigint;
export function psbt_get_input_pegin_claim_script_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_pegin_genesis_blockhash_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_pegin_txout_proof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_previous_txid(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_redeem_script_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_required_lockheight(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_required_locktime(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_scriptcode_len(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): number;
export function psbt_get_input_sequence(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_sighash(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_signature_hash(psbt: Ref_wally_psbt, index: number, tx: Ref_wally_tx, script: Buffer|Uint8Array, flags: number): Buffer;
export function psbt_get_input_signature_len(psbt: Ref_wally_psbt, index: number, subindex: number): number;
export function psbt_get_input_signatures_size(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_signing_script_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_unknown_len(psbt: Ref_wally_psbt, index: number, subindex: number): number;
export function psbt_get_input_unknowns_size(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_utxo(psbt: Ref_wally_psbt, index: number): Ref_wally_tx;
export function psbt_get_input_utxo_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_witness_script_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_input_witness_utxo(psbt: Ref_wally_psbt, index: number): Ref_wally_tx_output;
export function psbt_get_length(psbt: Ref_wally_psbt, flags: number): number;
export function psbt_get_locktime(psbt: Ref_wally_psbt): number;
export function psbt_get_num_inputs(psbt: Ref_wally_psbt): number;
export function psbt_get_num_outputs(psbt: Ref_wally_psbt): number;
export function psbt_get_output_amount(psbt: Ref_wally_psbt, index: number): bigint;
export function psbt_get_output_asset_blinding_surjectionproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_asset_commitment_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_asset_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_asset_surjectionproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_blinder_index(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_blinding_public_key_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_blinding_status(output: Ref_wally_psbt, index: number, flags: number): number;
export function psbt_get_output_ecdh_public_key_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_keypath_len(psbt: Ref_wally_psbt, index: number, subindex: number): number;
export function psbt_get_output_keypaths_size(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_redeem_script_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_script_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_unknown_len(psbt: Ref_wally_psbt, index: number, subindex: number): number;
export function psbt_get_output_unknowns_size(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_value_blinding_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_value_commitment_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_value_rangeproof_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_output_witness_script_len(psbt: Ref_wally_psbt, index: number): number;
export function psbt_get_pset_modifiable_flags(psbt: Ref_wally_psbt): number;
export function psbt_get_tx_modifiable_flags(psbt: Ref_wally_psbt): number;
export function psbt_get_tx_version(psbt: Ref_wally_psbt): number;
export function psbt_get_version(psbt: Ref_wally_psbt): number;
export function psbt_has_fallback_locktime(psbt: Ref_wally_psbt): number;
export function psbt_has_input_required_lockheight(psbt: Ref_wally_psbt, index: number): number;
export function psbt_has_input_required_locktime(psbt: Ref_wally_psbt, index: number): number;
export function psbt_has_output_amount(psbt: Ref_wally_psbt, index: number): number;
export function psbt_has_output_blinder_index(psbt: Ref_wally_psbt, index: number): number;
export function psbt_init(version: number, inputs_allocation_len: number, outputs_allocation_len: number, global_unknowns_allocation_len: number, flags: number): Ref_wally_psbt;
export function psbt_input_add_signature(input: Ref_wally_psbt_input, pub_key: Buffer|Uint8Array, sig: Buffer|Uint8Array): void;
export function psbt_input_clear_amount_rangeproof(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_asset(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_asset_surjectionproof(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_inflation_keys_blinding_rangeproof(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_inflation_keys_commitment(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_inflation_keys_rangeproof(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_issuance_amount_blinding_rangeproof(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_issuance_amount_commitment(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_issuance_amount_rangeproof(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_issuance_asset_entropy(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_issuance_blinding_nonce(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_pegin_claim_script(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_pegin_genesis_blockhash(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_pegin_txout_proof(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_required_lockheight(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_required_locktime(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_sequence(input: Ref_wally_psbt_input): void;
export function psbt_input_clear_utxo_rangeproof(input: Ref_wally_psbt_input): void;
export function psbt_input_find_keypath(input: Ref_wally_psbt_input, pub_key: Buffer|Uint8Array): number;
export function psbt_input_find_signature(input: Ref_wally_psbt_input, pub_key: Buffer|Uint8Array): number;
export function psbt_input_find_unknown(input: Ref_wally_psbt_input, key: Buffer|Uint8Array): number;
export function psbt_input_generate_explicit_proofs(input: Ref_wally_psbt_input, satoshi: bigint, asset: Buffer|Uint8Array, abf: Buffer|Uint8Array, vbf: Buffer|Uint8Array, entropy: Buffer|Uint8Array): void;
export function psbt_input_get_amount_rangeproof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_asset_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_asset_surjectionproof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_inflation_keys_blinding_rangeproof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_inflation_keys_commitment_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_inflation_keys_rangeproof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_issuance_amount_blinding_rangeproof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_issuance_amount_commitment_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_issuance_amount_rangeproof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_issuance_asset_entropy_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_issuance_blinding_nonce_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_pegin_claim_script_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_pegin_genesis_blockhash_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_pegin_txout_proof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_get_utxo_rangeproof_len(input: Ref_wally_psbt_input): number;
export function psbt_input_is_finalized(input: Ref_wally_psbt_input): number;
export function psbt_input_keypath_add(input: Ref_wally_psbt_input, pub_key: Buffer|Uint8Array, fingerprint: Buffer|Uint8Array, child_path: Uint32Array|number[]): void;
export function psbt_input_set_amount(input: Ref_wally_psbt_input, amount: bigint): void;
export function psbt_input_set_amount_rangeproof(input: Ref_wally_psbt_input, rangeproof: Buffer|Uint8Array): void;
export function psbt_input_set_asset(input: Ref_wally_psbt_input, asset: Buffer|Uint8Array): void;
export function psbt_input_set_asset_surjectionproof(input: Ref_wally_psbt_input, surjectionproof: Buffer|Uint8Array): void;
export function psbt_input_set_final_scriptsig(input: Ref_wally_psbt_input, final_scriptsig: Buffer|Uint8Array): void;
export function psbt_input_set_final_witness(input: Ref_wally_psbt_input, witness: Ref_wally_tx_witness_stack): void;
export function psbt_input_set_inflation_keys(input: Ref_wally_psbt_input, value: bigint): void;
export function psbt_input_set_inflation_keys_blinding_rangeproof(input: Ref_wally_psbt_input, rangeproof: Buffer|Uint8Array): void;
export function psbt_input_set_inflation_keys_commitment(input: Ref_wally_psbt_input, commitment: Buffer|Uint8Array): void;
export function psbt_input_set_inflation_keys_rangeproof(input: Ref_wally_psbt_input, rangeproof: Buffer|Uint8Array): void;
export function psbt_input_set_issuance_amount(input: Ref_wally_psbt_input, amount: bigint): void;
export function psbt_input_set_issuance_amount_blinding_rangeproof(input: Ref_wally_psbt_input, rangeproof: Buffer|Uint8Array): void;
export function psbt_input_set_issuance_amount_commitment(input: Ref_wally_psbt_input, commitment: Buffer|Uint8Array): void;
export function psbt_input_set_issuance_amount_rangeproof(input: Ref_wally_psbt_input, rangeproof: Buffer|Uint8Array): void;
export function psbt_input_set_issuance_asset_entropy(input: Ref_wally_psbt_input, entropy: Buffer|Uint8Array): void;
export function psbt_input_set_issuance_blinding_nonce(input: Ref_wally_psbt_input, nonce: Buffer|Uint8Array): void;
export function psbt_input_set_keypaths(input: Ref_wally_psbt_input, map_in: Ref_wally_map): void;
export function psbt_input_set_output_index(input: Ref_wally_psbt_input, index: number): void;
export function psbt_input_set_pegin_amount(input: Ref_wally_psbt_input, amount: bigint): void;
export function psbt_input_set_pegin_claim_script(input: Ref_wally_psbt_input, script: Buffer|Uint8Array): void;
export function psbt_input_set_pegin_genesis_blockhash(input: Ref_wally_psbt_input, genesis_blockhash: Buffer|Uint8Array): void;
export function psbt_input_set_pegin_tx(input: Ref_wally_psbt_input, tx: Ref_wally_tx): void;
export function psbt_input_set_pegin_txout_proof(input: Ref_wally_psbt_input, txout_proof: Buffer|Uint8Array): void;
export function psbt_input_set_pegin_witness(input: Ref_wally_psbt_input, witness: Ref_wally_tx_witness_stack): void;
export function psbt_input_set_previous_txid(input: Ref_wally_psbt_input, txhash: Buffer|Uint8Array): void;
export function psbt_input_set_redeem_script(input: Ref_wally_psbt_input, script: Buffer|Uint8Array): void;
export function psbt_input_set_required_lockheight(input: Ref_wally_psbt_input, required_lockheight: number): void;
export function psbt_input_set_required_locktime(input: Ref_wally_psbt_input, required_locktime: number): void;
export function psbt_input_set_sequence(input: Ref_wally_psbt_input, sequence: number): void;
export function psbt_input_set_sighash(input: Ref_wally_psbt_input, sighash: number): void;
export function psbt_input_set_signatures(input: Ref_wally_psbt_input, map_in: Ref_wally_map): void;
export function psbt_input_set_unknowns(input: Ref_wally_psbt_input, map_in: Ref_wally_map): void;
export function psbt_input_set_utxo(input: Ref_wally_psbt_input, utxo: Ref_wally_tx): void;
export function psbt_input_set_utxo_rangeproof(input: Ref_wally_psbt_input, rangeproof: Buffer|Uint8Array): void;
export function psbt_input_set_witness_script(input: Ref_wally_psbt_input, script: Buffer|Uint8Array): void;
export function psbt_input_set_witness_utxo(input: Ref_wally_psbt_input, witness_utxo: Ref_wally_tx_output): void;
export function psbt_input_set_witness_utxo_from_tx(input: Ref_wally_psbt_input, utxo: Ref_wally_tx, index: number): void;
export function psbt_input_taproot_keypath_add(input: Ref_wally_psbt_input, pub_key: Buffer|Uint8Array, tapleaf_hashes: Buffer|Uint8Array, fingerprint: Buffer|Uint8Array, child_path: Uint32Array|number[]): void;
export function psbt_is_elements(psbt: Ref_wally_psbt): number;
export function psbt_is_finalized(psbt: Ref_wally_psbt): number;
export function psbt_output_clear_amount(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_asset(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_asset_blinding_surjectionproof(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_asset_commitment(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_asset_surjectionproof(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_blinder_index(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_blinding_public_key(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_ecdh_public_key(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_value_blinding_rangeproof(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_value_commitment(output: Ref_wally_psbt_output): void;
export function psbt_output_clear_value_rangeproof(output: Ref_wally_psbt_output): void;
export function psbt_output_find_keypath(output: Ref_wally_psbt_output, pub_key: Buffer|Uint8Array): number;
export function psbt_output_find_unknown(output: Ref_wally_psbt_output, key: Buffer|Uint8Array): number;
export function psbt_output_get_asset_blinding_surjectionproof_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_asset_commitment_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_asset_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_asset_surjectionproof_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_blinding_public_key_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_blinding_status(output: Ref_wally_psbt_output, flags: number): number;
export function psbt_output_get_ecdh_public_key_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_value_blinding_rangeproof_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_value_commitment_len(output: Ref_wally_psbt_output): number;
export function psbt_output_get_value_rangeproof_len(output: Ref_wally_psbt_output): number;
export function psbt_output_keypath_add(output: Ref_wally_psbt_output, pub_key: Buffer|Uint8Array, fingerprint: Buffer|Uint8Array, child_path: Uint32Array|number[]): void;
export function psbt_output_set_amount(output: Ref_wally_psbt_output, amount: bigint): void;
export function psbt_output_set_asset(output: Ref_wally_psbt_output, asset: Buffer|Uint8Array): void;
export function psbt_output_set_asset_blinding_surjectionproof(output: Ref_wally_psbt_output, surjectionproof: Buffer|Uint8Array): void;
export function psbt_output_set_asset_commitment(output: Ref_wally_psbt_output, commitment: Buffer|Uint8Array): void;
export function psbt_output_set_asset_surjectionproof(output: Ref_wally_psbt_output, surjectionproof: Buffer|Uint8Array): void;
export function psbt_output_set_blinder_index(output: Ref_wally_psbt_output, index: number): void;
export function psbt_output_set_blinding_public_key(output: Ref_wally_psbt_output, pub_key: Buffer|Uint8Array): void;
export function psbt_output_set_ecdh_public_key(output: Ref_wally_psbt_output, pub_key: Buffer|Uint8Array): void;
export function psbt_output_set_keypaths(output: Ref_wally_psbt_output, map_in: Ref_wally_map): void;
export function psbt_output_set_redeem_script(output: Ref_wally_psbt_output, script: Buffer|Uint8Array): void;
export function psbt_output_set_script(output: Ref_wally_psbt_output, script: Buffer|Uint8Array): void;
export function psbt_output_set_unknowns(output: Ref_wally_psbt_output, map_in: Ref_wally_map): void;
export function psbt_output_set_value_blinding_rangeproof(output: Ref_wally_psbt_output, rangeproof: Buffer|Uint8Array): void;
export function psbt_output_set_value_commitment(output: Ref_wally_psbt_output, commitment: Buffer|Uint8Array): void;
export function psbt_output_set_value_rangeproof(output: Ref_wally_psbt_output, rangeproof: Buffer|Uint8Array): void;
export function psbt_output_set_witness_script(output: Ref_wally_psbt_output, script: Buffer|Uint8Array): void;
export function psbt_output_taproot_keypath_add(output: Ref_wally_psbt_output, pub_key: Buffer|Uint8Array, tapleaf_hashes: Buffer|Uint8Array, fingerprint: Buffer|Uint8Array, child_path: Uint32Array|number[]): void;
export function psbt_remove_input(psbt: Ref_wally_psbt, index: number): void;
export function psbt_remove_output(psbt: Ref_wally_psbt, index: number): void;
export function psbt_set_fallback_locktime(psbt: Ref_wally_psbt, locktime: number): void;
export function psbt_set_global_scalars(psbt: Ref_wally_psbt, map_in: Ref_wally_map): void;
export function psbt_set_global_tx(psbt: Ref_wally_psbt, tx: Ref_wally_tx): void;
export function psbt_set_input_amount(psbt: Ref_wally_psbt, index: number, amount: bigint): void;
export function psbt_set_input_amount_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_input_asset(psbt: Ref_wally_psbt, index: number, asset: Buffer|Uint8Array): void;
export function psbt_set_input_asset_surjectionproof(psbt: Ref_wally_psbt, index: number, surjectionproof: Buffer|Uint8Array): void;
export function psbt_set_input_final_scriptsig(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): void;
export function psbt_set_input_final_witness(psbt: Ref_wally_psbt, index: number, final_witness: Ref_wally_tx_witness_stack): void;
export function psbt_set_input_inflation_keys(psbt: Ref_wally_psbt, index: number, amount: bigint): void;
export function psbt_set_input_inflation_keys_blinding_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_input_inflation_keys_commitment(psbt: Ref_wally_psbt, index: number, commitment: Buffer|Uint8Array): void;
export function psbt_set_input_inflation_keys_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_input_issuance_amount(psbt: Ref_wally_psbt, index: number, amount: bigint): void;
export function psbt_set_input_issuance_amount_blinding_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_input_issuance_amount_commitment(psbt: Ref_wally_psbt, index: number, commitment: Buffer|Uint8Array): void;
export function psbt_set_input_issuance_amount_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_input_issuance_asset_entropy(psbt: Ref_wally_psbt, index: number, entropy: Buffer|Uint8Array): void;
export function psbt_set_input_issuance_blinding_nonce(psbt: Ref_wally_psbt, index: number, nonce: Buffer|Uint8Array): void;
export function psbt_set_input_keypaths(psbt: Ref_wally_psbt, index: number, map_in: Ref_wally_map): void;
export function psbt_set_input_output_index(psbt: Ref_wally_psbt, index: number, output_index: number): void;
export function psbt_set_input_pegin_amount(psbt: Ref_wally_psbt, index: number, amount: bigint): void;
export function psbt_set_input_pegin_claim_script(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): void;
export function psbt_set_input_pegin_genesis_blockhash(psbt: Ref_wally_psbt, index: number, genesis_blockhash: Buffer|Uint8Array): void;
export function psbt_set_input_pegin_txout_proof(psbt: Ref_wally_psbt, index: number, txout_proof: Buffer|Uint8Array): void;
export function psbt_set_input_previous_txid(psbt: Ref_wally_psbt, index: number, txhash: Buffer|Uint8Array): void;
export function psbt_set_input_redeem_script(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): void;
export function psbt_set_input_required_lockheight(psbt: Ref_wally_psbt, index: number, lockheight: number): void;
export function psbt_set_input_required_locktime(psbt: Ref_wally_psbt, index: number, locktime: number): void;
export function psbt_set_input_sequence(psbt: Ref_wally_psbt, index: number, sequence: number): void;
export function psbt_set_input_sighash(psbt: Ref_wally_psbt, index: number, sighash: number): void;
export function psbt_set_input_signatures(psbt: Ref_wally_psbt, index: number, map_in: Ref_wally_map): void;
export function psbt_set_input_unknowns(psbt: Ref_wally_psbt, index: number, map_in: Ref_wally_map): void;
export function psbt_set_input_utxo(psbt: Ref_wally_psbt, index: number, utxo: Ref_wally_tx): void;
export function psbt_set_input_utxo_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_input_witness_script(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): void;
export function psbt_set_input_witness_utxo(psbt: Ref_wally_psbt, index: number, witness_utxo: Ref_wally_tx_output): void;
export function psbt_set_input_witness_utxo_from_tx(psbt: Ref_wally_psbt, index: number, utxo: Ref_wally_tx, utxo_index: number): void;
export function psbt_set_output_amount(psbt: Ref_wally_psbt, index: number, amount: bigint): void;
export function psbt_set_output_asset(psbt: Ref_wally_psbt, index: number, asset: Buffer|Uint8Array): void;
export function psbt_set_output_asset_blinding_surjectionproof(psbt: Ref_wally_psbt, index: number, surjectionproof: Buffer|Uint8Array): void;
export function psbt_set_output_asset_commitment(psbt: Ref_wally_psbt, index: number, commitment: Buffer|Uint8Array): void;
export function psbt_set_output_asset_surjectionproof(psbt: Ref_wally_psbt, index: number, surjectionproof: Buffer|Uint8Array): void;
export function psbt_set_output_blinder_index(psbt: Ref_wally_psbt, index: number, idx: number): void;
export function psbt_set_output_blinding_public_key(psbt: Ref_wally_psbt, index: number, pub_key: Buffer|Uint8Array): void;
export function psbt_set_output_ecdh_public_key(psbt: Ref_wally_psbt, index: number, pub_key: Buffer|Uint8Array): void;
export function psbt_set_output_keypaths(psbt: Ref_wally_psbt, index: number, map_in: Ref_wally_map): void;
export function psbt_set_output_redeem_script(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): void;
export function psbt_set_output_script(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): void;
export function psbt_set_output_unknowns(psbt: Ref_wally_psbt, index: number, map_in: Ref_wally_map): void;
export function psbt_set_output_value_blinding_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_output_value_commitment(psbt: Ref_wally_psbt, index: number, commitment: Buffer|Uint8Array): void;
export function psbt_set_output_value_rangeproof(psbt: Ref_wally_psbt, index: number, rangeproof: Buffer|Uint8Array): void;
export function psbt_set_output_witness_script(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): void;
export function psbt_set_pset_modifiable_flags(psbt: Ref_wally_psbt, flags: number): void;
export function psbt_set_tx_modifiable_flags(psbt: Ref_wally_psbt, flags: number): void;
export function psbt_set_tx_version(psbt: Ref_wally_psbt, version: number): void;
export function psbt_set_version(psbt: Ref_wally_psbt, flags: number, version: number): void;
export function psbt_sign(psbt: Ref_wally_psbt, key: Buffer|Uint8Array, flags: number): void;
export function psbt_sign_bip32(psbt: Ref_wally_psbt, hdkey: Ref_ext_key, flags: number): void;
export function psbt_sign_input_bip32(psbt: Ref_wally_psbt, index: number, subindex: number, txhash: Buffer|Uint8Array, hdkey: Ref_ext_key, flags: number): void;
export function psbt_to_base64(psbt: Ref_wally_psbt, flags: number): string;
export function ripemd160(bytes: Buffer|Uint8Array): Buffer;
export function s2c_commitment_verify(sig: Buffer|Uint8Array, s2c_data: Buffer|Uint8Array, s2c_opening: Buffer|Uint8Array, flags: number): void;
export function s2c_sig_from_bytes(priv_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, s2c_data: Buffer|Uint8Array, flags: number): [s2c_opening_out: Buffer, bytes_out: Buffer];
export function script_push_from_bytes(bytes: Buffer|Uint8Array, flags: number): Buffer;
export function scriptpubkey_csv_2of2_then_1_from_bytes(bytes: Buffer|Uint8Array, csv_blocks: number, flags: number): Buffer;
export function scriptpubkey_csv_2of2_then_1_from_bytes_opt(bytes: Buffer|Uint8Array, csv_blocks: number, flags: number): Buffer;
export function scriptpubkey_get_type(bytes: Buffer|Uint8Array): number;
export function scriptpubkey_multisig_from_bytes(bytes: Buffer|Uint8Array, threshold: number, flags: number): Buffer;
export function scriptpubkey_op_return_from_bytes(bytes: Buffer|Uint8Array, flags: number): Buffer;
export function scriptpubkey_p2pkh_from_bytes(bytes: Buffer|Uint8Array, flags: number): Buffer;
export function scriptpubkey_p2sh_from_bytes(bytes: Buffer|Uint8Array, flags: number): Buffer;
export function scriptpubkey_to_address(scriptpubkey: Buffer|Uint8Array, network: number): string;
export function scriptsig_multisig_from_bytes(script: Buffer|Uint8Array, bytes: Buffer|Uint8Array, sighash: Uint32Array|number[], flags: number): Buffer;
export function scriptsig_p2pkh_from_der(pub_key: Buffer|Uint8Array, sig: Buffer|Uint8Array): Buffer;
export function scriptsig_p2pkh_from_sig(pub_key: Buffer|Uint8Array, sig: Buffer|Uint8Array, sighash: number): Buffer;
export function scrypt(pass: Buffer|Uint8Array, salt: Buffer|Uint8Array, cost: number, block_size: number, parallelism: number, out_len: number): Buffer;
export function secp_randomize(bytes: Buffer|Uint8Array): void;
export function set_operations(ops: Ref_wally_operations): void;
export function sha256(bytes: Buffer|Uint8Array): Buffer;
export function sha256_midstate(bytes: Buffer|Uint8Array): Buffer;
export function sha256d(bytes: Buffer|Uint8Array): Buffer;
export function sha512(bytes: Buffer|Uint8Array): Buffer;
export function symmetric_key_from_parent(bytes: Buffer|Uint8Array, version: number, label: Buffer|Uint8Array): Buffer;
export function symmetric_key_from_seed(bytes: Buffer|Uint8Array): Buffer;
export function tx_add_elements_raw_input(tx: Ref_wally_tx, txhash: Buffer|Uint8Array, utxo_index: number, sequence: number, script: Buffer|Uint8Array, witness: Ref_wally_tx_witness_stack, nonce: Buffer|Uint8Array, entropy: Buffer|Uint8Array, issuance_amount: Buffer|Uint8Array, inflation_keys: Buffer|Uint8Array, issuance_amount_rangeproof: Buffer|Uint8Array, inflation_keys_rangeproof: Buffer|Uint8Array, pegin_witness: Ref_wally_tx_witness_stack, flags: number): void;
export function tx_add_elements_raw_input_at(tx: Ref_wally_tx, index: number, txhash: Buffer|Uint8Array, utxo_index: number, sequence: number, script: Buffer|Uint8Array, witness: Ref_wally_tx_witness_stack, nonce: Buffer|Uint8Array, entropy: Buffer|Uint8Array, issuance_amount: Buffer|Uint8Array, inflation_keys: Buffer|Uint8Array, issuance_amount_rangeproof: Buffer|Uint8Array, inflation_keys_rangeproof: Buffer|Uint8Array, pegin_witness: Ref_wally_tx_witness_stack, flags: number): void;
export function tx_add_elements_raw_output(tx: Ref_wally_tx, script: Buffer|Uint8Array, asset: Buffer|Uint8Array, value: Buffer|Uint8Array, nonce: Buffer|Uint8Array, surjectionproof: Buffer|Uint8Array, rangeproof: Buffer|Uint8Array, flags: number): void;
export function tx_add_elements_raw_output_at(tx: Ref_wally_tx, index: number, script: Buffer|Uint8Array, asset: Buffer|Uint8Array, value: Buffer|Uint8Array, nonce: Buffer|Uint8Array, surjectionproof: Buffer|Uint8Array, rangeproof: Buffer|Uint8Array, flags: number): void;
export function tx_add_input(tx: Ref_wally_tx, input: Ref_wally_tx_input): void;
export function tx_add_input_at(tx: Ref_wally_tx, index: number, input: Ref_wally_tx_input): void;
export function tx_add_output(tx: Ref_wally_tx, output: Ref_wally_tx_output): void;
export function tx_add_output_at(tx: Ref_wally_tx, index: number, output: Ref_wally_tx_output): void;
export function tx_add_raw_input(tx: Ref_wally_tx, txhash: Buffer|Uint8Array, utxo_index: number, sequence: number, script: Buffer|Uint8Array, witness: Ref_wally_tx_witness_stack, flags: number): void;
export function tx_add_raw_input_at(tx: Ref_wally_tx, index: number, txhash: Buffer|Uint8Array, utxo_index: number, sequence: number, script: Buffer|Uint8Array, witness: Ref_wally_tx_witness_stack, flags: number): void;
export function tx_add_raw_output(tx: Ref_wally_tx, satoshi: bigint, script: Buffer|Uint8Array, flags: number): void;
export function tx_add_raw_output_at(tx: Ref_wally_tx, index: number, satoshi: bigint, script: Buffer|Uint8Array, flags: number): void;
export function tx_clone(tx: Ref_wally_tx, flags: number): Ref_wally_tx;
export function tx_confidential_value_from_satoshi(satoshi: bigint): Buffer;
export function tx_confidential_value_to_satoshi(value: Buffer|Uint8Array): bigint;
export function tx_elements_input_init(txhash: Buffer|Uint8Array, utxo_index: number, sequence: number, script: Buffer|Uint8Array, witness: Ref_wally_tx_witness_stack, nonce: Buffer|Uint8Array, entropy: Buffer|Uint8Array, issuance_amount: Buffer|Uint8Array, inflation_keys: Buffer|Uint8Array, issuance_amount_rangeproof: Buffer|Uint8Array, inflation_keys_rangeproof: Buffer|Uint8Array, pegin_witness: Ref_wally_tx_witness_stack): Ref_wally_tx_input;
export function tx_elements_input_is_pegin(input: Ref_wally_tx_input): number;
export function tx_elements_input_issuance_free(input: Ref_wally_tx_input): void;
export function tx_elements_input_issuance_set(input: Ref_wally_tx_input, nonce: Buffer|Uint8Array, entropy: Buffer|Uint8Array, issuance_amount: Buffer|Uint8Array, inflation_keys: Buffer|Uint8Array, issuance_amount_rangeproof: Buffer|Uint8Array, inflation_keys_rangeproof: Buffer|Uint8Array): void;
export function tx_elements_issuance_calculate_asset(entropy: Buffer|Uint8Array): Buffer;
export function tx_elements_issuance_calculate_reissuance_token(entropy: Buffer|Uint8Array, flags: number): Buffer;
export function tx_elements_issuance_generate_entropy(txhash: Buffer|Uint8Array, utxo_index: number, contract_hash: Buffer|Uint8Array): Buffer;
export function tx_elements_output_commitment_free(output: Ref_wally_tx_output): void;
export function tx_elements_output_commitment_set(output: Ref_wally_tx_output, asset: Buffer|Uint8Array, value: Buffer|Uint8Array, nonce: Buffer|Uint8Array, surjectionproof: Buffer|Uint8Array, rangeproof: Buffer|Uint8Array): void;
export function tx_elements_output_init(script: Buffer|Uint8Array, asset: Buffer|Uint8Array, value: Buffer|Uint8Array, nonce: Buffer|Uint8Array, surjectionproof: Buffer|Uint8Array, rangeproof: Buffer|Uint8Array): Ref_wally_tx_output;
export function tx_elements_output_init_noalloc(script: Buffer|Uint8Array, asset: Buffer|Uint8Array, value: Buffer|Uint8Array, nonce: Buffer|Uint8Array, surjectionproof: Buffer|Uint8Array, rangeproof: Buffer|Uint8Array, output: Ref_wally_tx_output): void;
export function tx_free(tx: Ref_wally_tx): void;
export function tx_from_bytes(bytes: Buffer|Uint8Array, flags: number): Ref_wally_tx;
export function tx_from_hex(hex: string, flags: number): Ref_wally_tx;
export function tx_get_btc_signature_hash(tx: Ref_wally_tx, index: number, script: Buffer|Uint8Array, satoshi: bigint, sighash: number, flags: number): Buffer;
export function tx_get_btc_taproot_signature_hash(tx: Ref_wally_tx, index: number, scripts: Ref_wally_map, values: BigUint64Array|Array<bigint>, tapleaf_script: Buffer|Uint8Array, key_version: number, codesep_position: number, annex: Buffer|Uint8Array, sighash: number, flags: number): Buffer;
export function tx_get_elements_signature_hash(tx: Ref_wally_tx, index: number, script: Buffer|Uint8Array, value: Buffer|Uint8Array, sighash: number, flags: number): Buffer;
export function tx_get_hash_prevouts(tx: Ref_wally_tx, index: number, num_inputs: number): Buffer;
export function tx_get_input_blinding_nonce(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_entropy(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_index(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_input_inflation_keys_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_input_inflation_keys_rangeproof_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_input_issuance_amount_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_input_issuance_amount_rangeproof_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_input_script_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_input_sequence(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_input_txhash(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_witness_len(tx_in: Ref_wally_tx, index: number, wit_index: number): number;
export function tx_get_length(tx: Ref_wally_tx, flags: number): number;
export function tx_get_locktime(tx_in: Ref_wally_tx): number;
export function tx_get_num_inputs(tx_in: Ref_wally_tx): number;
export function tx_get_num_outputs(tx_in: Ref_wally_tx): number;
export function tx_get_output_asset(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_output_nonce(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_output_rangeproof_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_output_satoshi(tx_in: Ref_wally_tx, index: number): bigint;
export function tx_get_output_script_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_output_surjectionproof_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_output_value_len(tx_in: Ref_wally_tx, index: number): number;
export function tx_get_signature_hash(tx: Ref_wally_tx, index: number, script: Buffer|Uint8Array, extra: Buffer|Uint8Array, extra_offset: number, satoshi: bigint, sighash: number, tx_sighash: number, flags: number): Buffer;
export function tx_get_total_output_satoshi(tx: Ref_wally_tx): bigint;
export function tx_get_txid(tx: Ref_wally_tx): Buffer;
export function tx_get_version(tx_in: Ref_wally_tx): number;
export function tx_get_vsize(tx: Ref_wally_tx): number;
export function tx_get_weight(tx: Ref_wally_tx): number;
export function tx_get_witness_count(tx: Ref_wally_tx): number;
export function tx_init(version: number, locktime: number, inputs_allocation_len: number, outputs_allocation_len: number): Ref_wally_tx;
export function tx_input_free(input: Ref_wally_tx_input): void;
export function tx_input_get_blinding_nonce(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_entropy(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_index(tx_input_in: Ref_wally_tx_input): number;
export function tx_input_get_inflation_keys_len(tx_input_in: Ref_wally_tx_input): number;
export function tx_input_get_inflation_keys_rangeproof_len(tx_input_in: Ref_wally_tx_input): number;
export function tx_input_get_issuance_amount_len(tx_input_in: Ref_wally_tx_input): number;
export function tx_input_get_issuance_amount_rangeproof_len(tx_input_in: Ref_wally_tx_input): number;
export function tx_input_get_script_len(tx_input_in: Ref_wally_tx_input): number;
export function tx_input_get_sequence(tx_input_in: Ref_wally_tx_input): number;
export function tx_input_get_txhash(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_witness_len(tx_input_in: Ref_wally_tx_input, index: number): number;
export function tx_input_init(txhash: Buffer|Uint8Array, utxo_index: number, sequence: number, script: Buffer|Uint8Array, witness: Ref_wally_tx_witness_stack): Ref_wally_tx_input;
export function tx_input_set_blinding_nonce(tx_input_in: Ref_wally_tx_input, blinding_nonce: Buffer|Uint8Array): void;
export function tx_input_set_entropy(tx_input_in: Ref_wally_tx_input, entropy: Buffer|Uint8Array): void;
export function tx_input_set_index(tx_input: Ref_wally_tx_input, index: number): void;
export function tx_input_set_inflation_keys(tx_input_in: Ref_wally_tx_input, inflation_keys: Buffer|Uint8Array): void;
export function tx_input_set_inflation_keys_rangeproof(tx_input_in: Ref_wally_tx_input, inflation_keys_rangeproof: Buffer|Uint8Array): void;
export function tx_input_set_issuance_amount(tx_input_in: Ref_wally_tx_input, issuance_amount: Buffer|Uint8Array): void;
export function tx_input_set_issuance_amount_rangeproof(tx_input_in: Ref_wally_tx_input, issuance_amount_rangeproof: Buffer|Uint8Array): void;
export function tx_input_set_script(tx_input: Ref_wally_tx_input, script: Buffer|Uint8Array): void;
export function tx_input_set_sequence(tx_input: Ref_wally_tx_input, sequence: number): void;
export function tx_input_set_txhash(tx_input: Ref_wally_tx_input, txhash: Buffer|Uint8Array): void;
export function tx_input_set_witness(tx_input: Ref_wally_tx_input, witness: Ref_wally_tx_witness_stack): void;
export function tx_is_coinbase(tx: Ref_wally_tx): number;
export function tx_is_elements(tx: Ref_wally_tx): number;
export function tx_output_clone(tx_output_in: Ref_wally_tx_output): Ref_wally_tx_output;
export function tx_output_clone_noalloc(tx_output_in: Ref_wally_tx_output, output: Ref_wally_tx_output): void;
export function tx_output_free(output: Ref_wally_tx_output): void;
export function tx_output_get_asset_len(tx_output_in: Ref_wally_tx_output): number;
export function tx_output_get_nonce_len(tx_output_in: Ref_wally_tx_output): number;
export function tx_output_get_rangeproof_len(tx_output_in: Ref_wally_tx_output): number;
export function tx_output_get_satoshi(tx_output_in: Ref_wally_tx_output): bigint;
export function tx_output_get_script_len(tx_output_in: Ref_wally_tx_output): number;
export function tx_output_get_surjectionproof_len(tx_output_in: Ref_wally_tx_output): number;
export function tx_output_get_value_len(tx_output_in: Ref_wally_tx_output): number;
export function tx_output_init(satoshi: bigint, script: Buffer|Uint8Array): Ref_wally_tx_output;
export function tx_output_init_noalloc(satoshi: bigint, script: Buffer|Uint8Array, output: Ref_wally_tx_output): void;
export function tx_output_set_asset(tx_output_in: Ref_wally_tx_output, asset: Buffer|Uint8Array): void;
export function tx_output_set_nonce(tx_output_in: Ref_wally_tx_output, nonce: Buffer|Uint8Array): void;
export function tx_output_set_rangeproof(tx_output_in: Ref_wally_tx_output, rangeproof: Buffer|Uint8Array): void;
export function tx_output_set_satoshi(tx_output_in: Ref_wally_tx_output, satoshi: bigint): void;
export function tx_output_set_script(tx_output_in: Ref_wally_tx_output, script: Buffer|Uint8Array): void;
export function tx_output_set_surjectionproof(tx_output_in: Ref_wally_tx_output, surjectionproof: Buffer|Uint8Array): void;
export function tx_output_set_value(tx_output_in: Ref_wally_tx_output, value: Buffer|Uint8Array): void;
export function tx_remove_input(tx: Ref_wally_tx, index: number): void;
export function tx_remove_output(tx: Ref_wally_tx, index: number): void;
export function tx_set_input_blinding_nonce(tx_in: Ref_wally_tx, index: number, blinding_nonce: Buffer|Uint8Array): void;
export function tx_set_input_entropy(tx_in: Ref_wally_tx, index: number, entropy: Buffer|Uint8Array): void;
export function tx_set_input_index(tx_in: Ref_wally_tx, index: number, index_in: number): void;
export function tx_set_input_inflation_keys(tx_in: Ref_wally_tx, index: number, inflation_keys: Buffer|Uint8Array): void;
export function tx_set_input_inflation_keys_rangeproof(tx_in: Ref_wally_tx, index: number, inflation_keys_rangeproof: Buffer|Uint8Array): void;
export function tx_set_input_issuance_amount(tx_in: Ref_wally_tx, index: number, issuance_amount: Buffer|Uint8Array): void;
export function tx_set_input_issuance_amount_rangeproof(tx_in: Ref_wally_tx, index: number, issuance_amount_rangeproof: Buffer|Uint8Array): void;
export function tx_set_input_script(tx: Ref_wally_tx, index: number, script: Buffer|Uint8Array): void;
export function tx_set_input_sequence(tx_in: Ref_wally_tx, index: number, sequence: number): void;
export function tx_set_input_txhash(tx_in: Ref_wally_tx, index: number, txhash: Buffer|Uint8Array): void;
export function tx_set_input_witness(tx: Ref_wally_tx, index: number, stack: Ref_wally_tx_witness_stack): void;
export function tx_set_output_asset(tx_in: Ref_wally_tx, index: number, asset: Buffer|Uint8Array): void;
export function tx_set_output_nonce(tx_in: Ref_wally_tx, index: number, nonce: Buffer|Uint8Array): void;
export function tx_set_output_rangeproof(tx_in: Ref_wally_tx, index: number, rangeproof: Buffer|Uint8Array): void;
export function tx_set_output_satoshi(tx_in: Ref_wally_tx, index: number, satoshi: bigint): void;
export function tx_set_output_script(tx_in: Ref_wally_tx, index: number, script: Buffer|Uint8Array): void;
export function tx_set_output_surjectionproof(tx_in: Ref_wally_tx, index: number, surjectionproof: Buffer|Uint8Array): void;
export function tx_set_output_value(tx_in: Ref_wally_tx, index: number, value: Buffer|Uint8Array): void;
export function tx_to_hex(tx: Ref_wally_tx, flags: number): string;
export function tx_vsize_from_weight(weight: number): number;
export function tx_witness_stack_add(stack: Ref_wally_tx_witness_stack, witness: Buffer|Uint8Array): void;
export function tx_witness_stack_add_dummy(stack: Ref_wally_tx_witness_stack, flags: number): void;
export function tx_witness_stack_clone(stack: Ref_wally_tx_witness_stack): Ref_wally_tx_witness_stack;
export function tx_witness_stack_free(stack: Ref_wally_tx_witness_stack): void;
export function tx_witness_stack_init(allocation_len: number): Ref_wally_tx_witness_stack;
export function tx_witness_stack_set(stack: Ref_wally_tx_witness_stack, index: number, witness: Buffer|Uint8Array): void;
export function tx_witness_stack_set_dummy(stack: Ref_wally_tx_witness_stack, index: number, flags: number): void;
export function varbuff_get_length(bytes: Buffer|Uint8Array): number;
export function varint_get_length(value: bigint): number;
export function wif_from_bytes(priv_key: Buffer|Uint8Array, prefix: number, flags: number): string;
export function wif_is_uncompressed(wif: string): number;
export function wif_to_address(wif: string, prefix: number, version: number): string;
export function wif_to_bytes(wif: string, prefix: number, flags: number): Buffer;
export function wif_to_public_key(wif: string, prefix: number): Buffer;
export function witness_multisig_from_bytes(script: Buffer|Uint8Array, bytes: Buffer|Uint8Array, sighash: Uint32Array|number[], flags: number): Ref_wally_tx_witness_stack;
export function witness_p2tr_from_sig(sig: Buffer|Uint8Array): Ref_wally_tx_witness_stack;
export function witness_p2wpkh_from_der(pub_key: Buffer|Uint8Array, sig: Buffer|Uint8Array): Ref_wally_tx_witness_stack;
export function witness_p2wpkh_from_sig(pub_key: Buffer|Uint8Array, sig: Buffer|Uint8Array, sighash: number): Ref_wally_tx_witness_stack;
export function witness_program_from_bytes(bytes: Buffer|Uint8Array, flags: number): Buffer;
export function witness_program_from_bytes_and_version(bytes: Buffer|Uint8Array, version: number, flags: number): Buffer;
export function asset_pak_whitelistproof(online_keys: Buffer|Uint8Array, offline_keys: Buffer|Uint8Array, key_index: number, sub_pubkey: Buffer|Uint8Array, online_priv_key: Buffer|Uint8Array, summed_key: Buffer|Uint8Array): Buffer;
export function asset_surjectionproof(output_asset: Buffer|Uint8Array, output_abf: Buffer|Uint8Array, output_generator: Buffer|Uint8Array, bytes: Buffer|Uint8Array, asset: Buffer|Uint8Array, abf: Buffer|Uint8Array, generator: Buffer|Uint8Array): Buffer;
export function base58_n_to_bytes(str_in: string, str_len: number, flags: number): Buffer;
export function base58_to_bytes(str_in: string, flags: number): Buffer;
export function base64_to_bytes(str_in: string, flags: number): Buffer;
export function descriptor_to_script(descriptor: Ref_wally_descriptor, depth: number, index: number, variant: number, multi_index: number, child_num: number, flags: number): Buffer;
export function ec_sig_from_bytes(priv_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, flags: number): Buffer;
export function ec_sig_from_bytes_aux(priv_key: Buffer|Uint8Array, bytes: Buffer|Uint8Array, aux_rand: Buffer|Uint8Array, flags: number): Buffer;
export function keypath_get_path(val: Buffer|Uint8Array): Uint32Array;
export function map_get_item(map_in: Ref_wally_map, index: number): Buffer;
export function map_get_item_key(map_in: Ref_wally_map, index: number): Buffer;
export function map_keypath_get_item_path(map_in: Ref_wally_map, index: number): Uint32Array;
export function psbt_get_input_amount_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_asset(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_asset_surjectionproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_final_scriptsig(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_inflation_keys_blinding_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_inflation_keys_commitment(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_inflation_keys_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_issuance_amount_blinding_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_issuance_amount_commitment(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_issuance_amount_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_issuance_asset_entropy(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_issuance_blinding_nonce(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_keypath(psbt: Ref_wally_psbt, index: number, subindex: number): Buffer;
export function psbt_get_input_pegin_claim_script(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_pegin_genesis_blockhash(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_pegin_txout_proof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_redeem_script(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_scriptcode(psbt: Ref_wally_psbt, index: number, script: Buffer|Uint8Array): Buffer;
export function psbt_get_input_signature(psbt: Ref_wally_psbt, index: number, subindex: number): Buffer;
export function psbt_get_input_signing_script(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_unknown(psbt: Ref_wally_psbt, index: number, subindex: number): Buffer;
export function psbt_get_input_utxo_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_input_witness_script(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_asset(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_asset_blinding_surjectionproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_asset_commitment(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_asset_surjectionproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_blinding_public_key(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_ecdh_public_key(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_keypath(psbt: Ref_wally_psbt, index: number, subindex: number): Buffer;
export function psbt_get_output_redeem_script(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_script(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_unknown(psbt: Ref_wally_psbt, index: number, subindex: number): Buffer;
export function psbt_get_output_value_blinding_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_value_commitment(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_value_rangeproof(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_get_output_witness_script(psbt: Ref_wally_psbt, index: number): Buffer;
export function psbt_input_get_amount_rangeproof(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_asset(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_asset_surjectionproof(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_inflation_keys_blinding_rangeproof(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_inflation_keys_commitment(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_inflation_keys_rangeproof(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_issuance_amount_blinding_rangeproof(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_issuance_amount_commitment(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_issuance_amount_rangeproof(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_issuance_asset_entropy(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_issuance_blinding_nonce(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_pegin_claim_script(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_pegin_genesis_blockhash(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_pegin_txout_proof(input: Ref_wally_psbt_input): Buffer;
export function psbt_input_get_utxo_rangeproof(input: Ref_wally_psbt_input): Buffer;
export function psbt_output_get_asset(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_asset_blinding_surjectionproof(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_asset_commitment(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_asset_surjectionproof(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_blinding_public_key(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_ecdh_public_key(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_value_blinding_rangeproof(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_value_commitment(output: Ref_wally_psbt_output): Buffer;
export function psbt_output_get_value_rangeproof(output: Ref_wally_psbt_output): Buffer;
export function psbt_to_bytes(psbt: Ref_wally_psbt, flags: number): Buffer;
export function tx_get_input_inflation_keys(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_inflation_keys_rangeproof(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_issuance_amount(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_issuance_amount_rangeproof(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_script(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_input_witness(tx_in: Ref_wally_tx, index: number, wit_index: number): Buffer;
export function tx_get_output_rangeproof(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_output_script(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_output_surjectionproof(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_get_output_value(tx_in: Ref_wally_tx, index: number): Buffer;
export function tx_input_get_inflation_keys(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_inflation_keys_rangeproof(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_issuance_amount(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_issuance_amount_rangeproof(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_script(tx_input_in: Ref_wally_tx_input): Buffer;
export function tx_input_get_witness(tx_input_in: Ref_wally_tx_input, index: number): Buffer;
export function tx_output_get_asset(tx_output_in: Ref_wally_tx_output): Buffer;
export function tx_output_get_nonce(tx_output_in: Ref_wally_tx_output): Buffer;
export function tx_output_get_rangeproof(tx_output_in: Ref_wally_tx_output): Buffer;
export function tx_output_get_script(tx_output_in: Ref_wally_tx_output): Buffer;
export function tx_output_get_surjectionproof(tx_output_in: Ref_wally_tx_output): Buffer;
export function tx_output_get_value(tx_output_in: Ref_wally_tx_output): Buffer;
export function tx_to_bytes(tx: Ref_wally_tx, flags: number): Buffer;
export function varbuff_to_bytes(bytes: Buffer|Uint8Array): Buffer;
export function varint_to_bytes(value: bigint): Buffer;
// END AUTOGENERATED
