// AUTOGENERATED by `npm run update-consts`
export const WALLY_S2C_DATA_LEN = 32;
export const WALLY_S2C_OPENING_LEN = 33;
export const WALLY_TX_SEQUENCE_FINAL = 0xffffffff;
export const WALLY_TX_VERSION_1 = 1;
export const WALLY_TX_VERSION_2 = 2;
export const WALLY_TX_IS_ELEMENTS = 1;
export const WALLY_TX_IS_ISSUANCE = 2;
export const WALLY_TX_IS_PEGIN = 4;
export const WALLY_TX_IS_COINBASE = 8;
export const WALLY_SATOSHI_PER_BTC = 100000000;
export const WALLY_BTC_MAX = 21000000;
export const WALLY_TXHASH_LEN = 32; /** Size of a transaction hash in bytes */
export const WALLY_TX_FLAG_USE_WITNESS = 0x1; /* Encode witness data if present */
export const WALLY_TX_FLAG_USE_ELEMENTS = 0x2; /* Encode/Decode as an elements transaction */
export const WALLY_TX_FLAG_ALLOW_PARTIAL = 0x4; /* Allow partially complete transactions */
export const WALLY_TX_FLAG_PRE_BIP144 = 0x8; /* Encode/Decode using pre-BIP 144 serialisation */
export const WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE = 0x1;
export const WALLY_TX_DUMMY_NULL = 0x1; /* An empty witness item */
export const WALLY_TX_DUMMY_SIG = 0x2; /* A dummy signature */
export const WALLY_TX_DUMMY_SIG_LOW_R = 0x4; /* A dummy signature created with EC_FLAG_GRIND_R */
export const WALLY_SIGHASH_ALL = 0x01;
export const WALLY_SIGHASH_NONE = 0x02;
export const WALLY_SIGHASH_SINGLE = 0x03;
export const WALLY_SIGHASH_FORKID = 0x40;
export const WALLY_SIGHASH_RANGEPROOF = 0x40 ; /* for elements */
export const WALLY_SIGHASH_ANYONECANPAY = 0x80;
export const WALLY_TX_ASSET_CT_VALUE_PREFIX_A = 8;
export const WALLY_TX_ASSET_CT_VALUE_PREFIX_B = 9;
export const WALLY_TX_ASSET_CT_ASSET_PREFIX_A = 10;
export const WALLY_TX_ASSET_CT_ASSET_PREFIX_B = 11;
export const WALLY_TX_ASSET_CT_NONCE_PREFIX_A = 2;
export const WALLY_TX_ASSET_CT_NONCE_PREFIX_B = 3;
export const WALLY_TX_ASSET_TAG_LEN = 32;
export const WALLY_TX_ASSET_CT_VALUE_LEN = 33; /* version byte + 32 bytes */
export const WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN = 9; /* version byte + 8 bytes */
export const WALLY_TX_ASSET_CT_ASSET_LEN = 33; /* version byte + 32 bytes */
export const WALLY_TX_ASSET_CT_NONCE_LEN = 33; /* version byte + 32 bytes */
export const WALLY_TX_ASSET_CT_LEN = 33      ; /* version byte + 32 bytes */
export const WALLY_TX_ISSUANCE_FLAG = (1 << 31);
export const WALLY_TX_PEGIN_FLAG = (1 << 30);
export const WALLY_TX_INDEX_MASK = 0x3fffffff;
export const WALLY_PSBT_HIGHEST_VERSION = 0;
export const WALLY_PSBT_FLAG_NON_FINAL = 0x1;
export const WALLY_WIF_FLAG_COMPRESSED = 0x0  ; /** Corresponding public key compressed */
export const WALLY_WIF_FLAG_UNCOMPRESSED = 0x1; /** Corresponding public key uncompressed */
export const WALLY_CA_PREFIX_LIQUID = 0x0c; /** Liquid v1 confidential address prefix */
export const WALLY_CA_PREFIX_LIQUID_REGTEST = 0x04; /** Liquid v1 confidential address prefix for regtest */
export const WALLY_CA_PREFIX_LIQUID_TESTNET = 0x17; /** Liquid v1 confidential address prefix for testnet */
export const WALLY_NETWORK_BITCOIN_MAINNET = 0x01; /** Bitcoin mainnet */
export const WALLY_NETWORK_BITCOIN_TESTNET = 0x02; /** Bitcoin testnet */
export const WALLY_NETWORK_LIQUID = 0x03; /** Liquid v1 */
export const WALLY_NETWORK_LIQUID_REGTEST = 0x04; /** Liquid v1 regtest */
export const WALLY_NETWORK_LIQUID_TESTNET = 0x05; /** Liquid v1 testnet */
export const WALLY_ADDRESS_TYPE_P2PKH = 0x01      ; /** P2PKH address ("1...") */
export const WALLY_ADDRESS_TYPE_P2SH_P2WPKH = 0x02; /** P2SH-P2WPKH wrapped SegWit address ("3...") */
export const WALLY_ADDRESS_TYPE_P2WPKH = 0x04     ; /** P2WPKH native SegWit address ("bc1...)" */
export const WALLY_ADDRESS_VERSION_P2PKH_MAINNET = 0x00; /** P2PKH address on mainnet */
export const WALLY_ADDRESS_VERSION_P2PKH_TESTNET = 0x6F; /** P2PKH address on testnet */
export const WALLY_ADDRESS_VERSION_P2PKH_LIQUID = 0x39; /** P2PKH address on liquid v1 */
export const WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST = 0xEB; /** P2PKH address on liquid v1 regtest */
export const WALLY_ADDRESS_VERSION_P2PKH_LIQUID_TESTNET = 0x24; /** P2PKH address on liquid v1 testnet */
export const WALLY_ADDRESS_VERSION_P2SH_MAINNET = 0x05; /** P2SH address on mainnet */
export const WALLY_ADDRESS_VERSION_P2SH_TESTNET = 0xC4; /** P2SH address on testnet */
export const WALLY_ADDRESS_VERSION_P2SH_LIQUID = 0x27; /** P2SH address on liquid v1 */
export const WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST = 0x4B; /** P2SH address on liquid v1 regtest */
export const WALLY_ADDRESS_VERSION_P2SH_LIQUID_TESTNET = 0x13; /** P2SH address on liquid v1 testnet */
export const WALLY_ADDRESS_VERSION_WIF_MAINNET = 0x80; /** Wallet Import Format on mainnet */
export const WALLY_ADDRESS_VERSION_WIF_TESTNET = 0xEF; /** Wallet Import Format on testnet */
export const WALLY_SCRIPT_TYPE_UNKNOWN = 0x0;
export const WALLY_SCRIPT_TYPE_OP_RETURN = 0x1;
export const WALLY_SCRIPT_TYPE_P2PKH = 0x2;
export const WALLY_SCRIPT_TYPE_P2SH = 0x4;
export const WALLY_SCRIPT_TYPE_P2WPKH = 0x8;
export const WALLY_SCRIPT_TYPE_P2WSH = 0x10;
export const WALLY_SCRIPT_TYPE_MULTISIG = 0x20;
export const WALLY_SCRIPT_TYPE_P2TR = 0x40;
export const WALLY_SCRIPTPUBKEY_P2PKH_LEN = 25; /** OP_DUP OP_HASH160 [HASH160] OP_EQUALVERIFY OP_CHECKSIG */
export const WALLY_SCRIPTPUBKEY_P2SH_LEN = 23; /** OP_HASH160 [HASH160] OP_EQUAL */
export const WALLY_SCRIPTPUBKEY_P2WPKH_LEN = 22; /** OP_0 [HASH160] */
export const WALLY_SCRIPTPUBKEY_P2WSH_LEN = 34; /** OP_0 [SHA256] */
export const WALLY_SCRIPTPUBKEY_P2TR_LEN = 34; /** OP_1 [X-ONLY-PUBKEY] */
export const WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN = 83; /** OP_RETURN [80 bytes of data] */
export const WALLY_MAX_OP_RETURN_LEN = 80; /* Maximum length of OP_RETURN data push */
export const WALLY_SCRIPTSIG_P2PKH_MAX_LEN = 140; /** [SIG+SIGHASH] [PUBKEY] */
export const WALLY_WITNESSSCRIPT_MAX_LEN = 42; /** (PUSH OF)0 [Up to 40 bytes of data] */
export const WALLY_SCRIPT_VARINT_MAX_SIZE = 9;
export const WALLY_SCRIPT_HASH160 = 0x1; /** hash160 input bytes before using them */
export const WALLY_SCRIPT_SHA256 = 0x2; /** sha256 input bytes before using them */
export const WALLY_SCRIPT_AS_PUSH = 0x4; /** Return a push of the generated script */
export const WALLY_SCRIPT_MULTISIG_SORTED = 0x8; /** Sort public keys (BIP67) */
export const WALLY_OK = 0; /** Success */
export const WALLY_ERROR = -1; /** General error */
export const WALLY_EINVAL = -2; /** Invalid argument */
export const WALLY_ENOMEM = -3; /** malloc() failed */
export const WALLY_SECP_RANDOMIZE_LEN = 32;
export const WALLY_HOST_COMMITMENT_LEN = 32;
