/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: src/swig_go/temp_swig.i

package wallycore

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#cgo CXXFLAGS: -I./include -I/usr/local/include -I/c/usr/local/include -IC:/usr/local/include
#cgo LDFLAGS: -L/usr/local/lib -L/usr/local/lib64 -L/c/usr/local/lib -LC:/usr/local/lib -L${SRCDIR}/build/Release -L${SRCDIR}/src/.libs -L${SRCDIR}/src/secp256k1/.libs -lwallycore 

typedef long long swig_type_1;
typedef _gostring_ swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
typedef _gostring_ swig_type_5;
typedef long long swig_type_6;
typedef long long swig_type_7;
typedef _gostring_ swig_type_8;
typedef long long swig_type_9;
typedef _gostring_ swig_type_10;
typedef long long swig_type_11;
typedef long long swig_type_12;
typedef long long swig_type_13;
typedef long long swig_type_14;
typedef long long swig_type_15;
typedef long long swig_type_16;
typedef long long swig_type_17;
typedef long long swig_type_18;
typedef long long swig_type_19;
typedef long long swig_type_20;
typedef long long swig_type_21;
typedef long long swig_type_22;
typedef long long swig_type_23;
typedef long long swig_type_24;
typedef long long swig_type_25;
typedef long long swig_type_26;
typedef long long swig_type_27;
typedef long long swig_type_28;
typedef long long swig_type_29;
typedef long long swig_type_30;
typedef long long swig_type_31;
typedef long long swig_type_32;
typedef long long swig_type_33;
typedef long long swig_type_34;
typedef long long swig_type_35;
typedef long long swig_type_36;
typedef long long swig_type_37;
typedef long long swig_type_38;
typedef long long swig_type_39;
typedef long long swig_type_40;
typedef long long swig_type_41;
typedef long long swig_type_42;
typedef long long swig_type_43;
typedef long long swig_type_44;
typedef long long swig_type_45;
typedef long long swig_type_46;
typedef long long swig_type_47;
typedef long long swig_type_48;
typedef long long swig_type_49;
typedef long long swig_type_50;
typedef long long swig_type_51;
typedef long long swig_type_52;
typedef long long swig_type_53;
typedef long long swig_type_54;
typedef long long swig_type_55;
typedef long long swig_type_56;
typedef long long swig_type_57;
typedef long long swig_type_58;
typedef long long swig_type_59;
typedef long long swig_type_60;
typedef long long swig_type_61;
typedef long long swig_type_62;
typedef long long swig_type_63;
typedef long long swig_type_64;
typedef long long swig_type_65;
typedef long long swig_type_66;
typedef long long swig_type_67;
typedef long long swig_type_68;
typedef long long swig_type_69;
typedef long long swig_type_70;
typedef long long swig_type_71;
typedef _gostring_ swig_type_72;
typedef _gostring_ swig_type_73;
typedef _gostring_ swig_type_74;
typedef long long swig_type_75;
typedef _gostring_ swig_type_76;
typedef long long swig_type_77;
typedef long long swig_type_78;
typedef long long swig_type_79;
typedef _gostring_ swig_type_80;
typedef long long swig_type_81;
typedef _gostring_ swig_type_82;
typedef _gostring_ swig_type_83;
typedef long long swig_type_84;
typedef _gostring_ swig_type_85;
typedef _gostring_ swig_type_86;
typedef _gostring_ swig_type_87;
typedef _gostring_ swig_type_88;
typedef long long swig_type_89;
typedef _gostring_ swig_type_90;
typedef long long swig_type_91;
typedef _gostring_ swig_type_92;
typedef _gostring_ swig_type_93;
typedef _gostring_ swig_type_94;
typedef _gostring_ swig_type_95;
typedef _gostring_ swig_type_96;
typedef long long swig_type_97;
typedef _gostring_ swig_type_98;
typedef _gostring_ swig_type_99;
typedef _gostring_ swig_type_100;
typedef long long swig_type_101;
typedef long long swig_type_102;
typedef long long swig_type_103;
typedef long long swig_type_104;
typedef long long swig_type_105;
typedef long long swig_type_106;
typedef long long swig_type_107;
typedef long long swig_type_108;
typedef long long swig_type_109;
typedef long long swig_type_110;
typedef long long swig_type_111;
typedef _gostring_ swig_type_112;
typedef long long swig_type_113;
typedef _gostring_ swig_type_114;
typedef long long swig_type_115;
typedef long long swig_type_116;
typedef _gostring_ swig_type_117;
typedef long long swig_type_118;
typedef _gostring_ swig_type_119;
typedef _gostring_ swig_type_120;
typedef _gostring_ swig_type_121;
typedef long long swig_type_122;
typedef long long swig_type_123;
typedef long long swig_type_124;
typedef long long swig_type_125;
typedef long long swig_type_126;
typedef long long swig_type_127;
typedef long long swig_type_128;
typedef long long swig_type_129;
typedef long long swig_type_130;
typedef long long swig_type_131;
typedef long long swig_type_132;
typedef long long swig_type_133;
typedef long long swig_type_134;
typedef long long swig_type_135;
typedef long long swig_type_136;
typedef long long swig_type_137;
typedef long long swig_type_138;
typedef long long swig_type_139;
typedef long long swig_type_140;
typedef long long swig_type_141;
typedef long long swig_type_142;
typedef long long swig_type_143;
typedef long long swig_type_144;
typedef long long swig_type_145;
typedef _gostring_ swig_type_146;
typedef long long swig_type_147;
typedef long long swig_type_148;
typedef long long swig_type_149;
typedef long long swig_type_150;
typedef long long swig_type_151;
typedef long long swig_type_152;
typedef long long swig_type_153;
typedef long long swig_type_154;
typedef long long swig_type_155;
typedef long long swig_type_156;
typedef long long swig_type_157;
typedef long long swig_type_158;
typedef long long swig_type_159;
typedef long long swig_type_160;
typedef long long swig_type_161;
typedef long long swig_type_162;
typedef long long swig_type_163;
typedef long long swig_type_164;
typedef long long swig_type_165;
typedef long long swig_type_166;
typedef long long swig_type_167;
typedef long long swig_type_168;
typedef long long swig_type_169;
typedef long long swig_type_170;
typedef long long swig_type_171;
typedef long long swig_type_172;
typedef long long swig_type_173;
typedef long long swig_type_174;
typedef long long swig_type_175;
typedef long long swig_type_176;
typedef long long swig_type_177;
typedef long long swig_type_178;
typedef long long swig_type_179;
typedef long long swig_type_180;
typedef long long swig_type_181;
typedef long long swig_type_182;
typedef long long swig_type_183;
typedef long long swig_type_184;
typedef long long swig_type_185;
typedef long long swig_type_186;
typedef long long swig_type_187;
typedef long long swig_type_188;
typedef long long swig_type_189;
typedef long long swig_type_190;
typedef long long swig_type_191;
typedef long long swig_type_192;
typedef long long swig_type_193;
typedef long long swig_type_194;
typedef long long swig_type_195;
typedef long long swig_type_196;
typedef long long swig_type_197;
typedef long long swig_type_198;
typedef long long swig_type_199;
typedef long long swig_type_200;
typedef long long swig_type_201;
typedef long long swig_type_202;
typedef long long swig_type_203;
typedef long long swig_type_204;
typedef long long swig_type_205;
typedef long long swig_type_206;
typedef long long swig_type_207;
typedef long long swig_type_208;
typedef long long swig_type_209;
typedef long long swig_type_210;
typedef long long swig_type_211;
typedef long long swig_type_212;
typedef long long swig_type_213;
typedef long long swig_type_214;
typedef long long swig_type_215;
typedef long long swig_type_216;
typedef long long swig_type_217;
typedef long long swig_type_218;
typedef long long swig_type_219;
typedef long long swig_type_220;
typedef long long swig_type_221;
typedef long long swig_type_222;
typedef long long swig_type_223;
typedef long long swig_type_224;
typedef long long swig_type_225;
typedef long long swig_type_226;
typedef long long swig_type_227;
typedef long long swig_type_228;
typedef long long swig_type_229;
typedef long long swig_type_230;
typedef long long swig_type_231;
typedef long long swig_type_232;
typedef long long swig_type_233;
typedef long long swig_type_234;
typedef long long swig_type_235;
typedef long long swig_type_236;
typedef long long swig_type_237;
typedef long long swig_type_238;
typedef long long swig_type_239;
typedef long long swig_type_240;
typedef long long swig_type_241;
typedef long long swig_type_242;
typedef long long swig_type_243;
typedef long long swig_type_244;
typedef long long swig_type_245;
typedef long long swig_type_246;
typedef long long swig_type_247;
typedef long long swig_type_248;
typedef long long swig_type_249;
typedef long long swig_type_250;
typedef long long swig_type_251;
typedef long long swig_type_252;
typedef long long swig_type_253;
typedef long long swig_type_254;
typedef long long swig_type_255;
typedef long long swig_type_256;
typedef long long swig_type_257;
typedef long long swig_type_258;
typedef long long swig_type_259;
typedef long long swig_type_260;
typedef long long swig_type_261;
typedef long long swig_type_262;
typedef long long swig_type_263;
typedef long long swig_type_264;
typedef long long swig_type_265;
typedef long long swig_type_266;
typedef long long swig_type_267;
typedef long long swig_type_268;
typedef long long swig_type_269;
typedef long long swig_type_270;
typedef long long swig_type_271;
typedef long long swig_type_272;
typedef long long swig_type_273;
typedef long long swig_type_274;
typedef long long swig_type_275;
typedef long long swig_type_276;
typedef long long swig_type_277;
typedef long long swig_type_278;
typedef long long swig_type_279;
typedef long long swig_type_280;
typedef long long swig_type_281;
typedef long long swig_type_282;
typedef long long swig_type_283;
typedef long long swig_type_284;
typedef long long swig_type_285;
typedef long long swig_type_286;
typedef long long swig_type_287;
typedef long long swig_type_288;
typedef long long swig_type_289;
typedef long long swig_type_290;
typedef long long swig_type_291;
typedef long long swig_type_292;
typedef long long swig_type_293;
typedef long long swig_type_294;
typedef long long swig_type_295;
typedef long long swig_type_296;
typedef long long swig_type_297;
typedef long long swig_type_298;
typedef long long swig_type_299;
typedef long long swig_type_300;
typedef long long swig_type_301;
typedef long long swig_type_302;
typedef long long swig_type_303;
typedef long long swig_type_304;
typedef long long swig_type_305;
typedef long long swig_type_306;
typedef long long swig_type_307;
typedef long long swig_type_308;
typedef long long swig_type_309;
typedef long long swig_type_310;
typedef long long swig_type_311;
typedef long long swig_type_312;
typedef long long swig_type_313;
typedef long long swig_type_314;
typedef long long swig_type_315;
typedef long long swig_type_316;
typedef long long swig_type_317;
typedef long long swig_type_318;
typedef long long swig_type_319;
typedef long long swig_type_320;
typedef long long swig_type_321;
typedef long long swig_type_322;
typedef long long swig_type_323;
typedef long long swig_type_324;
typedef long long swig_type_325;
typedef long long swig_type_326;
typedef long long swig_type_327;
typedef long long swig_type_328;
typedef long long swig_type_329;
typedef long long swig_type_330;
typedef long long swig_type_331;
typedef long long swig_type_332;
typedef long long swig_type_333;
typedef long long swig_type_334;
typedef long long swig_type_335;
typedef long long swig_type_336;
extern void _wrap_Swig_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_wallycore_d8a377d8fe8cbbab(swig_intgo arg1);
extern swig_intgo _wrap_wally_init_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_cleanup_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_bzero_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_1 arg2);
extern swig_intgo _wrap_wally_free_string_wallycore_d8a377d8fe8cbbab(swig_type_2 arg1);
extern swig_intgo _wrap_wally_secp_randomize_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_3 arg2);
extern swig_intgo _wrap_wally_hex_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_4 arg2, swig_voidp arg3);
extern swig_intgo _wrap_wally_hex_to_bytes_wallycore_d8a377d8fe8cbbab(swig_type_5 arg1, swig_voidp arg2, swig_type_6 arg3, swig_voidp arg4);
extern swig_intgo _wrap_wally_base58_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_7 arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_wally_base58_to_bytes_wallycore_d8a377d8fe8cbbab(swig_type_8 arg1, uintptr_t arg2, swig_voidp arg3, swig_type_9 arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_base58_get_length_wallycore_d8a377d8fe8cbbab(swig_type_10 arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_is_elements_build_wallycore_d8a377d8fe8cbbab(swig_voidp arg1);
extern swig_intgo _wrap_wally_scrypt_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_11 arg2, swig_voidp arg3, swig_type_12 arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7, swig_voidp arg8, swig_type_13 arg9);
extern swig_intgo _wrap_wally_aes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_14 arg2, swig_voidp arg3, swig_type_15 arg4, uintptr_t arg5, swig_voidp arg6, swig_type_16 arg7);
extern swig_intgo _wrap_wally_aes_cbc_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_17 arg2, swig_voidp arg3, swig_type_18 arg4, swig_voidp arg5, swig_type_19 arg6, uintptr_t arg7, swig_voidp arg8, swig_type_20 arg9, swig_voidp arg10);
extern swig_intgo _wrap_wally_sha256_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_21 arg2, swig_voidp arg3, swig_type_22 arg4);
extern swig_intgo _wrap_wally_sha256_midstate_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_23 arg2, swig_voidp arg3, swig_type_24 arg4);
extern swig_intgo _wrap_wally_sha256d_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_25 arg2, swig_voidp arg3, swig_type_26 arg4);
extern swig_intgo _wrap_wally_sha512_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_27 arg2, swig_voidp arg3, swig_type_28 arg4);
extern swig_intgo _wrap_wally_hash160_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_29 arg2, swig_voidp arg3, swig_type_30 arg4);
extern swig_intgo _wrap_wally_hmac_sha256_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_31 arg2, swig_voidp arg3, swig_type_32 arg4, swig_voidp arg5, swig_type_33 arg6);
extern swig_intgo _wrap_wally_hmac_sha512_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_34 arg2, swig_voidp arg3, swig_type_35 arg4, swig_voidp arg5, swig_type_36 arg6);
extern swig_intgo _wrap_wally_pbkdf2_hmac_sha256_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_37 arg2, swig_voidp arg3, swig_type_38 arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7, swig_type_39 arg8);
extern swig_intgo _wrap_wally_pbkdf2_hmac_sha512_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_40 arg2, swig_voidp arg3, swig_type_41 arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7, swig_type_42 arg8);
extern swig_intgo _wrap_EC_FLAGS_ALL_wallycore_d8a377d8fe8cbbab(void);
extern swig_intgo _wrap_wally_ec_private_key_verify_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_43 arg2);
extern swig_intgo _wrap_wally_ec_public_key_verify_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_44 arg2);
extern swig_intgo _wrap_wally_ec_public_key_from_private_key_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_45 arg2, swig_voidp arg3, swig_type_46 arg4);
extern swig_intgo _wrap_wally_ec_public_key_decompress_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_47 arg2, swig_voidp arg3, swig_type_48 arg4);
extern swig_intgo _wrap_wally_ec_public_key_negate_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_49 arg2, swig_voidp arg3, swig_type_50 arg4);
extern swig_intgo _wrap_wally_ec_sig_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_51 arg2, swig_voidp arg3, swig_type_52 arg4, uintptr_t arg5, swig_voidp arg6, swig_type_53 arg7);
extern swig_intgo _wrap_wally_ec_sig_normalize_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_54 arg2, swig_voidp arg3, swig_type_55 arg4);
extern swig_intgo _wrap_wally_ec_sig_to_der_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_56 arg2, swig_voidp arg3, swig_type_57 arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_ec_sig_from_der_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_58 arg2, swig_voidp arg3, swig_type_59 arg4);
extern swig_intgo _wrap_wally_ec_sig_verify_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_60 arg2, swig_voidp arg3, swig_type_61 arg4, uintptr_t arg5, swig_voidp arg6, swig_type_62 arg7);
extern swig_intgo _wrap_wally_ec_sig_to_public_key_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_63 arg2, swig_voidp arg3, swig_type_64 arg4, swig_voidp arg5, swig_type_65 arg6);
extern swig_intgo _wrap_BITCOIN_MESSAGE_MAX_LEN_wallycore_d8a377d8fe8cbbab(void);
extern swig_intgo _wrap_wally_format_bitcoin_message_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_66 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_67 arg5, swig_voidp arg6);
extern swig_intgo _wrap_wally_ecdh_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_68 arg2, swig_voidp arg3, swig_type_69 arg4, swig_voidp arg5, swig_type_70 arg6);
extern swig_intgo _wrap_wally_addr_segwit_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_71 arg2, swig_type_72 arg3, uintptr_t arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_addr_segwit_to_bytes_wallycore_d8a377d8fe8cbbab(swig_type_73 arg1, swig_type_74 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_75 arg5, swig_voidp arg6);
extern swig_intgo _wrap_wally_address_to_scriptpubkey_wallycore_d8a377d8fe8cbbab(swig_type_76 arg1, uintptr_t arg2, swig_voidp arg3, swig_type_77 arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_scriptpubkey_to_address_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_78 arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_wally_wif_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_79 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_wif_to_bytes_wallycore_d8a377d8fe8cbbab(swig_type_80 arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_type_81 arg5);
extern swig_intgo _wrap_wally_wif_is_uncompressed_wallycore_d8a377d8fe8cbbab(swig_type_82 arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_wif_to_public_key_wallycore_d8a377d8fe8cbbab(swig_type_83 arg1, uintptr_t arg2, swig_voidp arg3, swig_type_84 arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_bip32_key_to_address_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_wally_bip32_key_to_addr_segwit_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_85 arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_wally_wif_to_address_wallycore_d8a377d8fe8cbbab(swig_type_86 arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_wally_confidential_addr_to_addr_wallycore_d8a377d8fe8cbbab(swig_type_87 arg1, uintptr_t arg2, swig_voidp arg3);
extern swig_intgo _wrap_wally_confidential_addr_to_ec_public_key_wallycore_d8a377d8fe8cbbab(swig_type_88 arg1, uintptr_t arg2, swig_voidp arg3, swig_type_89 arg4);
extern swig_intgo _wrap_wally_confidential_addr_from_addr_wallycore_d8a377d8fe8cbbab(swig_type_90 arg1, uintptr_t arg2, swig_voidp arg3, swig_type_91 arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_confidential_addr_to_addr_segwit_wallycore_d8a377d8fe8cbbab(swig_type_92 arg1, swig_type_93 arg2, swig_type_94 arg3, swig_voidp arg4);
extern swig_intgo _wrap_wally_confidential_addr_segwit_to_ec_public_key_wallycore_d8a377d8fe8cbbab(swig_type_95 arg1, swig_type_96 arg2, swig_voidp arg3, swig_type_97 arg4);
extern swig_intgo _wrap_wally_confidential_addr_from_addr_segwit_wallycore_d8a377d8fe8cbbab(swig_type_98 arg1, swig_type_99 arg2, swig_type_100 arg3, swig_voidp arg4, swig_type_101 arg5, swig_voidp arg6);
extern swig_intgo _wrap_bip32_key_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_bip32_key_init_alloc_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_type_102 arg5, swig_voidp arg6, swig_type_103 arg7, swig_voidp arg8, swig_type_104 arg9, swig_voidp arg10, swig_type_105 arg11, swig_voidp arg12, swig_type_106 arg13, uintptr_t arg14);
extern swig_intgo _wrap_bip32_key_from_seed_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_107 arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_bip32_key_serialize_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_type_108 arg4);
extern swig_intgo _wrap_bip32_key_unserialize_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_109 arg2, uintptr_t arg3);
extern swig_intgo _wrap_bip32_key_from_parent_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_bip32_key_from_parent_path_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_type_110 arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_bip32_key_with_tweak_from_parent_path_alloc_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_type_111 arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_bip32_key_to_base58_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3);
extern swig_intgo _wrap_bip32_key_from_base58_wallycore_d8a377d8fe8cbbab(swig_type_112 arg1, uintptr_t arg2);
extern swig_intgo _wrap_bip32_key_strip_private_key_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_bip32_key_get_fingerprint_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_113 arg3);
extern swig_intgo _wrap_bip39_get_languages_wallycore_d8a377d8fe8cbbab(swig_voidp arg1);
extern swig_intgo _wrap_bip39_get_wordlist_wallycore_d8a377d8fe8cbbab(swig_type_114 arg1, uintptr_t arg2);
extern swig_intgo _wrap_bip39_get_word_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_115 arg2, swig_voidp arg3);
extern swig_intgo _wrap_bip39_mnemonic_from_bytes_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_116 arg3, swig_voidp arg4);
extern swig_intgo _wrap_bip39_mnemonic_to_bytes_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_117 arg2, swig_voidp arg3, swig_type_118 arg4, swig_voidp arg5);
extern swig_intgo _wrap_bip39_mnemonic_validate_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_119 arg2);
extern swig_intgo _wrap_bip39_mnemonic_to_seed_wallycore_d8a377d8fe8cbbab(swig_type_120 arg1, swig_type_121 arg2, swig_voidp arg3, swig_type_122 arg4, swig_voidp arg5);
extern swig_intgo _wrap_WALLY_TX_ISSUANCE_FLAG_wallycore_d8a377d8fe8cbbab(void);
extern swig_intgo _wrap_WALLY_TX_PEGIN_FLAG_wallycore_d8a377d8fe8cbbab(void);
extern swig_intgo _wrap_wally_tx_witness_stack_init_alloc_wallycore_d8a377d8fe8cbbab(swig_type_123 arg1, uintptr_t arg2);
extern swig_intgo _wrap_wally_tx_witness_stack_clone_alloc_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_wally_tx_witness_stack_add_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_124 arg3);
extern swig_intgo _wrap_wally_tx_witness_stack_add_dummy_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_wally_tx_witness_stack_set_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_125 arg2, swig_voidp arg3, swig_type_126 arg4);
extern swig_intgo _wrap_wally_tx_witness_stack_set_dummy_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_127 arg2, uintptr_t arg3);
extern swig_intgo _wrap_wally_tx_witness_stack_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_tx_input_init_alloc_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_128 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5, swig_type_129 arg6, uintptr_t arg7, uintptr_t arg8);
extern swig_intgo _wrap_wally_tx_input_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_tx_output_init_alloc_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_130 arg3, uintptr_t arg4);
extern swig_intgo _wrap_wally_tx_output_clone_alloc_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_wally_tx_output_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_tx_init_alloc_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_type_131 arg3, swig_type_132 arg4, uintptr_t arg5);
extern swig_intgo _wrap_wally_tx_clone_alloc_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern swig_intgo _wrap_wally_tx_add_input_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_wally_tx_add_input_at_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern swig_intgo _wrap_wally_tx_add_raw_input_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_133 arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6, swig_type_134 arg7, uintptr_t arg8, uintptr_t arg9);
extern swig_intgo _wrap_wally_tx_add_raw_input_at_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_type_135 arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7, swig_type_136 arg8, uintptr_t arg9, uintptr_t arg10);
extern swig_intgo _wrap_wally_tx_remove_input_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_137 arg2);
extern swig_intgo _wrap_wally_tx_set_input_script_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_138 arg2, swig_voidp arg3, swig_type_139 arg4);
extern swig_intgo _wrap_wally_tx_set_input_witness_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_140 arg2, uintptr_t arg3);
extern swig_intgo _wrap_wally_tx_add_output_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_wally_tx_add_output_at_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern swig_intgo _wrap_wally_tx_add_raw_output_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_type_141 arg4, uintptr_t arg5);
extern swig_intgo _wrap_wally_tx_add_raw_output_at_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_type_142 arg5, uintptr_t arg6);
extern swig_intgo _wrap_wally_tx_remove_output_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_143 arg2);
extern swig_intgo _wrap_wally_tx_get_witness_count_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_tx_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_tx_get_txid_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_144 arg3);
extern swig_intgo _wrap_wally_tx_get_length_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3);
extern swig_intgo _wrap_wally_tx_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_145 arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_wally_tx_from_hex_wallycore_d8a377d8fe8cbbab(swig_type_146 arg1, uintptr_t arg2, uintptr_t arg3);
extern swig_intgo _wrap_wally_tx_to_bytes_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_type_147 arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_tx_to_hex_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3);
extern swig_intgo _wrap_wally_tx_get_weight_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_tx_get_vsize_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_tx_vsize_from_weight_wallycore_d8a377d8fe8cbbab(swig_type_148 arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_tx_get_total_output_satoshi_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_wally_tx_get_btc_signature_hash_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_149 arg2, swig_voidp arg3, swig_type_150 arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7, swig_voidp arg8, swig_type_151 arg9);
extern swig_intgo _wrap_wally_tx_get_signature_hash_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_152 arg2, swig_voidp arg3, swig_type_153 arg4, swig_voidp arg5, swig_type_154 arg6, uintptr_t arg7, uintptr_t arg8, uintptr_t arg9, uintptr_t arg10, uintptr_t arg11, swig_voidp arg12, swig_type_155 arg13);
extern swig_intgo _wrap_wally_tx_is_coinbase_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_tx_elements_input_issuance_set_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_156 arg3, swig_voidp arg4, swig_type_157 arg5, swig_voidp arg6, swig_type_158 arg7, swig_voidp arg8, swig_type_159 arg9, swig_voidp arg10, swig_type_160 arg11, swig_voidp arg12, swig_type_161 arg13);
extern swig_intgo _wrap_wally_tx_elements_input_issuance_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_tx_elements_input_init_alloc_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_162 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5, swig_type_163 arg6, uintptr_t arg7, swig_voidp arg8, swig_type_164 arg9, swig_voidp arg10, swig_type_165 arg11, swig_voidp arg12, swig_type_166 arg13, swig_voidp arg14, swig_type_167 arg15, swig_voidp arg16, swig_type_168 arg17, swig_voidp arg18, swig_type_169 arg19, uintptr_t arg20, uintptr_t arg21);
extern swig_intgo _wrap_wally_tx_elements_input_is_pegin_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_tx_elements_output_commitment_set_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_170 arg3, swig_voidp arg4, swig_type_171 arg5, swig_voidp arg6, swig_type_172 arg7, swig_voidp arg8, swig_type_173 arg9, swig_voidp arg10, swig_type_174 arg11);
extern swig_intgo _wrap_wally_tx_elements_output_commitment_free_wallycore_d8a377d8fe8cbbab(uintptr_t arg1);
extern swig_intgo _wrap_wally_tx_elements_output_init_alloc_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_175 arg2, swig_voidp arg3, swig_type_176 arg4, swig_voidp arg5, swig_type_177 arg6, swig_voidp arg7, swig_type_178 arg8, swig_voidp arg9, swig_type_179 arg10, swig_voidp arg11, swig_type_180 arg12, uintptr_t arg13);
extern swig_intgo _wrap_wally_tx_add_elements_raw_input_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_181 arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6, swig_type_182 arg7, uintptr_t arg8, swig_voidp arg9, swig_type_183 arg10, swig_voidp arg11, swig_type_184 arg12, swig_voidp arg13, swig_type_185 arg14, swig_voidp arg15, swig_type_186 arg16, swig_voidp arg17, swig_type_187 arg18, swig_voidp arg19, swig_type_188 arg20, uintptr_t arg21, uintptr_t arg22);
extern swig_intgo _wrap_wally_tx_add_elements_raw_input_at_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_type_189 arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7, swig_type_190 arg8, uintptr_t arg9, swig_voidp arg10, swig_type_191 arg11, swig_voidp arg12, swig_type_192 arg13, swig_voidp arg14, swig_type_193 arg15, swig_voidp arg16, swig_type_194 arg17, swig_voidp arg18, swig_type_195 arg19, swig_voidp arg20, swig_type_196 arg21, uintptr_t arg22, uintptr_t arg23);
extern swig_intgo _wrap_wally_tx_add_elements_raw_output_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_197 arg3, swig_voidp arg4, swig_type_198 arg5, swig_voidp arg6, swig_type_199 arg7, swig_voidp arg8, swig_type_200 arg9, swig_voidp arg10, swig_type_201 arg11, swig_voidp arg12, swig_type_202 arg13, uintptr_t arg14);
extern swig_intgo _wrap_wally_tx_add_elements_raw_output_at_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_type_203 arg4, swig_voidp arg5, swig_type_204 arg6, swig_voidp arg7, swig_type_205 arg8, swig_voidp arg9, swig_type_206 arg10, swig_voidp arg11, swig_type_207 arg12, swig_voidp arg13, swig_type_208 arg14, uintptr_t arg15);
extern swig_intgo _wrap_wally_tx_is_elements_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_tx_confidential_value_from_satoshi_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_209 arg3);
extern swig_intgo _wrap_wally_tx_confidential_value_to_satoshi_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_210 arg2, uintptr_t arg3);
extern swig_intgo _wrap_wally_tx_get_elements_signature_hash_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_211 arg2, swig_voidp arg3, swig_type_212 arg4, swig_voidp arg5, swig_type_213 arg6, uintptr_t arg7, uintptr_t arg8, swig_voidp arg9, swig_type_214 arg10);
extern swig_intgo _wrap_wally_tx_elements_issuance_generate_entropy_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_215 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_216 arg5, swig_voidp arg6, swig_type_217 arg7);
extern swig_intgo _wrap_wally_tx_elements_issuance_calculate_asset_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_218 arg2, swig_voidp arg3, swig_type_219 arg4);
extern swig_intgo _wrap_wally_tx_elements_issuance_calculate_reissuance_token_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_220 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_221 arg5);
extern swig_intgo _wrap_wally_asset_generator_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_222 arg2, swig_voidp arg3, swig_type_223 arg4, swig_voidp arg5, swig_type_224 arg6);
extern swig_intgo _wrap_wally_asset_final_vbf_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_type_225 arg2, swig_type_226 arg3, swig_voidp arg4, swig_type_227 arg5, swig_voidp arg6, swig_type_228 arg7, swig_voidp arg8, swig_type_229 arg9);
extern swig_intgo _wrap_wally_asset_value_commitment_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_230 arg3, swig_voidp arg4, swig_type_231 arg5, swig_voidp arg6, swig_type_232 arg7);
extern swig_intgo _wrap_wally_asset_rangeproof_with_nonce_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_233 arg3, swig_voidp arg4, swig_type_234 arg5, swig_voidp arg6, swig_type_235 arg7, swig_voidp arg8, swig_type_236 arg9, swig_voidp arg10, swig_type_237 arg11, swig_voidp arg12, swig_type_238 arg13, swig_voidp arg14, swig_type_239 arg15, uintptr_t arg16, swig_intgo arg17, swig_intgo arg18, swig_voidp arg19, swig_type_240 arg20, swig_voidp arg21);
extern swig_intgo _wrap_wally_asset_rangeproof_wallycore_d8a377d8fe8cbbab(uintptr_t arg1, swig_voidp arg2, swig_type_241 arg3, swig_voidp arg4, swig_type_242 arg5, swig_voidp arg6, swig_type_243 arg7, swig_voidp arg8, swig_type_244 arg9, swig_voidp arg10, swig_type_245 arg11, swig_voidp arg12, swig_type_246 arg13, swig_voidp arg14, swig_type_247 arg15, swig_voidp arg16, swig_type_248 arg17, uintptr_t arg18, swig_intgo arg19, swig_intgo arg20, swig_voidp arg21, swig_type_249 arg22, swig_voidp arg23);
extern swig_intgo _wrap_wally_asset_surjectionproof_size_wallycore_d8a377d8fe8cbbab(swig_type_250 arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_asset_surjectionproof_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_251 arg2, swig_voidp arg3, swig_type_252 arg4, swig_voidp arg5, swig_type_253 arg6, swig_voidp arg7, swig_type_254 arg8, swig_voidp arg9, swig_type_255 arg10, swig_voidp arg11, swig_type_256 arg12, swig_voidp arg13, swig_type_257 arg14, swig_voidp arg15, swig_type_258 arg16, swig_voidp arg17);
extern swig_intgo _wrap_wally_asset_unblind_with_nonce_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_259 arg2, swig_voidp arg3, swig_type_260 arg4, swig_voidp arg5, swig_type_261 arg6, swig_voidp arg7, swig_type_262 arg8, swig_voidp arg9, swig_type_263 arg10, swig_voidp arg11, swig_type_264 arg12, swig_voidp arg13, swig_type_265 arg14, swig_voidp arg15, swig_type_266 arg16, uintptr_t arg17);
extern swig_intgo _wrap_wally_asset_unblind_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_267 arg2, swig_voidp arg3, swig_type_268 arg4, swig_voidp arg5, swig_type_269 arg6, swig_voidp arg7, swig_type_270 arg8, swig_voidp arg9, swig_type_271 arg10, swig_voidp arg11, swig_type_272 arg12, swig_voidp arg13, swig_type_273 arg14, swig_voidp arg15, swig_type_274 arg16, swig_voidp arg17, swig_type_275 arg18, uintptr_t arg19);
extern swig_intgo _wrap_wally_asset_blinding_key_from_seed_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_276 arg2, swig_voidp arg3, swig_type_277 arg4);
extern swig_intgo _wrap_wally_asset_blinding_key_to_ec_private_key_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_278 arg2, swig_voidp arg3, swig_type_279 arg4, swig_voidp arg5, swig_type_280 arg6);
extern swig_intgo _wrap_wally_asset_pak_whitelistproof_size_wallycore_d8a377d8fe8cbbab(swig_type_281 arg1, swig_voidp arg2);
extern swig_intgo _wrap_wally_asset_pak_whitelistproof_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_282 arg2, swig_voidp arg3, swig_type_283 arg4, swig_type_284 arg5, swig_voidp arg6, swig_type_285 arg7, swig_voidp arg8, swig_type_286 arg9, swig_voidp arg10, swig_type_287 arg11, swig_voidp arg12, swig_type_288 arg13, swig_voidp arg14);
extern swig_intgo _wrap_wally_scriptpubkey_get_type_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_289 arg2, swig_voidp arg3);
extern swig_intgo _wrap_wally_scriptpubkey_p2pkh_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_290 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_291 arg5, swig_voidp arg6);
extern swig_intgo _wrap_wally_scriptsig_p2pkh_from_sig_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_292 arg2, swig_voidp arg3, swig_type_293 arg4, uintptr_t arg5, swig_voidp arg6, swig_type_294 arg7, swig_voidp arg8);
extern swig_intgo _wrap_wally_witness_p2wpkh_from_sig_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_295 arg2, swig_voidp arg3, swig_type_296 arg4, uintptr_t arg5, uintptr_t arg6);
extern swig_intgo _wrap_wally_scriptsig_p2pkh_from_der_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_297 arg2, swig_voidp arg3, swig_type_298 arg4, swig_voidp arg5, swig_type_299 arg6, swig_voidp arg7);
extern swig_intgo _wrap_wally_witness_p2wpkh_from_der_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_300 arg2, swig_voidp arg3, swig_type_301 arg4, uintptr_t arg5);
extern swig_intgo _wrap_wally_scriptpubkey_op_return_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_302 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_303 arg5, swig_voidp arg6);
extern swig_intgo _wrap_wally_scriptpubkey_p2sh_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_304 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_305 arg5, swig_voidp arg6);
extern swig_intgo _wrap_wally_scriptpubkey_multisig_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_306 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5, swig_type_307 arg6, swig_voidp arg7);
extern swig_intgo _wrap_wally_scriptsig_multisig_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_308 arg2, swig_voidp arg3, swig_type_309 arg4, uintptr_t arg5, swig_type_310 arg6, uintptr_t arg7, swig_voidp arg8, swig_type_311 arg9, swig_voidp arg10);
extern swig_intgo _wrap_wally_witness_multisig_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_312 arg2, swig_voidp arg3, swig_type_313 arg4, uintptr_t arg5, swig_type_314 arg6, uintptr_t arg7, uintptr_t arg8);
extern swig_intgo _wrap_wally_scriptpubkey_csv_2of2_then_1_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_315 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5, swig_type_316 arg6, swig_voidp arg7);
extern swig_intgo _wrap_wally_scriptpubkey_csv_2of2_then_1_from_bytes_opt_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_317 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5, swig_type_318 arg6, swig_voidp arg7);
extern swig_intgo _wrap_wally_scriptpubkey_csv_2of3_then_2_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_319 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5, swig_type_320 arg6, swig_voidp arg7);
extern swig_intgo _wrap_wally_script_push_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_321 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_322 arg5, swig_voidp arg6);
extern swig_intgo _wrap_wally_witness_program_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_323 arg2, uintptr_t arg3, swig_voidp arg4, swig_type_324 arg5, swig_voidp arg6);
extern swig_intgo _wrap_wally_elements_pegout_script_size_wallycore_d8a377d8fe8cbbab(swig_type_325 arg1, swig_type_326 arg2, swig_type_327 arg3, swig_type_328 arg4, swig_voidp arg5);
extern swig_intgo _wrap_wally_elements_pegout_script_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_329 arg2, swig_voidp arg3, swig_type_330 arg4, swig_voidp arg5, swig_type_331 arg6, swig_voidp arg7, swig_type_332 arg8, uintptr_t arg9, swig_voidp arg10, swig_type_333 arg11, swig_voidp arg12);
extern swig_intgo _wrap_wally_elements_pegin_contract_script_from_bytes_wallycore_d8a377d8fe8cbbab(swig_voidp arg1, swig_type_334 arg2, swig_voidp arg3, swig_type_335 arg4, uintptr_t arg5, swig_voidp arg6, swig_type_336 arg7, swig_voidp arg8);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_wallycore_d8a377d8fe8cbbab(C.swig_intgo(_swig_i_0)))
	return swig_r
}

const WALLY_OK int = 0
const WALLY_ERROR int = -1
const WALLY_EINVAL int = -2
const WALLY_ENOMEM int = -3
func Wally_init(arg1 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_init_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_cleanup(arg1 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_cleanup_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_bzero(arg1 uintptr, arg2 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_bzero_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_1(_swig_i_1)))
	return swig_r
}

func Wally_free_string(arg1 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_wally_free_string_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_2)(unsafe.Pointer(&_swig_i_0))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

const WALLY_SECP_RANDOMIZE_LEN int = 32
func Wally_secp_randomize(arg1 *byte, arg2 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_secp_randomize_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_3(_swig_i_1)))
	return swig_r
}

func Wally_hex_from_bytes(arg1 *byte, arg2 int64, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_hex_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_4(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func Wally_hex_to_bytes(arg1 string, arg2 *byte, arg3 int64, arg4 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_hex_to_bytes_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_5)(unsafe.Pointer(&_swig_i_0)), C.swig_voidp(_swig_i_1), C.swig_type_6(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

const BASE58_FLAG_CHECKSUM int = 0x1
const BASE58_CHECKSUM_LEN int = 4
func Wally_base58_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_base58_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_7(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func Wally_base58_to_bytes(arg1 string, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_base58_to_bytes_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_8)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_9(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_base58_get_length(arg1 string, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_base58_get_length_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_10)(unsafe.Pointer(&_swig_i_0)), C.swig_voidp(_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_is_elements_build(arg1 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_wally_is_elements_build_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0)))
	return swig_r
}


/**
* Create a base 58 encoded string representing binary data.
*
* :param bytes: Binary data to convert.
* :param flags: Pass ``BASE58_FLAG_CHECKSUM`` if ``bytes`` should have a
*|    checksum calculated and appended before converting to base 58.
 */
func WallyBase58FromBytes(bytes []byte, flags uint32) (base58 string, ret int) {
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	ret = Wally_base58_from_bytes(&bytes[0], int64(len(bytes)), wally_flags, &base58)
	return
}

/**
 * Decode a base 58 encoded string back into into binary data.
 *
 * :param str_in: Base 58 encoded string to decode.
 * :param flags: Pass ``BASE58_FLAG_CHECKSUM`` if ``bytes_out`` should have a
 *|    checksum validated and removed before returning. In this case, ``len``
 *|    must contain an extra ``BASE58_CHECKSUM_LEN`` bytes to calculate the
 *|    checksum into. The returned length will not include the checksum.
 * :param len: The length of ``bytes_out`` in bytes.
 */
func WallyBase58ToBytes(base58 string, flags uint32, byteLength int) ([]byte, int) {
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	bytes := make([]byte, byteLength)
	written := int64(0)
	ret := Wally_base58_to_bytes(base58, wally_flags, &bytes[0], int64(len(bytes)), &written)
	return bytes[:written], ret
}

func Wally_scrypt(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 Uint32_t, arg7 Uint32_t, arg8 *byte, arg9 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_wally_scrypt_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_11(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_12(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_13(_swig_i_8)))
	return swig_r
}

const AES_BLOCK_LEN int = 16
const AES_KEY_LEN_128 int = 16
const AES_KEY_LEN_192 int = 24
const AES_KEY_LEN_256 int = 32
const AES_FLAG_ENCRYPT int = 1
const AES_FLAG_DECRYPT int = 2
func Wally_aes(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 *byte, arg7 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_aes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_14(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_15(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_16(_swig_i_6)))
	return swig_r
}

func Wally_aes_cbc(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 Uint32_t, arg8 *byte, arg9 int64, arg10 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_wally_aes_cbc_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_17(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_18(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_19(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_20(_swig_i_8), C.swig_voidp(_swig_i_9)))
	return swig_r
}

const SHA256_LEN int = 32
const SHA512_LEN int = 64
func Wally_sha256(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_sha256_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_21(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_22(_swig_i_3)))
	return swig_r
}

func Wally_sha256_midstate(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_sha256_midstate_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_23(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_24(_swig_i_3)))
	return swig_r
}

func Wally_sha256d(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_sha256d_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_25(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_26(_swig_i_3)))
	return swig_r
}

func Wally_sha512(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_sha512_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_27(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_28(_swig_i_3)))
	return swig_r
}

const HASH160_LEN int = 20
func Wally_hash160(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_hash160_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_29(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_30(_swig_i_3)))
	return swig_r
}

const HMAC_SHA256_LEN int = 32
const HMAC_SHA512_LEN int = 64
func Wally_hmac_sha256(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_hmac_sha256_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_31(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_32(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_33(_swig_i_5)))
	return swig_r
}

func Wally_hmac_sha512(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_hmac_sha512_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_34(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_35(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_36(_swig_i_5)))
	return swig_r
}

const PBKDF2_HMAC_SHA256_LEN int = 32
const PBKDF2_HMAC_SHA512_LEN int = 64
func Wally_pbkdf2_hmac_sha256(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 Uint32_t, arg7 *byte, arg8 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_wally_pbkdf2_hmac_sha256_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_37(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_38(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_39(_swig_i_7)))
	return swig_r
}

func Wally_pbkdf2_hmac_sha512(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 Uint32_t, arg7 *byte, arg8 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_wally_pbkdf2_hmac_sha512_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_40(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_41(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_42(_swig_i_7)))
	return swig_r
}

const EC_PRIVATE_KEY_LEN int = 32
const EC_PUBLIC_KEY_LEN int = 33
const EC_PUBLIC_KEY_UNCOMPRESSED_LEN int = 65
const EC_MESSAGE_HASH_LEN int = 32
const EC_SIGNATURE_LEN int = 64
const EC_SIGNATURE_RECOVERABLE_LEN int = 65
const EC_SIGNATURE_DER_MAX_LEN int = 72
const EC_SIGNATURE_DER_MAX_LOW_R_LEN int = 71
const EC_FLAG_ECDSA int = 0x1
const EC_FLAG_SCHNORR int = 0x2
const EC_FLAG_GRIND_R int = 0x4
const EC_FLAG_RECOVERABLE int = 0x8
func _swig_getEC_FLAGS_ALL() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_EC_FLAGS_ALL_wallycore_d8a377d8fe8cbbab())
	return swig_r
}

var EC_FLAGS_ALL int = _swig_getEC_FLAGS_ALL()
func Wally_ec_private_key_verify(arg1 *byte, arg2 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_ec_private_key_verify_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_43(_swig_i_1)))
	return swig_r
}

func Wally_ec_public_key_verify(arg1 *byte, arg2 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_ec_public_key_verify_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_44(_swig_i_1)))
	return swig_r
}

func Wally_ec_public_key_from_private_key(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_ec_public_key_from_private_key_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_45(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_46(_swig_i_3)))
	return swig_r
}

func Wally_ec_public_key_decompress(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_ec_public_key_decompress_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_47(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_48(_swig_i_3)))
	return swig_r
}

func Wally_ec_public_key_negate(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_ec_public_key_negate_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_49(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_50(_swig_i_3)))
	return swig_r
}

func Wally_ec_sig_from_bytes(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 *byte, arg7 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_ec_sig_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_51(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_52(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_53(_swig_i_6)))
	return swig_r
}

func Wally_ec_sig_normalize(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_ec_sig_normalize_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_54(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_55(_swig_i_3)))
	return swig_r
}

func Wally_ec_sig_to_der(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_ec_sig_to_der_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_56(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_57(_swig_i_3), C.swig_voidp(_swig_i_4)))
	return swig_r
}

func Wally_ec_sig_from_der(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_ec_sig_from_der_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_58(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_59(_swig_i_3)))
	return swig_r
}

func Wally_ec_sig_verify(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 *byte, arg7 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_ec_sig_verify_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_60(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_61(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_62(_swig_i_6)))
	return swig_r
}

func Wally_ec_sig_to_public_key(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_ec_sig_to_public_key_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_63(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_64(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_65(_swig_i_5)))
	return swig_r
}

func _swig_getBITCOIN_MESSAGE_MAX_LEN() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_BITCOIN_MESSAGE_MAX_LEN_wallycore_d8a377d8fe8cbbab())
	return swig_r
}

var BITCOIN_MESSAGE_MAX_LEN int = _swig_getBITCOIN_MESSAGE_MAX_LEN()
const BITCOIN_MESSAGE_FLAG_HASH int = 1
func Wally_format_bitcoin_message(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_format_bitcoin_message_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_66(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_67(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func Wally_ecdh(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_ecdh_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_68(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_69(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_70(_swig_i_5)))
	return swig_r
}


/**
 * RIPEMD-160(SHA-256(m))
 *
 * :param bytes: The message to hash
 */
func WallyHash160(bytes []byte) (hash160 [HASH160_LEN]byte, ret int){
	ret = Wally_hash160(&bytes[0], int64(len(bytes)), &hash160[0], int64(HASH160_LEN))
	return
}

/**
 * Create a public key from a private key.
 *
 * :param priv_key: The private key to create a public key from.
 */
func WallyEcPublicKeyFromPrivateKey(privkey [EC_PRIVATE_KEY_LEN]byte) (pubkey [EC_PUBLIC_KEY_LEN]byte, ret int) {
	ret = Wally_ec_public_key_from_private_key(&privkey[0], int64(len(privkey)), &pubkey[0], int64(len(pubkey)))
	return
}

/**
 * Sign a message hash with a private key, producing a compact signature.
 *
 * :param priv_key: The private key to sign with.
 * :param bytes: The message hash to sign.
 * :param flags: EC_FLAG_ flag values indicating desired behavior.
 */
func WallyEcSigFromBytes(privkey [EC_PRIVATE_KEY_LEN]byte, message []byte, flags uint32) (signature [EC_SIGNATURE_LEN]byte, ret int) {
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	ret = Wally_ec_sig_from_bytes(&privkey[0], int64(len(privkey)), &message[0], int64(len(message)), wally_flags, &signature[0], int64(len(signature)))
	return
}

/**
 * Convert a signature to low-s form.
 *
 * :param sig: The compact signature to convert.
 */
func WallyEcSigNormalize(signature [EC_SIGNATURE_LEN]byte) (lowS [EC_SIGNATURE_LEN]byte, ret int) {
	ret = Wally_ec_sig_normalize(&signature[0], int64(len(signature)), &lowS[0], int64(len(lowS)))
	return
}

/**
 * Convert a compact signature to DER encoding.
 *
 * :param sig: The compact signature to convert.
 */
func WallyEcSigToDer(signature [EC_SIGNATURE_LEN]byte) (der [EC_SIGNATURE_DER_MAX_LEN]byte, ret int) {
	written := int64(0)
	ret = Wally_ec_sig_to_der(&signature[0], int64(len(signature)), &der[0], int64(len(der)), &written)
	return
}

/**
 * Convert a DER encoded signature to a compact signature.
 *
 * :param bytes: The DER encoded signature to convert.
 */
func WallyEcSigFromDer(sigDer []byte) (signature [EC_SIGNATURE_LEN]byte, ret int) {
	ret = Wally_ec_sig_from_der(&sigDer[0], int64(len(sigDer)), &signature[0], int64(len(signature)))
	return
}

const WALLY_WIF_FLAG_COMPRESSED int = 0x0
const WALLY_WIF_FLAG_UNCOMPRESSED int = 0x1
const WALLY_CA_PREFIX_LIQUID int = 0x0c
const WALLY_CA_PREFIX_LIQUID_REGTEST int = 0x04
const WALLY_NETWORK_BITCOIN_MAINNET int = 0x01
const WALLY_NETWORK_BITCOIN_TESTNET int = 0x02
const WALLY_NETWORK_LIQUID int = 0x03
const WALLY_NETWORK_LIQUID_REGTEST int = 0x04
const WALLY_ADDRESS_TYPE_P2PKH int = 0x01
const WALLY_ADDRESS_TYPE_P2SH_P2WPKH int = 0x02
const WALLY_ADDRESS_TYPE_P2WPKH int = 0x04
const WALLY_ADDRESS_VERSION_P2PKH_MAINNET int = 0x00
const WALLY_ADDRESS_VERSION_P2PKH_TESTNET int = 0x6F
const WALLY_ADDRESS_VERSION_P2PKH_LIQUID int = 0x39
const WALLY_ADDRESS_VERSION_P2PKH_LIQUID_REGTEST int = 0xEB
const WALLY_ADDRESS_VERSION_P2SH_MAINNET int = 0x05
const WALLY_ADDRESS_VERSION_P2SH_TESTNET int = 0xC4
const WALLY_ADDRESS_VERSION_P2SH_LIQUID int = 0x27
const WALLY_ADDRESS_VERSION_P2SH_LIQUID_REGTEST int = 0x4B
const WALLY_ADDRESS_VERSION_WIF_MAINNET int = 0x80
const WALLY_ADDRESS_VERSION_WIF_TESTNET int = 0xEF
func Wally_addr_segwit_from_bytes(arg1 *byte, arg2 int64, arg3 string, arg4 Uint32_t, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_addr_segwit_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_71(_swig_i_1), *(*C.swig_type_72)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func Wally_addr_segwit_to_bytes(arg1 string, arg2 string, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_addr_segwit_to_bytes_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_73)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_74)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_75(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func Wally_address_to_scriptpubkey(arg1 string, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_address_to_scriptpubkey_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_76)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_77(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_scriptpubkey_to_address(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_scriptpubkey_to_address_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_78(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func Wally_wif_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_wif_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_79(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4)))
	return swig_r
}

func Wally_wif_to_bytes(arg1 string, arg2 Uint32_t, arg3 Uint32_t, arg4 *byte, arg5 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_wif_to_bytes_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_80)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_81(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_wif_is_uncompressed(arg1 string, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_wif_is_uncompressed_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_82)(unsafe.Pointer(&_swig_i_0)), C.swig_voidp(_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_wif_to_public_key(arg1 string, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_wif_to_public_key_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_83)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_84(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_bip32_key_to_address(arg1 Ext_key, arg2 Uint32_t, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_bip32_key_to_address_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func Wally_bip32_key_to_addr_segwit(arg1 Ext_key, arg2 string, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_bip32_key_to_addr_segwit_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), *(*C.swig_type_85)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func Wally_wif_to_address(arg1 string, arg2 Uint32_t, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_wif_to_address_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_86)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_confidential_addr_to_addr(arg1 string, arg2 Uint32_t, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_confidential_addr_to_addr_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_87)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_confidential_addr_to_ec_public_key(arg1 string, arg2 Uint32_t, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_confidential_addr_to_ec_public_key_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_88)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_89(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_confidential_addr_from_addr(arg1 string, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_confidential_addr_from_addr_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_90)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_91(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_confidential_addr_to_addr_segwit(arg1 string, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_confidential_addr_to_addr_segwit_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_92)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_93)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_94)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func Wally_confidential_addr_segwit_to_ec_public_key(arg1 string, arg2 string, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_confidential_addr_segwit_to_ec_public_key_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_95)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_96)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_type_97(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func Wally_confidential_addr_from_addr_segwit(arg1 string, arg2 string, arg3 string, arg4 *byte, arg5 int64, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_confidential_addr_from_addr_segwit_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_98)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_99)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_100)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3), C.swig_type_101(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}


/**
 * Convert a Wallet Import Format string to a private key.
 *
 * :param wif: Private key in Wallet Import Format.
 * :param prefix: Prefix byte to use, e.g. 0x80, 0xef.
 * :param flags: Pass ``WALLY_WIF_FLAG_COMPRESSED`` if the corresponding pubkey is compressed,
 *|    otherwise ``WALLY_WIF_FLAG_UNCOMPRESSED``.
 */
func WallyWifToBytes(wif string, prefix uint32, flags uint32) (privkey [EC_PRIVATE_KEY_LEN]byte, ret int) {
	wally_prefix := SwigcptrUint32_t(uintptr(unsafe.Pointer(&prefix)))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	ret = Wally_wif_to_bytes(wif, wally_prefix, wally_flags, &privkey[0], int64(len(privkey)))
	return
}

/**
 * Extract the address from a confidential address.
 *
 * :param address: The base58 encoded confidential address to extract the address from.
 * :param prefix: The confidential address prefix byte, e.g. WALLY_CA_PREFIX_LIQUID.
 */
func WallyConfidentialAddrToAddr(confidentialAddress string, prefix uint32) (address string, ret int) {
	wally_prefix := SwigcptrUint32_t(uintptr(unsafe.Pointer(&prefix)))
	ret = Wally_confidential_addr_to_addr(confidentialAddress, wally_prefix, &address)
	return
}

/**
 * Extract the blinding public key from a confidential address.
 *
 * :param address: The base58 encoded confidential address to extract the public key from.
 * :param prefix: The confidential address prefix byte, e.g. WALLY_CA_PREFIX_LIQUID.
 */
func WallyConfidentialAddrToECPublicKey(confidentialAddress string, prefix uint32) (pubKey [EC_PUBLIC_KEY_LEN]byte, ret int) {
	wally_prefix := SwigcptrUint32_t(uintptr(unsafe.Pointer(&prefix)))
	ret = Wally_confidential_addr_to_ec_public_key(confidentialAddress, wally_prefix, &pubKey[0], int64(len(pubKey)))
	return
}

/**
 * Create a confidential address from an address and blinding public key.
 *
 * :param address: The base58 encoded address to make confidential.
 * :param prefix: The confidential address prefix byte, e.g. WALLY_CA_PREFIX_LIQUID.
 * :param pub_key: The blinding public key to associate with ``address``.
 */
func WallyConfidentialAddrFromAddr(addrBase58 string, prefix uint32, blindPubKey [EC_PUBLIC_KEY_LEN]byte) (confidentialAddress string, ret int) {
	wally_prefix := SwigcptrUint32_t(uintptr(unsafe.Pointer(&prefix)))
	ret = Wally_confidential_addr_from_addr(addrBase58, wally_prefix, &blindPubKey[0], int64(len(blindPubKey)), &confidentialAddress)
	return
}

const BIP32_ENTROPY_LEN_128 int = 16
const BIP32_ENTROPY_LEN_256 int = 32
const BIP32_ENTROPY_LEN_512 int = 64
const BIP32_KEY_FINGERPRINT_LEN int = 4
const BIP32_SERIALIZED_LEN int = 78
const BIP32_INITIAL_HARDENED_CHILD int = 0x80000000
const BIP32_FLAG_KEY_PRIVATE int = 0x0
const BIP32_FLAG_KEY_PUBLIC int = 0x1
const BIP32_FLAG_SKIP_HASH int = 0x2
const BIP32_FLAG_KEY_TWEAK_SUM int = 0x4
const BIP32_VER_MAIN_PUBLIC int = 0x0488B21E
const BIP32_VER_MAIN_PRIVATE int = 0x0488ADE4
const BIP32_VER_TEST_PUBLIC int = 0x043587CF
const BIP32_VER_TEST_PRIVATE int = 0x04358394
func Bip32_key_free(arg1 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Bip32_key_init_alloc(arg1 Uint32_t, arg2 Uint32_t, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64, arg14 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_init_alloc_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_102(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_103(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_104(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_105(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_106(_swig_i_12), C.uintptr_t(_swig_i_13)))
	return swig_r
}

func Bip32_key_from_seed(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_from_seed_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_107(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	return swig_r
}

func Bip32_key_serialize(arg1 Ext_key, arg2 Uint32_t, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_bip32_key_serialize_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_108(_swig_i_3)))
	return swig_r
}

func Bip32_key_unserialize(arg1 *byte, arg2 int64, arg3 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_unserialize_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_109(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Bip32_key_from_parent(arg1 Ext_key, arg2 Uint32_t, arg3 Uint32_t, arg4 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_from_parent_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	return swig_r
}

func Bip32_key_from_parent_path(arg1 Ext_key, arg2 Uint32_t, arg3 int64, arg4 Uint32_t, arg5 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_from_parent_path_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_type_110(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	return swig_r
}

func Bip32_key_with_tweak_from_parent_path_alloc(arg1 Ext_key, arg2 Uint32_t, arg3 int64, arg4 Uint32_t, arg5 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_with_tweak_from_parent_path_alloc_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_type_111(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	return swig_r
}

func Bip32_key_to_base58(arg1 Ext_key, arg2 Uint32_t, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_bip32_key_to_base58_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func Bip32_key_from_base58(arg1 string, arg2 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_from_base58_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_112)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Bip32_key_strip_private_key(arg1 Ext_key) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_bip32_key_strip_private_key_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Bip32_key_get_fingerprint(arg1 Ext_key, arg2 *byte, arg3 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_bip32_key_get_fingerprint_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_113(_swig_i_2)))
	return swig_r
}


type CCharArray struct {
	P *byte
	Length int64
}

type ExtKey struct {
	ChainCode [32]byte
	Fingerprint [20]byte
	Depth uint8
	Pad [10]byte
	PrivKey [33]byte
	Index uint32
	Hash160 [20]byte
	Version uint32
	Pad2 [3]byte
	PubKey [33]byte
}
func (k *ExtKey) Swigcptr() uintptr {
	return uintptr(unsafe.Pointer(k))
}

/**
 * Create a new master extended key from entropy.
 *
 * This creates a new master key, i.e. the root of a new HD tree.
 * The entropy passed in may produce an invalid key. If this happens,
 * WALLY_ERROR will be returned and the caller should retry with
 * new entropy.
 *
 * :param seed: Entropy to use.
 * :param version: Either ``BIP32_VER_MAIN_PRIVATE`` or ``BIP32_VER_TEST_PRIVATE``,
 *|     indicating mainnet or testnet/regtest respectively.
 * :param flags: Either ``BIP32_FLAG_SKIP_HASH`` to skip hash160 calculation, or 0.
 */
func Bip32KeyFromSeed(seed []byte, version uint32, flags uint32) (extKey *ExtKey, ret int) {
	wally_version := SwigcptrUint32_t(uintptr(unsafe.Pointer(&version)))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	var tmp uintptr
	extKeyOut := SwigcptrExt_key(unsafe.Pointer(&tmp))
	ret = Bip32_key_from_seed(
		&seed[0],
		int64(len(seed)),
		wally_version,
		wally_flags,
		extKeyOut,
	)

	if ret == 0 {
		extKey = (*ExtKey)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(extKeyOut))))
	}
	return
}

/**
 * Serialize an extended key to memory using BIP32 format.
 *
 * :param extKey: The extended key to serialize.
 * :param flags: BIP32_FLAG_KEY_ Flags indicating which key to serialize. You can not
 *|        serialize a private extended key from a public extended key.
 */
func Bip32KeySerialize(extKey *ExtKey, flags uint32) (extKeyBytes [BIP32_SERIALIZED_LEN]byte) {
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	extKeyOut := CCharArray{&extKeyBytes[0], int64(BIP32_SERIALIZED_LEN)}

	Bip32_key_serialize(extKey, wally_flags, extKeyOut.P, extKeyOut.Length)
	return
}

/**
 * Convert an extended key to base58.
 *
 * :param extKey: The extended key.
 * :param flags: BIP32_FLAG_KEY_ Flags indicating which key to serialize. You can not
 *|        serialize a private extended key from a public extended key.
 */
func Bip32KeyToBase58(extKey *ExtKey, flags uint32) (xKeyBase58 string){
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))

	Bip32_key_to_base58(extKey, wally_flags, &xKeyBase58)
	return
}

/**
 * Convert a base58 encoded extended key to an extended key.
 *
 * :param xKeyBase58: The extended key in base58.
 */
func Bip32KeyFromBase58(xKeyBase58 string) (extKey *ExtKey, ret int){
	var tmp uintptr
	extKeyOut := SwigcptrExt_key(unsafe.Pointer(&tmp))
	ret = Bip32_key_from_base58(xKeyBase58, extKeyOut)
	if ret == 0 {
		extKey = (*ExtKey)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(extKeyOut))))
	}
	return
}

/**
 * Create a new child extended key from a parent extended key.
 *
 * :param extKey: The parent extended key.
 * :param childNum: The child number to create. Numbers greater
 *|           than or equal to ``BIP32_INITIAL_HARDENED_CHILD`` represent
 *|           hardened keys that cannot be created from public parent
 *|           extended keys.
 * :param flags: BIP32_FLAG_KEY_ Flags indicating the type of derivation wanted.
 *|       You can not derive a private child extended key from a public
 *|       parent extended key.
 */
func Bip32KeyFromParent(extKey *ExtKey, childNum uint32, flags uint32) (childExtKey *ExtKey, ret int){
	wally_childNum := SwigcptrUint32_t(uintptr(unsafe.Pointer(&childNum)))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	var tmp uintptr
	extKeyOut := SwigcptrExt_key(unsafe.Pointer(&tmp))

	ret = Bip32_key_from_parent(extKey, wally_childNum, wally_flags, extKeyOut)
	if ret == 0 {
		childExtKey = (*ExtKey)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(extKeyOut))))
	}
	return
}

/**
 * Create a new child extended key from a parent extended key and a path.
 *
 * :param extKey: The parent extended key.
 * :param childPath: The path of child numbers to create.
 * :param flags: BIP32_KEY_ Flags indicating the type of derivation wanted.
 */
func Bip32KeyFromParentPath(extKey *ExtKey, childPath []uint32, flags uint32) (childExtKey *ExtKey, ret int){
	wally_child_path := SwigcptrUint32_t(uintptr(unsafe.Pointer(&childPath[0])))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	var tmp uintptr
	extKeyOut := SwigcptrExt_key(unsafe.Pointer(&tmp))
	ret = Bip32_key_from_parent_path(extKey, wally_child_path, int64(len(childPath)), wally_flags, extKeyOut)
	if ret == 0 {
		childExtKey = (*ExtKey)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(extKeyOut))))
	}
	return
}

/**
 * Create a new child extended key from a parent extended key and a uint32 slice path.
 *
 * :param extKey: The parent extended key.
 * :param childPath: The path of child numbers to create.
 * :param flags: BIP32_KEY_ Flags indicating the type of derivation wanted.
 */
func Bip32KeyFromUint32ParentPath(extKey *ExtKey, childPath []uint32, flags uint32) (childExtKey *ExtKey, ret int){
	wally_child_path := SwigcptrUint32_t(uintptr(unsafe.Pointer(&childPath[0])))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	var tmp uintptr
	extKeyOut := SwigcptrExt_key(unsafe.Pointer(&tmp))
	ret = Bip32_key_from_parent_path(extKey, wally_child_path, int64(len(childPath)), wally_flags, extKeyOut)
	if ret == 0 {
		childExtKey = (*ExtKey)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(extKeyOut))))
	}
	return
}

const BIP39_ENTROPY_LEN_128 int = 16
const BIP39_ENTROPY_LEN_160 int = 20
const BIP39_ENTROPY_LEN_192 int = 24
const BIP39_ENTROPY_LEN_224 int = 28
const BIP39_ENTROPY_LEN_256 int = 32
const BIP39_ENTROPY_LEN_288 int = 36
const BIP39_ENTROPY_LEN_320 int = 40
const BIP39_SEED_LEN_512 int = 64
const BIP39_WORDLIST_LEN int = 2048
func Bip39_get_languages(arg1 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_bip39_get_languages_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0)))
	return swig_r
}

func Bip39_get_wordlist(arg1 string, arg2 Words) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_bip39_get_wordlist_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_114)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Bip39_get_word(arg1 Words, arg2 int64, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_bip39_get_word_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_115(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func Bip39_mnemonic_from_bytes(arg1 Words, arg2 *byte, arg3 int64, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_bip39_mnemonic_from_bytes_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_116(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func Bip39_mnemonic_to_bytes(arg1 Words, arg2 string, arg3 *byte, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_bip39_mnemonic_to_bytes_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), *(*C.swig_type_117)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_type_118(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func Bip39_mnemonic_validate(arg1 Words, arg2 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_bip39_mnemonic_validate_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), *(*C.swig_type_119)(unsafe.Pointer(&_swig_i_1))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func Bip39_mnemonic_to_seed(arg1 string, arg2 string, arg3 *byte, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_bip39_mnemonic_to_seed_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_120)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_121)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_type_122(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

const WALLY_TX_SEQUENCE_FINAL int = 0xffffffff
const WALLY_TX_VERSION_1 int = 1
const WALLY_TX_VERSION_2 int = 2
const WALLY_TX_IS_ELEMENTS int = 1
const WALLY_TX_IS_ISSUANCE int = 2
const WALLY_TX_IS_PEGIN int = 4
const WALLY_TX_IS_COINBASE int = 8
const WALLY_SATOSHI_PER_BTC int = 100000000
const WALLY_BTC_MAX int = 21000000
const WALLY_TXHASH_LEN int = 32
const WALLY_TX_FLAG_USE_WITNESS int = 0x1
const WALLY_TX_FLAG_USE_ELEMENTS int = 0x2
const WALLY_TX_FLAG_ALLOW_PARTIAL int = 0x4
const WALLY_TX_FLAG_BLINDED_INITIAL_ISSUANCE int = 0x1
const WALLY_TX_DUMMY_NULL int = 0x1
const WALLY_TX_DUMMY_SIG int = 0x2
const WALLY_TX_DUMMY_SIG_LOW_R int = 0x4
const WALLY_SIGHASH_ALL int = 0x01
const WALLY_SIGHASH_NONE int = 0x02
const WALLY_SIGHASH_SINGLE int = 0x03
const WALLY_SIGHASH_FORKID int = 0x40
const WALLY_SIGHASH_ANYONECANPAY int = 0x80
const WALLY_TX_ASSET_CT_VALUE_PREFIX_A int = 8
const WALLY_TX_ASSET_CT_VALUE_PREFIX_B int = 9
const WALLY_TX_ASSET_CT_ASSET_PREFIX_A int = 10
const WALLY_TX_ASSET_CT_ASSET_PREFIX_B int = 11
const WALLY_TX_ASSET_CT_NONCE_PREFIX_A int = 2
const WALLY_TX_ASSET_CT_NONCE_PREFIX_B int = 3
const WALLY_TX_ASSET_TAG_LEN int = 32
const WALLY_TX_ASSET_CT_VALUE_LEN int = 33
const WALLY_TX_ASSET_CT_VALUE_UNBLIND_LEN int = 9
const WALLY_TX_ASSET_CT_ASSET_LEN int = 33
const WALLY_TX_ASSET_CT_NONCE_LEN int = 33
const WALLY_TX_ASSET_CT_LEN int = 33
func _swig_getWALLY_TX_ISSUANCE_FLAG() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_WALLY_TX_ISSUANCE_FLAG_wallycore_d8a377d8fe8cbbab())
	return swig_r
}

var WALLY_TX_ISSUANCE_FLAG int = _swig_getWALLY_TX_ISSUANCE_FLAG()
func _swig_getWALLY_TX_PEGIN_FLAG() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_WALLY_TX_PEGIN_FLAG_wallycore_d8a377d8fe8cbbab())
	return swig_r
}

var WALLY_TX_PEGIN_FLAG int = _swig_getWALLY_TX_PEGIN_FLAG()
const WALLY_TX_INDEX_MASK int = 0x3fffffff
func Wally_tx_witness_stack_init_alloc(arg1 int64, arg2 Wally_tx_witness_stack) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_witness_stack_init_alloc_wallycore_d8a377d8fe8cbbab(C.swig_type_123(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func Wally_tx_witness_stack_clone_alloc(arg1 Wally_tx_witness_stack, arg2 Wally_tx_witness_stack) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_witness_stack_clone_alloc_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func Wally_tx_witness_stack_add(arg1 Wally_tx_witness_stack, arg2 *byte, arg3 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_tx_witness_stack_add_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_124(_swig_i_2)))
	return swig_r
}

func Wally_tx_witness_stack_add_dummy(arg1 Wally_tx_witness_stack, arg2 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_witness_stack_add_dummy_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func Wally_tx_witness_stack_set(arg1 Wally_tx_witness_stack, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_tx_witness_stack_set_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_125(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_126(_swig_i_3)))
	return swig_r
}

func Wally_tx_witness_stack_set_dummy(arg1 Wally_tx_witness_stack, arg2 int64, arg3 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_witness_stack_set_dummy_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_127(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Wally_tx_witness_stack_free(arg1 Wally_tx_witness_stack) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_witness_stack_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_tx_input_init_alloc(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 *byte, arg6 int64, arg7 Wally_tx_witness_stack, arg8 Wally_tx_input) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_input_init_alloc_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_128(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_129(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7)))
	return swig_r
}

func Wally_tx_input_free(arg1 Wally_tx_input) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_input_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_tx_output_init_alloc(arg1 Uint64_t, arg2 *byte, arg3 int64, arg4 Wally_tx_output) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_output_init_alloc_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_130(_swig_i_2), C.uintptr_t(_swig_i_3)))
	return swig_r
}

func Wally_tx_output_clone_alloc(arg1 Wally_tx_output, arg2 Wally_tx_output) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_output_clone_alloc_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func Wally_tx_output_free(arg1 Wally_tx_output) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_output_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_tx_init_alloc(arg1 Uint32_t, arg2 Uint32_t, arg3 int64, arg4 int64, arg5 Wally_tx) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_init_alloc_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_type_131(_swig_i_2), C.swig_type_132(_swig_i_3), C.uintptr_t(_swig_i_4)))
	return swig_r
}

func Wally_tx_clone_alloc(arg1 Wally_tx, arg2 Uint32_t, arg3 Wally_tx) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_clone_alloc_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Wally_tx_add_input(arg1 Wally_tx, arg2 Wally_tx_input) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_input_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func Wally_tx_add_input_at(arg1 Wally_tx, arg2 Uint32_t, arg3 Wally_tx_input) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_input_at_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Wally_tx_add_raw_input(arg1 Wally_tx, arg2 *byte, arg3 int64, arg4 Uint32_t, arg5 Uint32_t, arg6 *byte, arg7 int64, arg8 Wally_tx_witness_stack, arg9 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_raw_input_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_133(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_134(_swig_i_6), C.uintptr_t(_swig_i_7), C.uintptr_t(_swig_i_8)))
	return swig_r
}

func Wally_tx_add_raw_input_at(arg1 Wally_tx, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 Uint32_t, arg7 *byte, arg8 int64, arg9 Wally_tx_witness_stack, arg10 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_raw_input_at_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_135(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_136(_swig_i_7), C.uintptr_t(_swig_i_8), C.uintptr_t(_swig_i_9)))
	return swig_r
}

func Wally_tx_remove_input(arg1 Wally_tx, arg2 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_remove_input_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_137(_swig_i_1)))
	return swig_r
}

func Wally_tx_set_input_script(arg1 Wally_tx, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_tx_set_input_script_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_138(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_139(_swig_i_3)))
	return swig_r
}

func Wally_tx_set_input_witness(arg1 Wally_tx, arg2 int64, arg3 Wally_tx_witness_stack) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_set_input_witness_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_140(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Wally_tx_add_output(arg1 Wally_tx, arg2 Wally_tx_output) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_output_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func Wally_tx_add_output_at(arg1 Wally_tx, arg2 Uint32_t, arg3 Wally_tx_output) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_output_at_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Wally_tx_add_raw_output(arg1 Wally_tx, arg2 Uint64_t, arg3 *byte, arg4 int64, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_raw_output_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_141(_swig_i_3), C.uintptr_t(_swig_i_4)))
	return swig_r
}

func Wally_tx_add_raw_output_at(arg1 Wally_tx, arg2 Uint32_t, arg3 Uint64_t, arg4 *byte, arg5 int64, arg6 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_raw_output_at_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_142(_swig_i_4), C.uintptr_t(_swig_i_5)))
	return swig_r
}

func Wally_tx_remove_output(arg1 Wally_tx, arg2 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_remove_output_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_143(_swig_i_1)))
	return swig_r
}

func Wally_tx_get_witness_count(arg1 Wally_tx, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_get_witness_count_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_tx_free(arg1 Wally_tx) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_tx_get_txid(arg1 Wally_tx, arg2 *byte, arg3 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_tx_get_txid_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_144(_swig_i_2)))
	return swig_r
}

func Wally_tx_get_length(arg1 Wally_tx, arg2 Uint32_t, arg3 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_tx_get_length_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func Wally_tx_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Wally_tx) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_145(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	return swig_r
}

func Wally_tx_from_hex(arg1 string, arg2 Uint32_t, arg3 Wally_tx) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_from_hex_wallycore_d8a377d8fe8cbbab(*(*C.swig_type_146)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func Wally_tx_to_bytes(arg1 Wally_tx, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_tx_to_bytes_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_147(_swig_i_3), C.swig_voidp(_swig_i_4)))
	return swig_r
}

func Wally_tx_to_hex(arg1 Wally_tx, arg2 Uint32_t, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_tx_to_hex_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func Wally_tx_get_weight(arg1 Wally_tx, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_get_weight_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_tx_get_vsize(arg1 Wally_tx, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_get_vsize_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_tx_vsize_from_weight(arg1 int64, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_vsize_from_weight_wallycore_d8a377d8fe8cbbab(C.swig_type_148(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_tx_get_total_output_satoshi(arg1 Wally_tx, arg2 Uint64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_get_total_output_satoshi_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func Wally_tx_get_btc_signature_hash(arg1 Wally_tx, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint64_t, arg6 Uint32_t, arg7 Uint32_t, arg8 *byte, arg9 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_wally_tx_get_btc_signature_hash_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_149(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_150(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_151(_swig_i_8)))
	return swig_r
}

func Wally_tx_get_signature_hash(arg1 Wally_tx, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 Uint32_t, arg8 Uint64_t, arg9 Uint32_t, arg10 Uint32_t, arg11 Uint32_t, arg12 *byte, arg13 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10.Swigcptr()
	_swig_i_10 := arg11.Swigcptr()
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_wally_tx_get_signature_hash_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_152(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_153(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_154(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7), C.uintptr_t(_swig_i_8), C.uintptr_t(_swig_i_9), C.uintptr_t(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_155(_swig_i_12)))
	return swig_r
}

func Wally_tx_is_coinbase(arg1 Wally_tx, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_is_coinbase_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_tx_elements_input_issuance_set(arg1 Wally_tx_input, arg2 *byte, arg3 int64, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_wally_tx_elements_input_issuance_set_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_156(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_157(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_158(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_159(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_160(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_161(_swig_i_12)))
	return swig_r
}

func Wally_tx_elements_input_issuance_free(arg1 Wally_tx_input) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_elements_input_issuance_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_tx_elements_input_init_alloc(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 *byte, arg6 int64, arg7 Wally_tx_witness_stack, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64, arg14 *byte, arg15 int64, arg16 *byte, arg17 int64, arg18 *byte, arg19 int64, arg20 Wally_tx_witness_stack, arg21 Wally_tx_input) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16
	_swig_i_16 := arg17
	_swig_i_17 := arg18
	_swig_i_18 := arg19
	_swig_i_19 := arg20.Swigcptr()
	_swig_i_20 := arg21.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_elements_input_init_alloc_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_162(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_163(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_164(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_165(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_166(_swig_i_12), C.swig_voidp(_swig_i_13), C.swig_type_167(_swig_i_14), C.swig_voidp(_swig_i_15), C.swig_type_168(_swig_i_16), C.swig_voidp(_swig_i_17), C.swig_type_169(_swig_i_18), C.uintptr_t(_swig_i_19), C.uintptr_t(_swig_i_20)))
	return swig_r
}

func Wally_tx_elements_input_is_pegin(arg1 Wally_tx_input, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_elements_input_is_pegin_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_tx_elements_output_commitment_set(arg1 Wally_tx_output, arg2 *byte, arg3 int64, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	swig_r = (int)(C._wrap_wally_tx_elements_output_commitment_set_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_170(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_171(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_172(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_173(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_174(_swig_i_10)))
	return swig_r
}

func Wally_tx_elements_output_commitment_free(arg1 Wally_tx_output) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_elements_output_commitment_free_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func Wally_tx_elements_output_init_alloc(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 *byte, arg8 int64, arg9 *byte, arg10 int64, arg11 *byte, arg12 int64, arg13 Wally_tx_output) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_elements_output_init_alloc_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_175(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_176(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_177(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_178(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_type_179(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_type_180(_swig_i_11), C.uintptr_t(_swig_i_12)))
	return swig_r
}

func Wally_tx_add_elements_raw_input(arg1 Wally_tx, arg2 *byte, arg3 int64, arg4 Uint32_t, arg5 Uint32_t, arg6 *byte, arg7 int64, arg8 Wally_tx_witness_stack, arg9 *byte, arg10 int64, arg11 *byte, arg12 int64, arg13 *byte, arg14 int64, arg15 *byte, arg16 int64, arg17 *byte, arg18 int64, arg19 *byte, arg20 int64, arg21 Wally_tx_witness_stack, arg22 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16
	_swig_i_16 := arg17
	_swig_i_17 := arg18
	_swig_i_18 := arg19
	_swig_i_19 := arg20
	_swig_i_20 := arg21.Swigcptr()
	_swig_i_21 := arg22.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_elements_raw_input_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_181(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_182(_swig_i_6), C.uintptr_t(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_type_183(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_type_184(_swig_i_11), C.swig_voidp(_swig_i_12), C.swig_type_185(_swig_i_13), C.swig_voidp(_swig_i_14), C.swig_type_186(_swig_i_15), C.swig_voidp(_swig_i_16), C.swig_type_187(_swig_i_17), C.swig_voidp(_swig_i_18), C.swig_type_188(_swig_i_19), C.uintptr_t(_swig_i_20), C.uintptr_t(_swig_i_21)))
	return swig_r
}

func Wally_tx_add_elements_raw_input_at(arg1 Wally_tx, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 Uint32_t, arg7 *byte, arg8 int64, arg9 Wally_tx_witness_stack, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64, arg14 *byte, arg15 int64, arg16 *byte, arg17 int64, arg18 *byte, arg19 int64, arg20 *byte, arg21 int64, arg22 Wally_tx_witness_stack, arg23 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16
	_swig_i_16 := arg17
	_swig_i_17 := arg18
	_swig_i_18 := arg19
	_swig_i_19 := arg20
	_swig_i_20 := arg21
	_swig_i_21 := arg22.Swigcptr()
	_swig_i_22 := arg23.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_elements_raw_input_at_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_189(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_190(_swig_i_7), C.uintptr_t(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_191(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_192(_swig_i_12), C.swig_voidp(_swig_i_13), C.swig_type_193(_swig_i_14), C.swig_voidp(_swig_i_15), C.swig_type_194(_swig_i_16), C.swig_voidp(_swig_i_17), C.swig_type_195(_swig_i_18), C.swig_voidp(_swig_i_19), C.swig_type_196(_swig_i_20), C.uintptr_t(_swig_i_21), C.uintptr_t(_swig_i_22)))
	return swig_r
}

func Wally_tx_add_elements_raw_output(arg1 Wally_tx, arg2 *byte, arg3 int64, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64, arg14 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_elements_raw_output_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_197(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_198(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_199(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_200(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_201(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_202(_swig_i_12), C.uintptr_t(_swig_i_13)))
	return swig_r
}

func Wally_tx_add_elements_raw_output_at(arg1 Wally_tx, arg2 Uint32_t, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 *byte, arg8 int64, arg9 *byte, arg10 int64, arg11 *byte, arg12 int64, arg13 *byte, arg14 int64, arg15 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_add_elements_raw_output_at_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_203(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_204(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_205(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_type_206(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_type_207(_swig_i_11), C.swig_voidp(_swig_i_12), C.swig_type_208(_swig_i_13), C.uintptr_t(_swig_i_14)))
	return swig_r
}

func Wally_tx_is_elements(arg1 Wally_tx, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_tx_is_elements_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_tx_confidential_value_from_satoshi(arg1 Uint64_t, arg2 *byte, arg3 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_tx_confidential_value_from_satoshi_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_209(_swig_i_2)))
	return swig_r
}

func Wally_tx_confidential_value_to_satoshi(arg1 *byte, arg2 int64, arg3 Uint64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_wally_tx_confidential_value_to_satoshi_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_210(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func Wally_tx_get_elements_signature_hash(arg1 Wally_tx, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 Uint32_t, arg8 Uint32_t, arg9 *byte, arg10 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_wally_tx_get_elements_signature_hash_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_211(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_212(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_213(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_type_214(_swig_i_9)))
	return swig_r
}

func Wally_tx_elements_issuance_generate_entropy(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_tx_elements_issuance_generate_entropy_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_215(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_216(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_217(_swig_i_6)))
	return swig_r
}

func Wally_tx_elements_issuance_calculate_asset(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_tx_elements_issuance_calculate_asset_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_218(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_219(_swig_i_3)))
	return swig_r
}

func Wally_tx_elements_issuance_calculate_reissuance_token(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_tx_elements_issuance_calculate_reissuance_token_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_220(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_221(_swig_i_4)))
	return swig_r
}


func charArrayToByteArray(script *uintptr, length uint64) (scriptBytes []byte) {
	if script == nil || length <= 0 {
		return
	}
	var b byte
	currentAddr := uintptr(unsafe.Pointer(script))
	for i := uint64(0); i < length; i++ {
		scriptBytes = append(scriptBytes, *(*byte)(unsafe.Pointer(currentAddr)))
		currentAddr = currentAddr + uintptr(unsafe.Sizeof(b))
	}
	return
}

type WallyTxWitnessItem struct {
	witness    *uintptr
	WitnessLen uint64
}

func (txwi WallyTxWitnessItem) WitnessToBytes() []byte {
	return charArrayToByteArray(txwi.witness, txwi.WitnessLen)
}

type WallyTxWitnessStack struct {
	items              *uintptr
	NumItems           uint64
	ItemsAllocationLen uint64
}

func (txws *WallyTxWitnessStack) Swigcptr() uintptr {
	return uintptr(unsafe.Pointer(txws))
}
func (txws WallyTxWitnessStack) ListItems() (items []*WallyTxWitnessItem) {
	structSize := unsafe.Sizeof(WallyTxWitnessItem{})
	items = make([]*WallyTxWitnessItem, txws.NumItems)
	if txws.NumItems < 1 {
		return
	}

	itemAddr := uintptr(unsafe.Pointer(txws.items))
	for i := uint64(0); i < txws.NumItems; i++ {
		items[i] = (*WallyTxWitnessItem)(unsafe.Pointer(itemAddr))
		itemAddr = itemAddr + structSize
	}
	return
}

type WallyTxInput struct {
	Txhash                      [WALLY_TXHASH_LEN]byte
	Index                       uint32
	Sequence                    uint32
	script                      *uintptr
	ScriptLen                   uint64
	witness                     *uintptr
	Features                    uint8
	BlindingNonce               [SHA256_LEN]byte
	Entropy                     [SHA256_LEN]byte
	issuanceAmount              *uintptr
	IssuanceAmountLen           uint64
	inflationKeys               *uintptr
	InflationKeysLen            uint64
	issuanceAmountRangeproof    *uintptr
	IssuanceAmountRangeproofLen uint64
	inflationKeysRangeproof     *uintptr
	InflationKeysRangeproofLen  uint64
	peginWitness                *uintptr
}

func (txi WallyTxInput) ScriptToBytes() []byte {
	return charArrayToByteArray(txi.script, txi.ScriptLen)
}
func (txi WallyTxInput) IssuanceAmountToBytes() []byte {
	return charArrayToByteArray(txi.issuanceAmount, txi.IssuanceAmountLen)
}
func (txi WallyTxInput) InflationKeysToBytes() []byte {
	return charArrayToByteArray(txi.inflationKeys, txi.InflationKeysLen)
}
func (txi WallyTxInput) IssuanceAmountRangeproofToBytes() []byte {
	return charArrayToByteArray(txi.issuanceAmountRangeproof, txi.IssuanceAmountRangeproofLen)
}
func (txi WallyTxInput) InflationKeysRangeproofToBytes() []byte {
	return charArrayToByteArray(txi.inflationKeysRangeproof, txi.InflationKeysRangeproofLen)
}
func (txi WallyTxInput) WitnessStack() (witnessStack *WallyTxWitnessStack) {
	if txi.witness != nil {
		witnessStack = (*WallyTxWitnessStack)(unsafe.Pointer(txi.witness))
	}
	return
}
func (txi WallyTxInput) PeginWitnessStack() (witnessStack *WallyTxWitnessStack) {
	if txi.peginWitness != nil {
		witnessStack = (*WallyTxWitnessStack)(unsafe.Pointer(txi.peginWitness))
	}
	return
}

type WallyTxOutput struct {
	Satoshi            uint64
	script             *uintptr
	ScriptLen          uint64
	Features           uint8
	asset              *uintptr
	AssetLen           uint64
	value              *uintptr
	ValueLen           uint64
	nonce              *uintptr
	NonceLen           uint64
	surjectionproof    *uintptr
	SurjectionproofLen uint64
	rangeproof         *uintptr
	RangeproofLen      uint64
}

func (txo WallyTxOutput) ScriptToBytes() []byte {
	return charArrayToByteArray(txo.script, txo.ScriptLen)
}
func (txo WallyTxOutput) AssetToBytes() []byte {
	return charArrayToByteArray(txo.asset, txo.AssetLen)
}
func (txo WallyTxOutput) ValueToBytes() []byte {
	return charArrayToByteArray(txo.value, txo.ValueLen)
}
func (txo WallyTxOutput) NonceToBytes() []byte {
	return charArrayToByteArray(txo.nonce, txo.NonceLen)
}
func (txo WallyTxOutput) SurjectionproofToBytes() []byte {
	return charArrayToByteArray(txo.surjectionproof, txo.SurjectionproofLen)
}
func (txo WallyTxOutput) RangeproofToBytes() []byte {
	return charArrayToByteArray(txo.rangeproof, txo.RangeproofLen)
}

type WallyTx struct {
	Version              uint32
	Locktime             uint32
	inputs               *uintptr
	NumInputs            uint64
	InputsAllocationLen  uint64
	outputs              *uintptr
	NumOutputs           uint64
	OutputsAllocationLen uint64
}

func (tx *WallyTx) Swigcptr() uintptr {
	return uintptr(unsafe.Pointer(tx))
}
func (tx WallyTx) ListInputs() (txInputs []*WallyTxInput) {
	structSize := unsafe.Sizeof(WallyTxInput{})
	txInputs = make([]*WallyTxInput, tx.NumInputs)
	if tx.NumInputs < 1 {
		return
	}

	inputAddr := uintptr(unsafe.Pointer(tx.inputs))
	for i := uint64(0); i < tx.NumInputs; i++ {
		txInputs[i] = (*WallyTxInput)(unsafe.Pointer(inputAddr))
		inputAddr = inputAddr + structSize
	}
	return
}
func (tx WallyTx) ListOutputs() (txOutputs []*WallyTxOutput) {
	structSize := unsafe.Sizeof(WallyTxOutput{})
	txOutputs = make([]*WallyTxOutput, tx.NumOutputs)
	if tx.NumOutputs < 1 {
		return
	}

	outputAddr := uintptr(unsafe.Pointer(tx.outputs))
	for i := uint64(0); i < tx.NumOutputs; i++ {
		txOutputs[i] = (*WallyTxOutput)(unsafe.Pointer(outputAddr))
		outputAddr = outputAddr + structSize
	}
	return
}

type WallyTxArgOutput uintptr

func (p WallyTxArgOutput) Swigcptr() uintptr {
	return (uintptr)(p)
}

func WallyTxFromHex(hex string, flags uint32) (wallyTx *WallyTx, ret int) {
	wallyTx = nil
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))

	var tempWallyTx uintptr
	var p_wally_tx WallyTxArgOutput
	p_wally_tx = (WallyTxArgOutput)(unsafe.Pointer(&tempWallyTx))

	ret = Wally_tx_from_hex(hex, wally_flags, p_wally_tx)

	if ret == 0 {
		wallyTx = (*WallyTx)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(p_wally_tx))))
	}

	return
}

/**
 * Get the virtual size of a transaction.
 *
 * :param tx: The transaction to get the virtual size of.
 */
func WallyTxGetVsize(wallyTx *WallyTx) (vsize int64, ret int) {
	ret = Wally_tx_get_vsize(wallyTx, &vsize)
	return
}

/**
 * Serialize a transaction to bytes.
 *
 * :param tx: The transaction to serialize.
 * :param flags: WALLY_TX_FLAG_ Flags controlling serialization options.
 * :param bytes_out: Destination for the serialized transaction.
 * :param len: Size of ``bytes_out`` in bytes.
 * :param written: Destination for the length of the serialized transaction.
 */
func WallyTxToBytes(wallyTx *WallyTx, flags uint32) (txbytes []byte, ret int) {
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	txbytesBuf := make([]byte, 16048)
	written := int64(0)

	ret = Wally_tx_to_bytes(wallyTx, wally_flags, &txbytesBuf[0], int64(len(txbytesBuf)), &written)
	if ret == WALLY_OK {
		txbytes = txbytesBuf[:written]
	}
	return
}

func WallyTxToHex(wallyTx *WallyTx, flags uint32) (hex string, ret int) {
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))

	ret = Wally_tx_to_hex(wallyTx, wally_flags, &hex)
	return
}

/**
 * Set the scriptsig for an input in a transaction.
 *
 * :param tx: The transaction to operate on.
 * :param index: The zero-based index of the input to set the script on.
 * :param script: The scriptSig for the input.
 * :param script_len: Size of ``script`` in bytes.
 */
func WallyTxSetInputScript(wallyTx *WallyTx, index int64, script []byte) (ret int) {
	ret = Wally_tx_set_input_script(wallyTx, index, &script[0], int64(len(script)))
	return
}

/**
 * Add a transaction input to a transaction.
 *
 * :param tx: The transaction to add the input to.
 * :param txhash: The transaction hash of the transaction this input comes from.
 * :param index: The zero-based index of the transaction output in ``txhash`` that
 *|     this input comes from.
 * :param sequence: The sequence number for the input.
 * :param script: The scriptSig for the input.
 * :param witness: The witness stack for the input, or NULL if no witness is present.
 * :param flags: Flags controlling script creation. Must be 0.
 */
func WallyTxAddRawInput(
	wallyTx *WallyTx,
	txhash []byte,
	index uint32,
	seq uint32,
	script []byte,
	witness *WallyTxWitnessStack,
	flags uint32) (ret int) {

	wally_index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	wally_seq := SwigcptrUint32_t(uintptr(unsafe.Pointer(&seq)))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))

	ret = Wally_tx_add_raw_input(
		wallyTx,
		&txhash[0],
		int64(len(txhash)),
		wally_index,
		wally_seq,
		&script[0],
		int64(len(script)),
		witness,
		wally_flags)
	return
}

/**
 * Create a Elements transaction for signing and return its hash.
 *
 * :param tx: The transaction to generate the signature hash from.
 * :param index: The input index of the input being signed for.
 * :param script: The scriptSig for the input represented by ``index``.
 *|		if p2sh, set redeemscript
 * :param value: The (confidential) value spent by the input being signed for. Only used if
 *|     flags includes WALLY_TX_FLAG_USE_WITNESS, pass NULL otherwise.
 * :param sighash: WALLY_SIGHASH_ flags specifying the type of signature desired.
 * :param flags: WALLY_TX_FLAG_USE_WITNESS to generate a BIP 143 signature, or 0
 *|     to generate a pre-segwit Bitcoin signature.
 */
func WallyTxGetElementsSignatureHash(
	tx *WallyTx,
	index int64,
	scriptSig []byte,
	value []byte,
	sighash uint32,
	flags uint32) (signatureHash [SHA256_LEN]byte, ret int) {
	var wally_value *byte = nil
	valueLen := int64(0)
	if value != nil {
		wally_value = &value[0]
		valueLen = int64(len(value))
	}
	wally_sighash := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sighash)))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))

	ret = Wally_tx_get_elements_signature_hash(
		tx,
		index,
		&scriptSig[0],
		int64(len(scriptSig)),
		wally_value,
		valueLen,
		wally_sighash,
		wally_flags,
		&signatureHash[0],
		int64(len(signatureHash)))
	return
}

const ASSET_TAG_LEN int = 32
const BLINDING_FACTOR_LEN int = 32
const ASSET_GENERATOR_LEN int = 33
const ASSET_COMMITMENT_LEN int = 33
const ASSET_RANGEPROOF_MAX_LEN int = 5134
func Wally_asset_generator_from_bytes(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_asset_generator_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_222(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_223(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_224(_swig_i_5)))
	return swig_r
}

func Wally_asset_final_vbf(arg1 Uint64_t, arg2 int64, arg3 int64, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_wally_asset_final_vbf_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_type_225(_swig_i_1), C.swig_type_226(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_227(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_228(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_229(_swig_i_8)))
	return swig_r
}

func Wally_asset_value_commitment(arg1 Uint64_t, arg2 *byte, arg3 int64, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_asset_value_commitment_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_230(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_231(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_232(_swig_i_6)))
	return swig_r
}

func Wally_asset_rangeproof_with_nonce(arg1 Uint64_t, arg2 *byte, arg3 int64, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64, arg14 *byte, arg15 int64, arg16 Uint64_t, arg17 int, arg18 int, arg19 *byte, arg20 int64, arg21 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16.Swigcptr()
	_swig_i_16 := arg17
	_swig_i_17 := arg18
	_swig_i_18 := arg19
	_swig_i_19 := arg20
	_swig_i_20 := arg21
	swig_r = (int)(C._wrap_wally_asset_rangeproof_with_nonce_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_233(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_234(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_235(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_236(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_237(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_238(_swig_i_12), C.swig_voidp(_swig_i_13), C.swig_type_239(_swig_i_14), C.uintptr_t(_swig_i_15), C.swig_intgo(_swig_i_16), C.swig_intgo(_swig_i_17), C.swig_voidp(_swig_i_18), C.swig_type_240(_swig_i_19), C.swig_voidp(_swig_i_20)))
	return swig_r
}

func Wally_asset_rangeproof(arg1 Uint64_t, arg2 *byte, arg3 int64, arg4 *byte, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64, arg14 *byte, arg15 int64, arg16 *byte, arg17 int64, arg18 Uint64_t, arg19 int, arg20 int, arg21 *byte, arg22 int64, arg23 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16
	_swig_i_16 := arg17
	_swig_i_17 := arg18.Swigcptr()
	_swig_i_18 := arg19
	_swig_i_19 := arg20
	_swig_i_20 := arg21
	_swig_i_21 := arg22
	_swig_i_22 := arg23
	swig_r = (int)(C._wrap_wally_asset_rangeproof_wallycore_d8a377d8fe8cbbab(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_241(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_242(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_243(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_244(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_245(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_246(_swig_i_12), C.swig_voidp(_swig_i_13), C.swig_type_247(_swig_i_14), C.swig_voidp(_swig_i_15), C.swig_type_248(_swig_i_16), C.uintptr_t(_swig_i_17), C.swig_intgo(_swig_i_18), C.swig_intgo(_swig_i_19), C.swig_voidp(_swig_i_20), C.swig_type_249(_swig_i_21), C.swig_voidp(_swig_i_22)))
	return swig_r
}

func Wally_asset_surjectionproof_size(arg1 int64, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_asset_surjectionproof_size_wallycore_d8a377d8fe8cbbab(C.swig_type_250(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_asset_surjectionproof(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 *byte, arg8 int64, arg9 *byte, arg10 int64, arg11 *byte, arg12 int64, arg13 *byte, arg14 int64, arg15 *byte, arg16 int64, arg17 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16
	_swig_i_16 := arg17
	swig_r = (int)(C._wrap_wally_asset_surjectionproof_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_251(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_252(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_253(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_254(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_type_255(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_type_256(_swig_i_11), C.swig_voidp(_swig_i_12), C.swig_type_257(_swig_i_13), C.swig_voidp(_swig_i_14), C.swig_type_258(_swig_i_15), C.swig_voidp(_swig_i_16)))
	return swig_r
}

func Wally_asset_unblind_with_nonce(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 *byte, arg8 int64, arg9 *byte, arg10 int64, arg11 *byte, arg12 int64, arg13 *byte, arg14 int64, arg15 *byte, arg16 int64, arg17 Uint64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16
	_swig_i_16 := arg17.Swigcptr()
	swig_r = (int)(C._wrap_wally_asset_unblind_with_nonce_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_259(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_260(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_261(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_262(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_type_263(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_type_264(_swig_i_11), C.swig_voidp(_swig_i_12), C.swig_type_265(_swig_i_13), C.swig_voidp(_swig_i_14), C.swig_type_266(_swig_i_15), C.uintptr_t(_swig_i_16)))
	return swig_r
}

func Wally_asset_unblind(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 *byte, arg8 int64, arg9 *byte, arg10 int64, arg11 *byte, arg12 int64, arg13 *byte, arg14 int64, arg15 *byte, arg16 int64, arg17 *byte, arg18 int64, arg19 Uint64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16
	_swig_i_16 := arg17
	_swig_i_17 := arg18
	_swig_i_18 := arg19.Swigcptr()
	swig_r = (int)(C._wrap_wally_asset_unblind_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_267(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_268(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_269(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_270(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_type_271(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_type_272(_swig_i_11), C.swig_voidp(_swig_i_12), C.swig_type_273(_swig_i_13), C.swig_voidp(_swig_i_14), C.swig_type_274(_swig_i_15), C.swig_voidp(_swig_i_16), C.swig_type_275(_swig_i_17), C.uintptr_t(_swig_i_18)))
	return swig_r
}

func Wally_asset_blinding_key_from_seed(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_wally_asset_blinding_key_from_seed_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_276(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_277(_swig_i_3)))
	return swig_r
}

func Wally_asset_blinding_key_to_ec_private_key(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_asset_blinding_key_to_ec_private_key_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_278(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_279(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_280(_swig_i_5)))
	return swig_r
}

func Wally_asset_pak_whitelistproof_size(arg1 int64, arg2 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_wally_asset_pak_whitelistproof_size_wallycore_d8a377d8fe8cbbab(C.swig_type_281(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func Wally_asset_pak_whitelistproof(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 int64, arg6 *byte, arg7 int64, arg8 *byte, arg9 int64, arg10 *byte, arg11 int64, arg12 *byte, arg13 int64, arg14 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	swig_r = (int)(C._wrap_wally_asset_pak_whitelistproof_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_282(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_283(_swig_i_3), C.swig_type_284(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_285(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_286(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_287(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_type_288(_swig_i_12), C.swig_voidp(_swig_i_13)))
	return swig_r
}


/**
 * asset is little endian byte order
 */
func WallyAssetUnblind(
	nonce []byte,
	blindPrivKey []byte,
	proof []byte,
	valueCommitment []byte,
	extra []byte,
	assetCommitment []byte,
) (
	asset [32]byte,
	assetBlindFactor [32]byte,
	value uint64,
	valueBlindFactor [32]byte,
	ret int,
) {
	assetOut := CCharArray{&asset[0], int64(ASSET_TAG_LEN)}
	assetBlindFactorOut := CCharArray{&assetBlindFactor[0], int64(ASSET_TAG_LEN)}
	valueBlindFactorOut := CCharArray{&valueBlindFactor[0], int64(ASSET_TAG_LEN)}
	valueOut := SwigcptrUint64_t(unsafe.Pointer(&value))

	ret = Wally_asset_unblind(
		&nonce[0],
		int64(len(nonce)),
		&blindPrivKey[0],
		int64(len(blindPrivKey)),
		&proof[0],
		int64(len(proof)),
		&valueCommitment[0],
		int64(len(valueCommitment)),
		&extra[0],
		int64(len(extra)),
		&assetCommitment[0],
		int64(len(assetCommitment)),
		assetOut.P,
		assetOut.Length,
		assetBlindFactorOut.P,
		assetBlindFactorOut.Length,
		valueBlindFactorOut.P,
		valueBlindFactorOut.Length,
		valueOut,
	)
	return
}

const WALLY_SCRIPT_TYPE_UNKNOWN int = 0x0
const WALLY_SCRIPT_TYPE_OP_RETURN int = 0x1
const WALLY_SCRIPT_TYPE_P2PKH int = 0x2
const WALLY_SCRIPT_TYPE_P2SH int = 0x4
const WALLY_SCRIPT_TYPE_P2WPKH int = 0x8
const WALLY_SCRIPT_TYPE_P2WSH int = 0x10
const WALLY_SCRIPT_TYPE_MULTISIG int = 0x20
const WALLY_SCRIPTPUBKEY_P2PKH_LEN int = 25
const WALLY_SCRIPTPUBKEY_P2SH_LEN int = 23
const WALLY_SCRIPTPUBKEY_P2WPKH_LEN int = 22
const WALLY_SCRIPTPUBKEY_P2WSH_LEN int = 34
const WALLY_SCRIPTPUBKEY_OP_RETURN_MAX_LEN int = 83
const WALLY_MAX_OP_RETURN_LEN int = 80
const WALLY_SCRIPTSIG_P2PKH_MAX_LEN int = 140
const WALLY_WITNESSSCRIPT_MAX_LEN int = 35
const WALLY_SCRIPT_HASH160 int = 0x1
const WALLY_SCRIPT_SHA256 int = 0x2
const WALLY_SCRIPT_AS_PUSH int = 0x4
const WALLY_SCRIPT_MULTISIG_SORTED int = 0x8
const OP_0 int = 0x00
const OP_FALSE int = 0x00
const OP_PUSHDATA1 int = 0x4c
const OP_PUSHDATA2 int = 0x4d
const OP_PUSHDATA4 int = 0x4e
const OP_1NEGATE int = 0x4f
const OP_RESERVED int = 0x50
const OP_1 int = 0x51
const OP_TRUE int = 0x51
const OP_2 int = 0x52
const OP_3 int = 0x53
const OP_4 int = 0x54
const OP_5 int = 0x55
const OP_6 int = 0x56
const OP_7 int = 0x57
const OP_8 int = 0x58
const OP_9 int = 0x59
const OP_10 int = 0x5a
const OP_11 int = 0x5b
const OP_12 int = 0x5c
const OP_13 int = 0x5d
const OP_14 int = 0x5e
const OP_15 int = 0x5f
const OP_16 int = 0x60
const OP_NOP int = 0x61
const OP_VER int = 0x62
const OP_IF int = 0x63
const OP_NOTIF int = 0x64
const OP_VERIF int = 0x65
const OP_VERNOTIF int = 0x66
const OP_ELSE int = 0x67
const OP_ENDIF int = 0x68
const OP_VERIFY int = 0x69
const OP_RETURN int = 0x6a
const OP_TOALTSTACK int = 0x6b
const OP_FROMALTSTACK int = 0x6c
const OP_2DROP int = 0x6d
const OP_2DUP int = 0x6e
const OP_3DUP int = 0x6f
const OP_2OVER int = 0x70
const OP_2ROT int = 0x71
const OP_2SWAP int = 0x72
const OP_IFDUP int = 0x73
const OP_DEPTH int = 0x74
const OP_DROP int = 0x75
const OP_DUP int = 0x76
const OP_NIP int = 0x77
const OP_OVER int = 0x78
const OP_PICK int = 0x79
const OP_ROLL int = 0x7a
const OP_ROT int = 0x7b
const OP_SWAP int = 0x7c
const OP_TUCK int = 0x7d
const OP_CAT int = 0x7e
const OP_SUBSTR int = 0x7f
const OP_LEFT int = 0x80
const OP_RIGHT int = 0x81
const OP_SIZE int = 0x82
const OP_INVERT int = 0x83
const OP_AND int = 0x84
const OP_OR int = 0x85
const OP_XOR int = 0x86
const OP_EQUAL int = 0x87
const OP_EQUALVERIFY int = 0x88
const OP_RESERVED1 int = 0x89
const OP_RESERVED2 int = 0x8a
const OP_1ADD int = 0x8b
const OP_1SUB int = 0x8c
const OP_2MUL int = 0x8d
const OP_2DIV int = 0x8e
const OP_NEGATE int = 0x8f
const OP_ABS int = 0x90
const OP_NOT int = 0x91
const OP_0NOTEQUAL int = 0x92
const OP_ADD int = 0x93
const OP_SUB int = 0x94
const OP_MUL int = 0x95
const OP_DIV int = 0x96
const OP_MOD int = 0x97
const OP_LSHIFT int = 0x98
const OP_RSHIFT int = 0x99
const OP_BOOLAND int = 0x9a
const OP_BOOLOR int = 0x9b
const OP_NUMEQUAL int = 0x9c
const OP_NUMEQUALVERIFY int = 0x9d
const OP_NUMNOTEQUAL int = 0x9e
const OP_LESSTHAN int = 0x9f
const OP_GREATERTHAN int = 0xa0
const OP_LESSTHANOREQUAL int = 0xa1
const OP_GREATERTHANOREQUAL int = 0xa2
const OP_MIN int = 0xa3
const OP_MAX int = 0xa4
const OP_WITHIN int = 0xa5
const OP_RIPEMD160 int = 0xa6
const OP_SHA1 int = 0xa7
const OP_SHA256 int = 0xa8
const OP_HASH160 int = 0xa9
const OP_HASH256 int = 0xaa
const OP_CODESEPARATOR int = 0xab
const OP_CHECKSIG int = 0xac
const OP_CHECKSIGVERIFY int = 0xad
const OP_CHECKMULTISIG int = 0xae
const OP_CHECKMULTISIGVERIFY int = 0xaf
const OP_NOP1 int = 0xb0
const OP_CHECKLOCKTIMEVERIFY int = 0xb1
const OP_NOP2 int = 0xb1
const OP_CHECKSEQUENCEVERIFY int = 0xb2
const OP_NOP3 int = 0xb2
const OP_NOP4 int = 0xb3
const OP_NOP5 int = 0xb4
const OP_NOP6 int = 0xb5
const OP_NOP7 int = 0xb6
const OP_NOP8 int = 0xb7
const OP_NOP9 int = 0xb8
const OP_NOP10 int = 0xb9
const OP_INVALIDOPCODE int = 0xff
func Wally_scriptpubkey_get_type(arg1 *byte, arg2 int64, arg3 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_wally_scriptpubkey_get_type_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_289(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func Wally_scriptpubkey_p2pkh_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_scriptpubkey_p2pkh_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_290(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_291(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func Wally_scriptsig_p2pkh_from_sig(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 *byte, arg7 int64, arg8 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_wally_scriptsig_p2pkh_from_sig_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_292(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_293(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_294(_swig_i_6), C.swig_voidp(_swig_i_7)))
	return swig_r
}

func Wally_witness_p2wpkh_from_sig(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 Wally_tx_witness_stack) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_wally_witness_p2wpkh_from_sig_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_295(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_296(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5)))
	return swig_r
}

func Wally_scriptsig_p2pkh_from_der(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_scriptsig_p2pkh_from_der_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_297(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_298(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_299(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func Wally_witness_p2wpkh_from_der(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Wally_tx_witness_stack) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_wally_witness_p2wpkh_from_der_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_300(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_301(_swig_i_3), C.uintptr_t(_swig_i_4)))
	return swig_r
}

func Wally_scriptpubkey_op_return_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_scriptpubkey_op_return_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_302(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_303(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func Wally_scriptpubkey_p2sh_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_scriptpubkey_p2sh_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_304(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_305(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func Wally_scriptpubkey_multisig_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 *byte, arg6 int64, arg7 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_scriptpubkey_multisig_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_306(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_307(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func Wally_scriptsig_multisig_from_bytes(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 int64, arg7 Uint32_t, arg8 *byte, arg9 int64, arg10 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_wally_scriptsig_multisig_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_308(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_309(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_type_310(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_type_311(_swig_i_8), C.swig_voidp(_swig_i_9)))
	return swig_r
}

func Wally_witness_multisig_from_bytes(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 int64, arg7 Uint32_t, arg8 Wally_tx_witness_stack) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	swig_r = (int)(C._wrap_wally_witness_multisig_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_312(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_313(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_type_314(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7)))
	return swig_r
}

func Wally_scriptpubkey_csv_2of2_then_1_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 *byte, arg6 int64, arg7 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_scriptpubkey_csv_2of2_then_1_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_315(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_316(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func Wally_scriptpubkey_csv_2of2_then_1_from_bytes_opt(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 *byte, arg6 int64, arg7 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_scriptpubkey_csv_2of2_then_1_from_bytes_opt_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_317(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_318(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func Wally_scriptpubkey_csv_2of3_then_2_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 Uint32_t, arg5 *byte, arg6 int64, arg7 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_wally_scriptpubkey_csv_2of3_then_2_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_319(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_320(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func Wally_script_push_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_script_push_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_321(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_322(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func Wally_witness_program_from_bytes(arg1 *byte, arg2 int64, arg3 Uint32_t, arg4 *byte, arg5 int64, arg6 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_wally_witness_program_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_323(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_type_324(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func Wally_elements_pegout_script_size(arg1 int64, arg2 int64, arg3 int64, arg4 int64, arg5 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_wally_elements_pegout_script_size_wallycore_d8a377d8fe8cbbab(C.swig_type_325(_swig_i_0), C.swig_type_326(_swig_i_1), C.swig_type_327(_swig_i_2), C.swig_type_328(_swig_i_3), C.swig_voidp(_swig_i_4)))
	return swig_r
}

func Wally_elements_pegout_script_from_bytes(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 *byte, arg6 int64, arg7 *byte, arg8 int64, arg9 Uint32_t, arg10 *byte, arg11 int64, arg12 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_wally_elements_pegout_script_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_329(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_330(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_type_331(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_type_332(_swig_i_7), C.uintptr_t(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_type_333(_swig_i_10), C.swig_voidp(_swig_i_11)))
	return swig_r
}

func Wally_elements_pegin_contract_script_from_bytes(arg1 *byte, arg2 int64, arg3 *byte, arg4 int64, arg5 Uint32_t, arg6 *byte, arg7 int64, arg8 *int64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_wally_elements_pegin_contract_script_from_bytes_wallycore_d8a377d8fe8cbbab(C.swig_voidp(_swig_i_0), C.swig_type_334(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_type_335(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_type_336(_swig_i_6), C.swig_voidp(_swig_i_7)))
	return swig_r
}


/**
 * Determine the type of a scriptPubkey script.
 *
 * :param bytes: Bytes of the scriptPubkey.
 */
func WallyScriptpubkeyGetType(scriptPubKey []byte) (scriptType int64, ret int) {
	ret = Wally_scriptpubkey_get_type(&scriptPubKey[0], int64(len(scriptPubKey)), &scriptType)
	return
}

/**
 * Create a P2PKH scriptPubkey.
 *
 * :param pubKey: Bytes to create a scriptPubkey for.
 * :param flags: ``WALLY_SCRIPT_HASH160`` or 0.
 */
func WallyScriptpubkeyP2pkhFromBytes(pubKey []byte, flags uint32) (scriptBytes  [WALLY_SCRIPTPUBKEY_P2PKH_LEN]byte, ret int){
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	written := int64(0)
	ret = Wally_scriptpubkey_p2pkh_from_bytes(
		&pubKey[0],
		int64(len(pubKey)),
		wally_flags,
		&scriptBytes[0],
		int64(len(scriptBytes)),
		&written)
	return
}

/**
 * Create a P2PKH scriptSig from a pubkey and compact signature.
 *
 * This function creates the scriptSig by converting ``sig`` to DER
 * encoding, appending the given sighash, then calling `wally_scriptsig_p2pkh_from_der`.
 *
 * :param pub_key: The public key to create a scriptSig with.
 * :param sig: The compact signature to create a scriptSig with.
 * :param sighash: WALLY_SIGHASH_ flags specifying the type of signature desired.
 */
func WallyScriptsigP2pkhFromSig(pubkey []byte, sig [EC_SIGNATURE_LEN]byte, sighash uint32) (scriptSig []byte, ret int) {
	wally_sighash := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sighash)))
	var scriptSigBuf [256]byte
	written := int64(0)
	ret = Wally_scriptsig_p2pkh_from_sig(&pubkey[0], int64(len(pubkey)), &sig[0], int64(len(sig)), wally_sighash, &scriptSigBuf[0], int64(len(scriptSigBuf)), &written)
	scriptSig = scriptSigBuf[:written]
	return
}

/**
 * Create a P2SH scriptPubkey.
 *
 * :param bytes: Bytes to create a scriptPubkey for.
 * :param flags: ``WALLY_SCRIPT_HASH160`` or 0.
 */
func WallyScriptpubkeyP2shFromBytes(redeemScript []byte, flags uint32) (scriptBytes [WALLY_SCRIPTPUBKEY_P2SH_LEN]byte, ret int){
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	written := int64(0)
	ret = Wally_scriptpubkey_p2sh_from_bytes(
		&redeemScript[0],
		int64(len(redeemScript)),
		wally_flags,
		&scriptBytes[0],
		int64(len(scriptBytes)),
		&written)
	return
}

/**
 * Create a multisig scriptPubkey.
 *
 * :param bytes: Compressed public keys to create a scriptPubkey from.
 * :param threshold: The number of signatures that must match to satisfy the script.
 * :param flags: Must be zero.
 */
func WallyScriptpubkeyMultisigFromBytes(pubKeys []byte, threshold uint32, flags uint32) (redeemScript  []byte, ret int){
	wally_threshold := SwigcptrUint32_t(uintptr(unsafe.Pointer(&threshold)))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	pubkeyNum := len(pubKeys) / EC_PUBLIC_KEY_LEN
	scriptByteLen := int64(3 + (pubkeyNum * (EC_PUBLIC_KEY_LEN + 1)))
	redeemScript = make([]byte, scriptByteLen)
	written := int64(0)
	ret = Wally_scriptpubkey_multisig_from_bytes(
		&pubKeys[0],
		int64(len(pubKeys)),
		wally_threshold,
		wally_flags,
		&redeemScript[0],
		int64(len(redeemScript)),
		&written)
	return
}

/**
 * Create a multisig scriptSig.
 *
 * :param script: The redeem script this scriptSig provides signatures for.
 * :param bytes: Compact signatures to place in the scriptSig.
 * :param sighash: WALLY_SIGHASH_ flags for each signature in ``bytes``.
 * :param flags: Must be zero.
 */
func WallyScriptsigMultisigFromBytes(redeemScript []byte, signatures [][EC_SIGNATURE_LEN]byte, sighashes []uint32, flags uint32) (scriptSig []byte, ret int) {
	var signature []byte
	for i := 0; i < len(signatures); i++ {
		signature = append(signature, signatures[i][:]...)
	}
	wally_sighashes := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sighashes[0])))
	wally_flags := SwigcptrUint32_t(uintptr(unsafe.Pointer(&flags)))
	var scriptSigBuf [256]byte
	written := int64(0)

	ret = Wally_scriptsig_multisig_from_bytes(
		&redeemScript[0],
		int64(len(redeemScript)),
		&signature[0],
		int64(len(signature)),
		wally_sighashes,
		int64(len(sighashes)),
		wally_flags,
		&scriptSigBuf[0],
		int64(len(scriptSigBuf)),
		&written)

	if ret == WALLY_OK {
		scriptSig = scriptSigBuf[:written]
	}
	return
}


type SwigcptrWords uintptr
type Words interface {
	Swigcptr() uintptr;
}
func (p SwigcptrWords) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrWally_tx_input uintptr
type Wally_tx_input interface {
	Swigcptr() uintptr;
}
func (p SwigcptrWally_tx_input) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrWally_tx uintptr
type Wally_tx interface {
	Swigcptr() uintptr;
}
func (p SwigcptrWally_tx) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrWally_tx_output uintptr
type Wally_tx_output interface {
	Swigcptr() uintptr;
}
func (p SwigcptrWally_tx_output) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrExt_key uintptr
type Ext_key interface {
	Swigcptr() uintptr;
}
func (p SwigcptrExt_key) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrWally_tx_witness_stack uintptr
type Wally_tx_witness_stack interface {
	Swigcptr() uintptr;
}
func (p SwigcptrWally_tx_witness_stack) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint32_t uintptr
type Uint32_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint32_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint64_t uintptr
type Uint64_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint64_t) Swigcptr() uintptr {
	return uintptr(p)
}

